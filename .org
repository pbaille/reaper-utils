* Lua

Main repo for lua code


** Setup

I use =luarocks= as package manager
[[~/.luarocks/][lua-user-dir]]
alternatively I use =luaver=

** fennel

I will mainly use the fennel langage to interop with Lua

** Reaper

[[~/Library/ApplicationSupport/REAPER/Scripts/][scripts dir]]

The main motivation for using Lua is to interoperate with the reaper DAW

*** [[file:ruteal.fnl::(local {&as utils][ruteal.fnl]]
main utils file for reaper interp

*** [[/Users/pierrebaille/Code/Lua/socket-repl.fnl][socket-repl.fnl]]
 this file is compiled in lua and added to reaper

 - From reaper action menu (?) search and run socket-repl.lua
 - from a fnl source file buffer =(spc m R)= will enable reaper-mode
   expression can be evaluated using =pb/send-fnl-s-expression-to-reaper-socket-repl=
   this should popup a console window in reaper.

*** [[/Users/pierrebaille/Code/Lua/socket.lua][socket.lua]]
this file load the reaper modified socket library (duplicated from REAPER/Sripts dir)

** Clojure interop

Connect to a running repl with
[[file:xp/nrepl-client.fnl::(fn receive \[conn\]][nrepl-client.fnl]]


* Things to do
** DONE insert a note
using the map representation of rutils
insert a note at point from repl
** DONE insert a noon score
call noon using nrepl
insert the score at cursor position in reaper
- get score0 and turn it into ruteals note format
  see [[~/Code/Lua/xp/nrepl-client.fnl]] for clj interop
- noon should expose a way to get data suitable for midi insertion
  see the code following previously mentioned clj interop
** DONE create a convenient interface to send score to reaper
- tried to use fennel repl as base but encountered some inconveniences
  inserting a clj generated score into fennel code template is hard
- try the same from clojure
  send to reaper socket directly from clojure
  see [[file:~/Code/WIP/noon/src/noon/utils/reaper.clj::comment (send-fennel (+ 4 5)][noon/utils/reaper.clj]]
** DONE reload the reaper socket repl script remotely
- I will need to make addition and changes to =ruteal.fnl= along the way
  there should be an easy way to compile and reload, making those changes
  immediately available in reaper-repl

  this was achieved by adding a =reload= function to =utils.fnl=
  used in place of =require= it does the same thing but do not use cache.
  see [[file:~/Code/WIP/noon/src/noon/utils/reaper.clj::(let \[score-data (noon.score/score->reaper-notes (eval `(noon.score/mk ~@xs)))\]][noon/utils/reaper.clj]]
** DONE get back some data from reaper
reaper now send evaluation result to localhost port 9997
noon.utils.reaper defines the =<<= macro that send the given forms and return the received result !
** DONE get selection
- it should be possible to select notes in reaper and get a noon score back
  - get the time selection if present
  - get the selected note in this selection
  - if no time selection use extreme notes as time boundaries
  - if no note selection select every notes in time selection
  - if neither of those, select the whole reaper take

could we bind shortcuts to score updates ? it would make sense for simple update like pitch steps, velocity etc...
** DONE init score
the sync between the noon score atom and the active reaper take has to be maintained
and initialized with =noon.score/score0=
** DONE upd selection
when running an update on a selection:
- the selection has to be replaced by the resulting score in reaper
- the score atom has to be updated
** DONE handle JSON size limit
when selection is not small I get end of file errors in clojure...
it was done by brutally increase the size of [[file:~/Code/WIP/noon/src/noon/utils/socket.clj::packet (DatagramPacket. (byte-array PACKET_SIZE) PACKET_SIZE)\]][the datagram packet]]
** DONE map score updates
it should be handy to not leave emacs
use emacs keybindings instead of reaper ones

how to execute clojure code on a given keystroke ?
- write an elisp function that send some expr to current repl
- make a map of available reaper actions
- setup an hydra for those

send the current ecpression as a score update !
#+begin_src emacs-lisp :tangle yes
(defun pb/reaper-update-selection! ()
  (interactive)
  (cider-interactive-eval (concat "(upd-selection! " (pb/current-s-expression-as-string) ")")
                          nil nil
                          (cider--nrepl-pr-request-map)))

(map! "M-C-z" #'pb/reaper-update-selection!)
#+end_src
** DONE direct actions
sending everything via the socket repl is not optimal.
it is slow.
non noon-related actions should be triggered by action-id via Osc
We will need to compile those actions into lua and manually assign actions id
***  cursor and time-selection
lets start small with cursor movement and time-selection adjusting
I would like to do the most from clojure
put all necessary info into a clojure map and call a function that emits all the lua code
[[file:~/Code/WIP/noon/src/noon/utils/reaper.clj::(reg-actions!][action regitration]]
** DONE FP lua helpers
It should be nice to have map filter reduce
see =keep= and =fold= in utils.fnl
** STRT note selection oriented actions
- should be able to navigate notes keeping focus (cursor and pitch-cursor)
- extend selection to the next or previous note
- cycling between notes at cursor
** TODO refactor ruteal using keep and fold
** TODO structure reaper actions like a tree and compile and hydra for it
