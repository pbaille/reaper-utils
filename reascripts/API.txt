
ReaScript API
Generated by REAPER v6.78/OSX64-clang


REAPER provides an API (advanced programming interface) for users and third parties to create extended functionality. API functions can be called from a compiled C/C++ dynamic library that is loaded by REAPER, or at run-time by user-created ReaScripts that can be written using REAPER's own editor.

ReaScripts can be written in EEL2, a specialized language that is also used to write JSFX and video effect processors in REAPER; Lua, a popular scripting language; or Python, a widely-used programming language. EEL2 and Lua are embedded within REAPER and require no additional downloads or settings, and provide the most REAPER-specific features. Python must be downloaded and installed separately, and enabled in REAPER preferences. Because Python is harder to integrate with REAPER, some UI features are not available when using Python.

Learn more about ReaScript: http://www.cockos.com/reaper/sdk/reascript/reascript.php.

View: [all] [C/C++] [EEL2] [Lua] [Python]

ReaScript/Lua API
ReaScript/Lua scripts can call API functions using reaper.functionname().

Some functions return multiple values. In many cases, some function parameters are ignored, especially when similarly named parameters are present in the returned values.

Examples:
-- function returning a single (scalar) value:
sec = reaper.parse_timestr("1:12")

-- function with an ignored (dummy) parameter:
path = reaper.GetProjectPath("")

-- lower volume of track 3 by half:
tr = reaper.GetTrack(0, 2)
ok, vol, pan = reaper.GetTrackUIVolPan(tr, 0, 0)
reaper.SetMediaTrackInfo_Value(tr, "D_VOL", vol*0.5)

ReaScript/Lua can import functions from other ReaScripts using require. If the files are not being found, it is probably a path problem (remember that lua paths are wildcard patterns, not just directory listings, see details here).

In addition to the standard API functions, Reascript/Lua also has these built-in functions available:

atexit    	gfx.deltablit    	gfx.gradrect    	gfx.rect    	gfx.transformblit    	{reaper.array}.copy    
defer    	gfx.dock    	gfx.init    	gfx.rectto    	gfx.triangle    	{reaper.array}.fft    
get_action_context    	gfx.drawchar    	gfx.line    	gfx.roundrect    	gfx.update    	{reaper.array}.fft_real    
gfx VARIABLES    	gfx.drawnumber    	gfx.lineto    	gfx.screentoclient    	gmem_attach    	{reaper.array}.get_alloc    
gfx.arc    	gfx.drawstr    	gfx.loadimg    	gfx.set    	gmem_read    	{reaper.array}.ifft    
gfx.blit    	gfx.getchar    	gfx.measurechar    	gfx.setcursor    	gmem_write    	{reaper.array}.ifft_real    
gfx.blitext    	gfx.getdropfile    	gfx.measurestr    	gfx.setfont    	new_array    	{reaper.array}.multiply    
gfx.blurto    	gfx.getfont    	gfx.muladdrect    	gfx.setimgdim    	runloop    	{reaper.array}.resize    
gfx.circle    	gfx.getimgdim    	gfx.printf    	gfx.setpixel    	{reaper.array}.clear    	{reaper.array}.table    
gfx.clienttoscreen    	gfx.getpixel    	gfx.quit    	gfx.showmenu    	{reaper.array}.convolve    	

API Function List
AddMediaItemToTrack    	GetEnvelopePointEx    	InsertMedia    	SetTakeStretchMarkerSlope    
AddProjectMarker    	GetEnvelopeScalingMode    	InsertMediaSection    	SetTempoTimeSigMarker    
AddProjectMarker2    	GetEnvelopeStateChunk    	InsertTrackAtIndex    	SetThemeColor    
AddRemoveReaScript    	GetEnvelopeUIState    	IsMediaExtension    	SetToggleCommandState    
AddTakeToMediaItem    	GetExePath    	IsMediaItemSelected    	SetTrackAutomationMode    
AddTempoTimeSigMarker    	GetExtState    	IsProjectDirty    	SetTrackColor    
adjustZoom    	GetFocusedFX    	IsTrackSelected    	SetTrackMIDILyrics    
AnyTrackSolo    	GetFocusedFX2    	IsTrackVisible    	SetTrackMIDINoteName    
APIExists    	GetFreeDiskSpaceForRecordPath    	joystick_create    	SetTrackMIDINoteNameEx    
APITest    	GetFXEnvelope    	joystick_destroy    	SetTrackSelected    
ApplyNudge    	GetGlobalAutomationOverride    	joystick_enum    	SetTrackSendInfo_Value    
ArmCommand    	GetHZoomLevel    	joystick_getaxis    	SetTrackSendUIPan    
Audio_Init    	GetInputActivityLevel    	joystick_getbuttonmask    	SetTrackSendUIVol    
Audio_IsPreBuffer    	GetInputChannelName    	joystick_getinfo    	SetTrackStateChunk    
Audio_IsRunning    	GetInputOutputLatency    	joystick_getpov    	SetTrackUIInputMonitor    
Audio_Quit    	GetItemEditingTime2    	joystick_update    	SetTrackUIMute    
AudioAccessorStateChanged    	GetItemFromPoint    	kbd_enumerateActions    	SetTrackUIPan    
AudioAccessorUpdate    	GetItemProjectContext    	kbd_getTextFromCmd    	SetTrackUIPolarity    
AudioAccessorValidateState    	GetItemStateChunk    	LICE_ClipLine    	SetTrackUIRecArm    
BypassFxAllTracks    	GetLastColorThemeFile    	LocalizeString    	SetTrackUISolo    
CalcMediaSrcLoudness    	GetLastMarkerAndCurRegion    	Loop_OnArrow    	SetTrackUIVolume    
CalculateNormalization    	GetLastTouchedFX    	Main_OnCommand    	SetTrackUIWidth    
ClearAllRecArmed    	GetLastTouchedTrack    	Main_OnCommandEx    	ShowActionList    
ClearConsole    	GetMainHwnd    	Main_openProject    	ShowConsoleMsg    
ClearPeakCache    	GetMasterMuteSoloFlags    	Main_SaveProject    	ShowMessageBox    
ColorFromNative    	GetMasterTrack    	Main_SaveProjectEx    	ShowPopupMenu    
ColorToNative    	GetMasterTrackVisibility    	Main_UpdateLoopInfo    	SLIDER2DB    
CountActionShortcuts    	GetMaxMidiInputs    	MarkProjectDirty    	SnapToGrid    
CountAutomationItems    	GetMaxMidiOutputs    	MarkTrackItemsDirty    	SoloAllTracks    
CountEnvelopePoints    	GetMediaFileMetadata    	Master_GetPlayRate    	Splash_GetWnd    
CountEnvelopePointsEx    	GetMediaItem    	Master_GetPlayRateAtTime    	SplitMediaItem    
CountMediaItems    	GetMediaItem_Track    	Master_GetTempo    	stringToGuid    
CountProjectMarkers    	GetMediaItemInfo_Value    	Master_NormalizePlayRate    	StuffMIDIMessage    
CountSelectedMediaItems    	GetMediaItemNumTakes    	Master_NormalizeTempo    	TakeFX_AddByName    
CountSelectedTracks    	GetMediaItemTake    	MB    	TakeFX_CopyToTake    
CountSelectedTracks2    	GetMediaItemTake_Item    	MediaItemDescendsFromTrack    	TakeFX_CopyToTrack    
CountTakeEnvelopes    	GetMediaItemTake_Peaks    	MIDI_CountEvts    	TakeFX_Delete    
CountTakes    	GetMediaItemTake_Source    	MIDI_DeleteCC    	TakeFX_EndParamEdit    
CountTCPFXParms    	GetMediaItemTake_Track    	MIDI_DeleteEvt    	TakeFX_FormatParamValue    
CountTempoTimeSigMarkers    	GetMediaItemTakeByGUID    	MIDI_DeleteNote    	TakeFX_FormatParamValueNormalized    
CountTrackEnvelopes    	GetMediaItemTakeInfo_Value    	MIDI_DeleteTextSysexEvt    	TakeFX_GetChainVisible    
CountTrackMediaItems    	GetMediaItemTrack    	MIDI_DisableSort    	TakeFX_GetCount    
CountTracks    	GetMediaSourceFileName    	MIDI_EnumSelCC    	TakeFX_GetEnabled    
CreateNewMIDIItemInProj    	GetMediaSourceLength    	MIDI_EnumSelEvts    	TakeFX_GetEnvelope    
CreateTakeAudioAccessor    	GetMediaSourceNumChannels    	MIDI_EnumSelNotes    	TakeFX_GetFloatingWindow    
CreateTrackAudioAccessor    	GetMediaSourceParent    	MIDI_EnumSelTextSysexEvts    	TakeFX_GetFormattedParamValue    
CreateTrackSend    	GetMediaSourceSampleRate    	MIDI_GetAllEvts    	TakeFX_GetFXGUID    
CSurf_FlushUndo    	GetMediaSourceType    	MIDI_GetCC    	TakeFX_GetFXName    
CSurf_GetTouchState    	GetMediaTrackInfo_Value    	MIDI_GetCCShape    	TakeFX_GetIOSize    
CSurf_GoEnd    	GetMIDIInputName    	MIDI_GetEvt    	TakeFX_GetNamedConfigParm    
CSurf_GoStart    	GetMIDIOutputName    	MIDI_GetGrid    	TakeFX_GetNumParams    
CSurf_NumTracks    	GetMixerScroll    	MIDI_GetHash    	TakeFX_GetOffline    
CSurf_OnArrow    	GetMouseModifier    	MIDI_GetNote    	TakeFX_GetOpen    
CSurf_OnFwd    	GetMousePosition    	MIDI_GetPPQPos_EndOfMeasure    	TakeFX_GetParam    
CSurf_OnFXChange    	GetNumAudioInputs    	MIDI_GetPPQPos_StartOfMeasure    	TakeFX_GetParameterStepSizes    
CSurf_OnInputMonitorChange    	GetNumAudioOutputs    	MIDI_GetPPQPosFromProjQN    	TakeFX_GetParamEx    
CSurf_OnInputMonitorChangeEx    	GetNumMIDIInputs    	MIDI_GetPPQPosFromProjTime    	TakeFX_GetParamFromIdent    
CSurf_OnMuteChange    	GetNumMIDIOutputs    	MIDI_GetProjQNFromPPQPos    	TakeFX_GetParamIdent    
CSurf_OnMuteChangeEx    	GetNumTakeMarkers    	MIDI_GetProjTimeFromPPQPos    	TakeFX_GetParamName    
CSurf_OnPanChange    	GetNumTracks    	MIDI_GetRecentInputEvent    	TakeFX_GetParamNormalized    
CSurf_OnPanChangeEx    	GetOS    	MIDI_GetScale    	TakeFX_GetPinMappings    
CSurf_OnPause    	GetOutputChannelName    	MIDI_GetTextSysexEvt    	TakeFX_GetPreset    
CSurf_OnPlay    	GetOutputLatency    	MIDI_GetTrackHash    	TakeFX_GetPresetIndex    
CSurf_OnPlayRateChange    	GetParentTrack    	midi_init    	TakeFX_GetUserPresetFilename    
CSurf_OnRecArmChange    	GetPeakFileName    	MIDI_InsertCC    	TakeFX_NavigatePresets    
CSurf_OnRecArmChangeEx    	GetPeakFileNameEx    	MIDI_InsertEvt    	TakeFX_SetEnabled    
CSurf_OnRecord    	GetPeakFileNameEx2    	MIDI_InsertNote    	TakeFX_SetNamedConfigParm    
CSurf_OnRecvPanChange    	GetPlayPosition    	MIDI_InsertTextSysexEvt    	TakeFX_SetOffline    
CSurf_OnRecvVolumeChange    	GetPlayPosition2    	midi_reinit    	TakeFX_SetOpen    
CSurf_OnRew    	GetPlayPosition2Ex    	MIDI_SelectAll    	TakeFX_SetParam    
CSurf_OnRewFwd    	GetPlayPositionEx    	MIDI_SetAllEvts    	TakeFX_SetParamNormalized    
CSurf_OnScroll    	GetPlayState    	MIDI_SetCC    	TakeFX_SetPinMappings    
CSurf_OnSelectedChange    	GetPlayStateEx    	MIDI_SetCCShape    	TakeFX_SetPreset    
CSurf_OnSendPanChange    	GetProjectLength    	MIDI_SetEvt    	TakeFX_SetPresetByIndex    
CSurf_OnSendVolumeChange    	GetProjectName    	MIDI_SetItemExtents    	TakeFX_Show    
CSurf_OnSoloChange    	GetProjectPath    	MIDI_SetNote    	TakeIsMIDI    
CSurf_OnSoloChangeEx    	GetProjectPathEx    	MIDI_SetTextSysexEvt    	ThemeLayout_GetLayout    
CSurf_OnStop    	GetProjectStateChangeCount    	MIDI_Sort    	ThemeLayout_GetParameter    
CSurf_OnTempoChange    	GetProjectTimeOffset    	MIDIEditor_EnumTakes    	ThemeLayout_RefreshAll    
CSurf_OnTrackSelection    	GetProjectTimeSignature    	MIDIEditor_GetActive    	ThemeLayout_SetLayout    
CSurf_OnVolumeChange    	GetProjectTimeSignature2    	MIDIEditor_GetMode    	ThemeLayout_SetParameter    
CSurf_OnVolumeChangeEx    	GetProjExtState    	MIDIEditor_GetSetting_int    	time_precise    
CSurf_OnWidthChange    	GetResourcePath    	MIDIEditor_GetSetting_str    	TimeMap2_beatsToTime    
CSurf_OnWidthChangeEx    	GetSelectedEnvelope    	MIDIEditor_GetTake    	TimeMap2_GetDividedBpmAtTime    
CSurf_OnZoom    	GetSelectedMediaItem    	MIDIEditor_LastFocused_OnCommand    	TimeMap2_GetNextChangeTime    
CSurf_ResetAllCachedVolPanStates    	GetSelectedTrack    	MIDIEditor_OnCommand    	TimeMap2_QNToTime    
CSurf_ScrubAmt    	GetSelectedTrack2    	MIDIEditor_SetSetting_int    	TimeMap2_timeToBeats    
CSurf_SetAutoMode    	GetSelectedTrackEnvelope    	mkpanstr    	TimeMap2_timeToQN    
CSurf_SetPlayState    	GetSet_ArrangeView2    	mkvolpanstr    	TimeMap_curFrameRate    
CSurf_SetRepeatState    	GetSet_LoopTimeRange    	mkvolstr    	TimeMap_GetDividedBpmAtTime    
CSurf_SetSurfaceMute    	GetSet_LoopTimeRange2    	MoveEditCursor    	TimeMap_GetMeasureInfo    
CSurf_SetSurfacePan    	GetSetAutomationItemInfo    	MoveMediaItemToTrack    	TimeMap_GetMetronomePattern    
CSurf_SetSurfaceRecArm    	GetSetAutomationItemInfo_String    	MuteAllTracks    	TimeMap_GetTimeSigAtTime    
CSurf_SetSurfaceSelected    	GetSetEnvelopeInfo_String    	my_getViewport    	TimeMap_QNToMeasures    
CSurf_SetSurfaceSolo    	GetSetEnvelopeState    	NamedCommandLookup    	TimeMap_QNToTime    
CSurf_SetSurfaceVolume    	GetSetEnvelopeState2    	OnPauseButton    	TimeMap_QNToTime_abs    
CSurf_SetTrackListChange    	GetSetItemState    	OnPauseButtonEx    	TimeMap_timeToQN    
CSurf_TrackFromID    	GetSetItemState2    	OnPlayButton    	TimeMap_timeToQN_abs    
CSurf_TrackToID    	GetSetMediaItemInfo_String    	OnPlayButtonEx    	ToggleTrackSendUIMute    
DB2SLIDER    	GetSetMediaItemTakeInfo_String    	OnStopButton    	Track_GetPeakHoldDB    
DeleteActionShortcut    	GetSetMediaTrackInfo_String    	OnStopButtonEx    	Track_GetPeakInfo    
DeleteEnvelopePointEx    	GetSetProjectAuthor    	OpenColorThemeFile    	TrackCtl_SetToolTip    
DeleteEnvelopePointRange    	GetSetProjectGrid    	OpenMediaExplorer    	TrackFX_AddByName    
DeleteEnvelopePointRangeEx    	GetSetProjectInfo    	OscLocalMessageToHost    	TrackFX_CopyToTake    
DeleteExtState    	GetSetProjectInfo_String    	parse_timestr    	TrackFX_CopyToTrack    
DeleteProjectMarker    	GetSetProjectNotes    	parse_timestr_len    	TrackFX_Delete    
DeleteProjectMarkerByIndex    	GetSetRepeat    	parse_timestr_pos    	TrackFX_EndParamEdit    
DeleteTakeMarker    	GetSetRepeatEx    	parsepanstr    	TrackFX_FormatParamValue    
DeleteTakeStretchMarkers    	GetSetTrackGroupMembership    	PCM_Sink_Enum    	TrackFX_FormatParamValueNormalized    
DeleteTempoTimeSigMarker    	GetSetTrackGroupMembershipHigh    	PCM_Sink_GetExtension    	TrackFX_GetByName    
DeleteTrack    	GetSetTrackSendInfo_String    	PCM_Sink_ShowConfig    	TrackFX_GetChainVisible    
DeleteTrackMediaItem    	GetSetTrackState    	PCM_Source_BuildPeaks    	TrackFX_GetCount    
DestroyAudioAccessor    	GetSetTrackState2    	PCM_Source_CreateFromFile    	TrackFX_GetEnabled    
DoActionShortcutDialog    	GetSubProjectFromSource    	PCM_Source_CreateFromFileEx    	TrackFX_GetEQ    
Dock_UpdateDockID    	GetTake    	PCM_Source_CreateFromType    	TrackFX_GetEQBandEnabled    
DockGetPosition    	GetTakeEnvelope    	PCM_Source_Destroy    	TrackFX_GetEQParam    
DockIsChildOfDock    	GetTakeEnvelopeByName    	PCM_Source_GetPeaks    	TrackFX_GetFloatingWindow    
DockWindowActivate    	GetTakeMarker    	PCM_Source_GetSectionInfo    	TrackFX_GetFormattedParamValue    
DockWindowAdd    	GetTakeName    	PluginWantsAlwaysRunFx    	TrackFX_GetFXGUID    
DockWindowAddEx    	GetTakeNumStretchMarkers    	PreventUIRefresh    	TrackFX_GetFXName    
DockWindowRefresh    	GetTakeStretchMarker    	PromptForAction    	TrackFX_GetInstrument    
DockWindowRefreshForHWND    	GetTakeStretchMarkerSlope    	ReaScriptError    	TrackFX_GetIOSize    
DockWindowRemove    	GetTCPFXParm    	RecursiveCreateDirectory    	TrackFX_GetNamedConfigParm    
EditTempoTimeSigMarker    	GetTempoMatchPlayRate    	reduce_open_files    	TrackFX_GetNumParams    
EnsureNotCompletelyOffscreen    	GetTempoTimeSigMarker    	RefreshToolbar    	TrackFX_GetOffline    
EnumerateFiles    	GetThemeColor    	RefreshToolbar2    	TrackFX_GetOpen    
EnumerateSubdirectories    	GetThingFromPoint    	relative_fn    	TrackFX_GetParam    
EnumPitchShiftModes    	GetToggleCommandState    	RemoveTrackSend    	TrackFX_GetParameterStepSizes    
EnumPitchShiftSubModes    	GetToggleCommandStateEx    	RenderFileSection    	TrackFX_GetParamEx    
EnumProjectMarkers    	GetTooltipWindow    	ReorderSelectedTracks    	TrackFX_GetParamFromIdent    
EnumProjectMarkers2    	GetTrack    	Resample_EnumModes    	TrackFX_GetParamIdent    
EnumProjectMarkers3    	GetTrackAutomationMode    	resolve_fn    	TrackFX_GetParamName    
EnumProjects    	GetTrackColor    	resolve_fn2    	TrackFX_GetParamNormalized    
EnumProjExtState    	GetTrackDepth    	ReverseNamedCommandLookup    	TrackFX_GetPinMappings    
EnumRegionRenderMatrix    	GetTrackEnvelope    	ScaleFromEnvelopeMode    	TrackFX_GetPreset    
EnumTrackMIDIProgramNames    	GetTrackEnvelopeByChunkName    	ScaleToEnvelopeMode    	TrackFX_GetPresetIndex    
EnumTrackMIDIProgramNamesEx    	GetTrackEnvelopeByName    	SectionFromUniqueID    	TrackFX_GetRecChainVisible    
Envelope_Evaluate    	GetTrackFromPoint    	SelectAllMediaItems    	TrackFX_GetRecCount    
Envelope_FormatValue    	GetTrackGUID    	SelectProjectInstance    	TrackFX_GetUserPresetFilename    
Envelope_GetParentTake    	GetTrackMediaItem    	SendMIDIMessageToHardware    	TrackFX_NavigatePresets    
Envelope_GetParentTrack    	GetTrackMIDILyrics    	SetActiveTake    	TrackFX_SetEnabled    
Envelope_SortPoints    	GetTrackMIDINoteName    	SetAutomationMode    	TrackFX_SetEQBandEnabled    
Envelope_SortPointsEx    	GetTrackMIDINoteNameEx    	SetCurrentBPM    	TrackFX_SetEQParam    
ExecProcess    	GetTrackMIDINoteRange    	SetCursorContext    	TrackFX_SetNamedConfigParm    
file_exists    	GetTrackName    	SetEditCurPos    	TrackFX_SetOffline    
FindTempoTimeSigMarker    	GetTrackNumMediaItems    	SetEditCurPos2    	TrackFX_SetOpen    
format_timestr    	GetTrackNumSends    	SetEnvelopePoint    	TrackFX_SetParam    
format_timestr_len    	GetTrackReceiveName    	SetEnvelopePointEx    	TrackFX_SetParamNormalized    
format_timestr_pos    	GetTrackReceiveUIMute    	SetEnvelopeStateChunk    	TrackFX_SetPinMappings    
genGuid    	GetTrackReceiveUIVolPan    	SetExtState    	TrackFX_SetPreset    
get_config_var_string    	GetTrackSendInfo_Value    	SetGlobalAutomationOverride    	TrackFX_SetPresetByIndex    
get_ini_file    	GetTrackSendName    	SetItemStateChunk    	TrackFX_Show    
GetActionShortcutDesc    	GetTrackSendUIMute    	SetMasterTrackVisibility    	TrackList_AdjustWindows    
GetActiveTake    	GetTrackSendUIVolPan    	SetMediaItemInfo_Value    	TrackList_UpdateAllExternalSurfaces    
GetAllProjectPlayStates    	GetTrackState    	SetMediaItemLength    	Undo_BeginBlock    
GetAppVersion    	GetTrackStateChunk    	SetMediaItemPosition    	Undo_BeginBlock2    
GetArmedCommand    	GetTrackUIMute    	SetMediaItemSelected    	Undo_CanRedo2    
GetAudioAccessorEndTime    	GetTrackUIPan    	SetMediaItemTake_Source    	Undo_CanUndo2    
GetAudioAccessorHash    	GetTrackUIVolPan    	SetMediaItemTakeInfo_Value    	Undo_DoRedo2    
GetAudioAccessorSamples    	GetUnderrunTime    	SetMediaTrackInfo_Value    	Undo_DoUndo2    
GetAudioAccessorStartTime    	GetUserFileNameForRead    	SetMIDIEditorGrid    	Undo_EndBlock    
GetAudioDeviceInfo    	GetUserInputs    	SetMixerScroll    	Undo_EndBlock2    
GetConfigWantsDock    	GoToMarker    	SetMouseModifier    	Undo_OnStateChange    
GetCurrentProjectInLoadSave    	GoToRegion    	SetOnlyTrackSelected    	Undo_OnStateChange2    
GetCursorContext    	GR_SelectColor    	SetProjectGrid    	Undo_OnStateChange_Item    
GetCursorContext2    	GSC_mainwnd    	SetProjectMarker    	Undo_OnStateChangeEx    
GetCursorPosition    	guidToString    	SetProjectMarker2    	Undo_OnStateChangeEx2    
GetCursorPositionEx    	HasExtState    	SetProjectMarker3    	UpdateArrange    
GetDisplayedMediaItemColor    	HasTrackMIDIPrograms    	SetProjectMarker4    	UpdateItemInProject    
GetDisplayedMediaItemColor2    	HasTrackMIDIProgramsEx    	SetProjectMarkerByIndex    	UpdateTimeline    
GetEnvelopeInfo_Value    	Help_Set    	SetProjectMarkerByIndex2    	ValidatePtr    
GetEnvelopeName    	image_resolve_fn    	SetProjExtState    	ValidatePtr2    
GetEnvelopePoint    	InsertAutomationItem    	SetRegionRenderMatrix    	ViewPrefs    
GetEnvelopePointByTime    	InsertEnvelopePoint    	SetTakeMarker    	
GetEnvelopePointByTimeEx    	InsertEnvelopePointEx    	SetTakeStretchMarker    	
Third-party API Function List (functions added by plug-in extensions, such as the SWS extension)
BR_EnvAlloc    	ImGui_ConfigVar_MouseDragThreshold    	ImGui_Key_KeypadAdd    	ImGui_TextFilter_Clear    
BR_EnvCountPoints    	ImGui_ConfigVar_ViewportsNoDecoration    	ImGui_Key_KeypadDecimal    	ImGui_TextFilter_Draw    
BR_EnvDeletePoint    	ImGui_ConfigVar_WindowsMoveFromTitleBarOnly    	ImGui_Key_KeypadDivide    	ImGui_TextFilter_Get    
BR_EnvFind    	ImGui_ConfigVar_WindowsResizeFromEdges    	ImGui_Key_KeypadEnter    	ImGui_TextFilter_IsActive    
BR_EnvFindNext    	ImGui_CreateContext    	ImGui_Key_KeypadEqual    	ImGui_TextFilter_PassFilter    
BR_EnvFindPrevious    	ImGui_CreateDrawListSplitter    	ImGui_Key_KeypadMultiply    	ImGui_TextFilter_Set    
BR_EnvFree    	ImGui_CreateFont    	ImGui_Key_KeypadSubtract    	ImGui_TextWrapped    
BR_EnvGetParentTake    	ImGui_CreateFunctionFromEEL    	ImGui_Key_L    	ImGui_TreeNode    
BR_EnvGetParentTrack    	ImGui_CreateImage    	ImGui_Key_LeftAlt    	ImGui_TreeNodeEx    
BR_EnvGetPoint    	ImGui_CreateImageFromMem    	ImGui_Key_LeftArrow    	ImGui_TreeNodeFlags_AllowItemOverlap    
BR_EnvGetProperties    	ImGui_CreateImageSet    	ImGui_Key_LeftBracket    	ImGui_TreeNodeFlags_Bullet    
BR_EnvSetPoint    	ImGui_CreateListClipper    	ImGui_Key_LeftCtrl    	ImGui_TreeNodeFlags_CollapsingHeader    
BR_EnvSetProperties    	ImGui_CreateTextFilter    	ImGui_Key_LeftShift    	ImGui_TreeNodeFlags_DefaultOpen    
BR_EnvSortPoints    	ImGui_DebugTextEncoding    	ImGui_Key_LeftSuper    	ImGui_TreeNodeFlags_FramePadding    
BR_EnvValueAtPos    	ImGui_DestroyContext    	ImGui_Key_M    	ImGui_TreeNodeFlags_Framed    
BR_GetArrangeView    	ImGui_Detach    	ImGui_Key_Menu    	ImGui_TreeNodeFlags_Leaf    
BR_GetClosestGridDivision    	ImGui_Dir_Down    	ImGui_Key_Minus    	ImGui_TreeNodeFlags_NoAutoOpenOnLog    
BR_GetCurrentTheme    	ImGui_Dir_Left    	ImGui_Key_MouseLeft    	ImGui_TreeNodeFlags_NoTreePushOnOpen    
BR_GetMediaItemByGUID    	ImGui_Dir_None    	ImGui_Key_MouseMiddle    	ImGui_TreeNodeFlags_None    
BR_GetMediaItemGUID    	ImGui_Dir_Right    	ImGui_Key_MouseRight    	ImGui_TreeNodeFlags_OpenOnArrow    
BR_GetMediaItemImageResource    	ImGui_Dir_Up    	ImGui_Key_MouseWheelX    	ImGui_TreeNodeFlags_OpenOnDoubleClick    
BR_GetMediaItemTakeGUID    	ImGui_DragDouble    	ImGui_Key_MouseWheelY    	ImGui_TreeNodeFlags_Selected    
BR_GetMediaSourceProperties    	ImGui_DragDouble2    	ImGui_Key_MouseX1    	ImGui_TreeNodeFlags_SpanAvailWidth    
BR_GetMediaTrackByGUID    	ImGui_DragDouble3    	ImGui_Key_MouseX2    	ImGui_TreeNodeFlags_SpanFullWidth    
BR_GetMediaTrackFreezeCount    	ImGui_DragDouble4    	ImGui_Key_N    	ImGui_TreePop    
BR_GetMediaTrackGUID    	ImGui_DragDoubleN    	ImGui_Key_NumLock    	ImGui_TreePush    
BR_GetMediaTrackLayouts    	ImGui_DragDropFlags_AcceptBeforeDelivery    	ImGui_Key_O    	ImGui_Unindent    
BR_GetMediaTrackSendInfo_Envelope    	ImGui_DragDropFlags_AcceptNoDrawDefaultRect    	ImGui_Key_P    	ImGui_VSliderDouble    
BR_GetMediaTrackSendInfo_Track    	ImGui_DragDropFlags_AcceptNoPreviewTooltip    	ImGui_Key_PageDown    	ImGui_VSliderInt    
BR_GetMidiSourceLenPPQ    	ImGui_DragDropFlags_AcceptPeekOnly    	ImGui_Key_PageUp    	ImGui_ValidatePtr    
BR_GetMidiTakePoolGUID    	ImGui_DragDropFlags_None    	ImGui_Key_Pause    	ImGui_Viewport_GetCenter    
BR_GetMidiTakeTempoInfo    	ImGui_DragDropFlags_SourceAllowNullID    	ImGui_Key_Period    	ImGui_Viewport_GetPos    
BR_GetMouseCursorContext    	ImGui_DragDropFlags_SourceAutoExpirePayload    	ImGui_Key_PrintScreen    	ImGui_Viewport_GetSize    
BR_GetMouseCursorContext_Envelope    	ImGui_DragDropFlags_SourceExtern    	ImGui_Key_Q    	ImGui_Viewport_GetWorkCenter    
BR_GetMouseCursorContext_Item    	ImGui_DragDropFlags_SourceNoDisableHover    	ImGui_Key_R    	ImGui_Viewport_GetWorkPos    
BR_GetMouseCursorContext_MIDI    	ImGui_DragDropFlags_SourceNoHoldToOpenOthers    	ImGui_Key_RightAlt    	ImGui_Viewport_GetWorkSize    
BR_GetMouseCursorContext_Position    	ImGui_DragDropFlags_SourceNoPreviewTooltip    	ImGui_Key_RightArrow    	ImGui_WindowFlags_AlwaysAutoResize    
BR_GetMouseCursorContext_StretchMarker    	ImGui_DragFloatRange2    	ImGui_Key_RightBracket    	ImGui_WindowFlags_AlwaysHorizontalScrollbar    
BR_GetMouseCursorContext_Take    	ImGui_DragInt    	ImGui_Key_RightCtrl    	ImGui_WindowFlags_AlwaysUseWindowPadding    
BR_GetMouseCursorContext_Track    	ImGui_DragInt2    	ImGui_Key_RightShift    	ImGui_WindowFlags_AlwaysVerticalScrollbar    
BR_GetNextGridDivision    	ImGui_DragInt3    	ImGui_Key_RightSuper    	ImGui_WindowFlags_HorizontalScrollbar    
BR_GetPrevGridDivision    	ImGui_DragInt4    	ImGui_Key_S    	ImGui_WindowFlags_MenuBar    
BR_GetSetTrackSendInfo    	ImGui_DragIntRange2    	ImGui_Key_ScrollLock    	ImGui_WindowFlags_NoBackground    
BR_GetTakeFXCount    	ImGui_DrawFlags_Closed    	ImGui_Key_Semicolon    	ImGui_WindowFlags_NoCollapse    
BR_IsMidiOpenInInlineEditor    	ImGui_DrawFlags_None    	ImGui_Key_Slash    	ImGui_WindowFlags_NoDecoration    
BR_IsTakeMidi    	ImGui_DrawFlags_RoundCornersAll    	ImGui_Key_Space    	ImGui_WindowFlags_NoDocking    
BR_ItemAtMouseCursor    	ImGui_DrawFlags_RoundCornersBottom    	ImGui_Key_T    	ImGui_WindowFlags_NoFocusOnAppearing    
BR_MIDI_CCLaneRemove    	ImGui_DrawFlags_RoundCornersBottomLeft    	ImGui_Key_Tab    	ImGui_WindowFlags_NoInputs    
BR_MIDI_CCLaneReplace    	ImGui_DrawFlags_RoundCornersBottomRight    	ImGui_Key_U    	ImGui_WindowFlags_NoMouseInputs    
BR_PositionAtMouseCursor    	ImGui_DrawFlags_RoundCornersLeft    	ImGui_Key_UpArrow    	ImGui_WindowFlags_NoMove    
BR_SetArrangeView    	ImGui_DrawFlags_RoundCornersNone    	ImGui_Key_V    	ImGui_WindowFlags_NoNav    
BR_SetItemEdges    	ImGui_DrawFlags_RoundCornersRight    	ImGui_Key_W    	ImGui_WindowFlags_NoNavFocus    
BR_SetMediaItemImageResource    	ImGui_DrawFlags_RoundCornersTop    	ImGui_Key_X    	ImGui_WindowFlags_NoNavInputs    
BR_SetMediaSourceProperties    	ImGui_DrawFlags_RoundCornersTopLeft    	ImGui_Key_Y    	ImGui_WindowFlags_NoResize    
BR_SetMediaTrackLayouts    	ImGui_DrawFlags_RoundCornersTopRight    	ImGui_Key_Z    	ImGui_WindowFlags_NoSavedSettings    
BR_SetMidiTakeTempoInfo    	ImGui_DrawListSplitter_Clear    	ImGui_LabelText    	ImGui_WindowFlags_NoScrollWithMouse    
BR_SetTakeSourceFromFile    	ImGui_DrawListSplitter_Merge    	ImGui_ListBox    	ImGui_WindowFlags_NoScrollbar    
BR_SetTakeSourceFromFile2    	ImGui_DrawListSplitter_SetCurrentChannel    	ImGui_ListClipper_Begin    	ImGui_WindowFlags_NoTitleBar    
BR_TakeAtMouseCursor    	ImGui_DrawListSplitter_Split    	ImGui_ListClipper_End    	ImGui_WindowFlags_None    
BR_TrackAtMouseCursor    	ImGui_DrawList_AddBezierCubic    	ImGui_ListClipper_ForceDisplayRangeByIndices    	ImGui_WindowFlags_TopMost    
BR_TrackFX_GetFXModuleName    	ImGui_DrawList_AddBezierQuadratic    	ImGui_ListClipper_GetDisplayRange    	ImGui_WindowFlags_UnsavedDocument    
BR_Win32_CB_FindString    	ImGui_DrawList_AddCircle    	ImGui_ListClipper_Step    	JS_Actions_CountShortcuts    
BR_Win32_CB_FindStringExact    	ImGui_DrawList_AddCircleFilled    	ImGui_LogFinish    	JS_Actions_DeleteShortcut    
BR_Win32_ClientToScreen    	ImGui_DrawList_AddConvexPolyFilled    	ImGui_LogText    	JS_Actions_DoShortcutDialog    
BR_Win32_FindWindowEx    	ImGui_DrawList_AddImage    	ImGui_LogToClipboard    	JS_Actions_GetShortcutDesc    
BR_Win32_GET_X_LPARAM    	ImGui_DrawList_AddImageQuad    	ImGui_LogToFile    	JS_Byte    
BR_Win32_GET_Y_LPARAM    	ImGui_DrawList_AddImageRounded    	ImGui_LogToTTY    	JS_Composite    
BR_Win32_GetConstant    	ImGui_DrawList_AddLine    	ImGui_MenuItem    	JS_Composite_Delay    
BR_Win32_GetCursorPos    	ImGui_DrawList_AddNgon    	ImGui_Mod_Alt    	JS_Composite_ListBitmaps    
BR_Win32_GetFocus    	ImGui_DrawList_AddNgonFilled    	ImGui_Mod_Ctrl    	JS_Composite_Unlink    
BR_Win32_GetForegroundWindow    	ImGui_DrawList_AddPolyline    	ImGui_Mod_None    	JS_Dialog_BrowseForFolder    
BR_Win32_GetMainHwnd    	ImGui_DrawList_AddQuad    	ImGui_Mod_Shift    	JS_Dialog_BrowseForOpenFiles    
BR_Win32_GetMixerHwnd    	ImGui_DrawList_AddQuadFilled    	ImGui_Mod_Shortcut    	JS_Dialog_BrowseForSaveFile    
BR_Win32_GetMonitorRectFromRect    	ImGui_DrawList_AddRect    	ImGui_Mod_Super    	JS_Double    
BR_Win32_GetParent    	ImGui_DrawList_AddRectFilled    	ImGui_MouseButton_Left    	JS_File_Stat    
BR_Win32_GetPrivateProfileString    	ImGui_DrawList_AddRectFilledMultiColor    	ImGui_MouseButton_Middle    	JS_GDI_Blit    
BR_Win32_GetWindow    	ImGui_DrawList_AddText    	ImGui_MouseButton_Right    	JS_GDI_CreateFillBrush    
BR_Win32_GetWindowLong    	ImGui_DrawList_AddTextEx    	ImGui_MouseCursor_Arrow    	JS_GDI_CreateFont    
BR_Win32_GetWindowRect    	ImGui_DrawList_AddTriangle    	ImGui_MouseCursor_Hand    	JS_GDI_CreatePen    
BR_Win32_GetWindowText    	ImGui_DrawList_AddTriangleFilled    	ImGui_MouseCursor_None    	JS_GDI_DeleteObject    
BR_Win32_HIBYTE    	ImGui_DrawList_PathArcTo    	ImGui_MouseCursor_NotAllowed    	JS_GDI_DrawText    
BR_Win32_HIWORD    	ImGui_DrawList_PathArcToFast    	ImGui_MouseCursor_ResizeAll    	JS_GDI_FillEllipse    
BR_Win32_HwndToString    	ImGui_DrawList_PathBezierCubicCurveTo    	ImGui_MouseCursor_ResizeEW    	JS_GDI_FillPolygon    
BR_Win32_IsWindow    	ImGui_DrawList_PathBezierQuadraticCurveTo    	ImGui_MouseCursor_ResizeNESW    	JS_GDI_FillRect    
BR_Win32_IsWindowVisible    	ImGui_DrawList_PathClear    	ImGui_MouseCursor_ResizeNS    	JS_GDI_FillRoundRect    
BR_Win32_LOBYTE    	ImGui_DrawList_PathFillConvex    	ImGui_MouseCursor_ResizeNWSE    	JS_GDI_GetClientDC    
BR_Win32_LOWORD    	ImGui_DrawList_PathLineTo    	ImGui_MouseCursor_TextInput    	JS_GDI_GetScreenDC    
BR_Win32_MAKELONG    	ImGui_DrawList_PathRect    	ImGui_NewLine    	JS_GDI_GetSysColor    
BR_Win32_MAKELPARAM    	ImGui_DrawList_PathStroke    	ImGui_NumericLimits_Double    	JS_GDI_GetTextColor    
BR_Win32_MAKELRESULT    	ImGui_DrawList_PopClipRect    	ImGui_NumericLimits_Float    	JS_GDI_GetWindowDC    
BR_Win32_MAKEWORD    	ImGui_DrawList_PushClipRect    	ImGui_NumericLimits_Int    	JS_GDI_Line    
BR_Win32_MAKEWPARAM    	ImGui_DrawList_PushClipRectFullScreen    	ImGui_OpenPopup    	JS_GDI_Polyline    
BR_Win32_MIDIEditor_GetActive    	ImGui_Dummy    	ImGui_OpenPopupOnItemClick    	JS_GDI_ReleaseDC    
BR_Win32_ScreenToClient    	ImGui_End    	ImGui_PlotHistogram    	JS_GDI_SelectObject    
BR_Win32_SendMessage    	ImGui_EndChild    	ImGui_PlotLines    	JS_GDI_SetPixel    
BR_Win32_SetFocus    	ImGui_EndChildFrame    	ImGui_PointConvertNative    	JS_GDI_SetTextBkColor    
BR_Win32_SetForegroundWindow    	ImGui_EndCombo    	ImGui_PopButtonRepeat    	JS_GDI_SetTextBkMode    
BR_Win32_SetWindowLong    	ImGui_EndDisabled    	ImGui_PopClipRect    	JS_GDI_SetTextColor    
BR_Win32_SetWindowPos    	ImGui_EndDragDropSource    	ImGui_PopFont    	JS_GDI_StretchBlit    
BR_Win32_ShellExecute    	ImGui_EndDragDropTarget    	ImGui_PopID    	JS_Header_GetItemCount    
BR_Win32_ShowWindow    	ImGui_EndGroup    	ImGui_PopItemWidth    	JS_Int    
BR_Win32_StringToHwnd    	ImGui_EndListBox    	ImGui_PopStyleColor    	JS_LICE_AlterBitmapHSV    
BR_Win32_WindowFromPoint    	ImGui_EndMenu    	ImGui_PopStyleVar    	JS_LICE_AlterRectHSV    
BR_Win32_WritePrivateProfileString    	ImGui_EndMenuBar    	ImGui_PopTabStop    	JS_LICE_Arc    
Blink_GetBeatAtTime    	ImGui_EndPopup    	ImGui_PopTextWrapPos    	JS_LICE_ArrayAllBitmaps    
Blink_GetClockNow    	ImGui_EndTabBar    	ImGui_PopupFlags_AnyPopup    	JS_LICE_Bezier    
Blink_GetEnabled    	ImGui_EndTabItem    	ImGui_PopupFlags_AnyPopupId    	JS_LICE_Blit    
Blink_GetMaster    	ImGui_EndTable    	ImGui_PopupFlags_AnyPopupLevel    	JS_LICE_Circle    
Blink_GetNumPeers    	ImGui_EndTooltip    	ImGui_PopupFlags_MouseButtonLeft    	JS_LICE_Clear    
Blink_GetPhaseAtTime    	ImGui_FocusedFlags_AnyWindow    	ImGui_PopupFlags_MouseButtonMiddle    	JS_LICE_CreateBitmap    
Blink_GetPlaying    	ImGui_FocusedFlags_ChildWindows    	ImGui_PopupFlags_MouseButtonRight    	JS_LICE_CreateFont    
Blink_GetPuppet    	ImGui_FocusedFlags_DockHierarchy    	ImGui_PopupFlags_NoOpenOverExistingPopup    	JS_LICE_DestroyBitmap    
Blink_GetQuantum    	ImGui_FocusedFlags_NoPopupHierarchy    	ImGui_PopupFlags_NoOpenOverItems    	JS_LICE_DestroyFont    
Blink_GetStartStopSyncEnabled    	ImGui_FocusedFlags_None    	ImGui_PopupFlags_None    	JS_LICE_DrawChar    
Blink_GetTempo    	ImGui_FocusedFlags_RootAndChildWindows    	ImGui_ProgressBar    	JS_LICE_DrawText    
Blink_GetTimeAtBeat    	ImGui_FocusedFlags_RootWindow    	ImGui_PushButtonRepeat    	JS_LICE_FillCircle    
Blink_GetTimeForPlaying    	ImGui_FontFlags_Bold    	ImGui_PushClipRect    	JS_LICE_FillPolygon    
Blink_GetVersion    	ImGui_FontFlags_Italic    	ImGui_PushFont    	JS_LICE_FillRect    
Blink_SetBeatAtStartPlayingTimeRequest    	ImGui_FontFlags_None    	ImGui_PushID    	JS_LICE_FillTriangle    
Blink_SetBeatAtTimeForce    	ImGui_Function_Execute    	ImGui_PushItemWidth    	JS_LICE_GetDC    
Blink_SetBeatAtTimeRequest    	ImGui_Function_GetValue    	ImGui_PushStyleColor    	JS_LICE_GetHeight    
Blink_SetCaptureTransportCommands    	ImGui_Function_GetValue_Array    	ImGui_PushStyleVar    	JS_LICE_GetPixel    
Blink_SetEnabled    	ImGui_Function_GetValue_String    	ImGui_PushTabStop    	JS_LICE_GetWidth    
Blink_SetMaster    	ImGui_Function_SetValue    	ImGui_PushTextWrapPos    	JS_LICE_GradRect    
Blink_SetPlaying    	ImGui_Function_SetValue_Array    	ImGui_RadioButton    	JS_LICE_IsFlipped    
Blink_SetPlayingAndBeatAtTimeRequest    	ImGui_Function_SetValue_String    	ImGui_RadioButtonEx    	JS_LICE_Line    
Blink_SetPuppet    	ImGui_GetBackgroundDrawList    	ImGui_ResetMouseDragDelta    	JS_LICE_ListAllBitmaps    
Blink_SetQuantum    	ImGui_GetClipboardText    	ImGui_SameLine    	JS_LICE_LoadJPG    
Blink_SetStartStopSyncEnabled    	ImGui_GetColor    	ImGui_Selectable    	JS_LICE_LoadJPGFromMemory    
Blink_SetTempo    	ImGui_GetColorEx    	ImGui_SelectableFlags_AllowDoubleClick    	JS_LICE_LoadPNG    
Blink_SetTempoAtTime    	ImGui_GetConfigVar    	ImGui_SelectableFlags_AllowItemOverlap    	JS_LICE_LoadPNGFromMemory    
Blink_StartStop    	ImGui_GetContentRegionAvail    	ImGui_SelectableFlags_Disabled    	JS_LICE_MeasureText    
CF_EnumMediaSourceCues    	ImGui_GetContentRegionMax    	ImGui_SelectableFlags_DontClosePopups    	JS_LICE_ProcessRect    
CF_EnumSelectedFX    	ImGui_GetCursorPos    	ImGui_SelectableFlags_None    	JS_LICE_PutPixel    
CF_EnumerateActions    	ImGui_GetCursorPosX    	ImGui_SelectableFlags_SpanAllColumns    	JS_LICE_Resize    
CF_ExportMediaSource    	ImGui_GetCursorPosY    	ImGui_Separator    	JS_LICE_RotatedBlit    
CF_GetClipboard    	ImGui_GetCursorScreenPos    	ImGui_SeparatorText    	JS_LICE_RoundRect    
CF_GetClipboardBig    	ImGui_GetCursorStartPos    	ImGui_SetClipboardText    	JS_LICE_ScaledBlit    
CF_GetCommandText    	ImGui_GetDeltaTime    	ImGui_SetColorEditOptions    	JS_LICE_SetAlphaFromColorMask    
CF_GetFocusedFXChain    	ImGui_GetDragDropPayload    	ImGui_SetConfigVar    	JS_LICE_SetFontBkColor    
CF_GetMediaSourceBitDepth    	ImGui_GetDragDropPayloadFile    	ImGui_SetCursorPos    	JS_LICE_SetFontColor    
CF_GetMediaSourceMetadata    	ImGui_GetFont    	ImGui_SetCursorPosX    	JS_LICE_SetFontFXColor    
CF_GetMediaSourceOnline    	ImGui_GetFontSize    	ImGui_SetCursorPosY    	JS_LICE_SetFontFromGDI    
CF_GetMediaSourceRPP    	ImGui_GetForegroundDrawList    	ImGui_SetCursorScreenPos    	JS_LICE_WriteJPG    
CF_GetSWSVersion    	ImGui_GetFrameCount    	ImGui_SetDragDropPayload    	JS_LICE_WritePNG    
CF_GetTakeFXChain    	ImGui_GetFrameHeight    	ImGui_SetItemAllowOverlap    	JS_ListView_EnsureVisible    
CF_GetTrackFXChain    	ImGui_GetFrameHeightWithSpacing    	ImGui_SetItemDefaultFocus    	JS_ListView_EnumSelItems    
CF_LocateInExplorer    	ImGui_GetFramerate    	ImGui_SetKeyboardFocusHere    	JS_ListView_GetFocusedItem    
CF_SelectTrackFX    	ImGui_GetInputQueueCharacter    	ImGui_SetMouseCursor    	JS_ListView_GetHeader    
CF_SetClipboard    	ImGui_GetItemRectMax    	ImGui_SetNextFrameWantCaptureKeyboard    	JS_ListView_GetItem    
CF_SetMediaSourceOnline    	ImGui_GetItemRectMin    	ImGui_SetNextItemOpen    	JS_ListView_GetItemCount    
CF_ShellExecute    	ImGui_GetItemRectSize    	ImGui_SetNextItemWidth    	JS_ListView_GetItemRect    
FNG_AddMidiNote    	ImGui_GetKeyDownDuration    	ImGui_SetNextWindowBgAlpha    	JS_ListView_GetItemState    
FNG_AllocMidiTake    	ImGui_GetKeyMods    	ImGui_SetNextWindowCollapsed    	JS_ListView_GetItemText    
FNG_CountMidiNotes    	ImGui_GetKeyPressedAmount    	ImGui_SetNextWindowContentSize    	JS_ListView_GetSelectedCount    
FNG_FreeMidiTake    	ImGui_GetMainViewport    	ImGui_SetNextWindowDockID    	JS_ListView_GetTopIndex    
FNG_GetMidiNote    	ImGui_GetMouseClickedCount    	ImGui_SetNextWindowFocus    	JS_ListView_HitTest    
FNG_GetMidiNoteIntProperty    	ImGui_GetMouseClickedPos    	ImGui_SetNextWindowPos    	JS_ListView_ListAllSelItems    
FNG_SetMidiNoteIntProperty    	ImGui_GetMouseCursor    	ImGui_SetNextWindowScroll    	JS_ListView_SetItemState    
Fab_Clear    	ImGui_GetMouseDelta    	ImGui_SetNextWindowSize    	JS_ListView_SetItemText    
Fab_Do    	ImGui_GetMouseDownDuration    	ImGui_SetNextWindowSizeConstraints    	JS_Localize    
Fab_Dump    	ImGui_GetMouseDragDelta    	ImGui_SetScrollFromPosX    	JS_MIDIEditor_ArrayAll    
Fab_Get    	ImGui_GetMousePos    	ImGui_SetScrollFromPosY    	JS_MIDIEditor_ListAll    
Fab_Map    	ImGui_GetMousePosOnOpeningCurrentPopup    	ImGui_SetScrollHereX    	JS_Mem_Alloc    
ImGui_AcceptDragDropPayload    	ImGui_GetMouseWheel    	ImGui_SetScrollHereY    	JS_Mem_Free    
ImGui_AcceptDragDropPayloadFiles    	ImGui_GetScrollMaxX    	ImGui_SetScrollX    	JS_Mem_FromString    
ImGui_AcceptDragDropPayloadRGB    	ImGui_GetScrollMaxY    	ImGui_SetScrollY    	JS_Mouse_GetCursor    
ImGui_AcceptDragDropPayloadRGBA    	ImGui_GetScrollX    	ImGui_SetTabItemClosed    	JS_Mouse_GetState    
ImGui_AlignTextToFramePadding    	ImGui_GetScrollY    	ImGui_SetTooltip    	JS_Mouse_LoadCursor    
ImGui_ArrowButton    	ImGui_GetStyleColor    	ImGui_SetWindowCollapsed    	JS_Mouse_LoadCursorFromFile    
ImGui_Attach    	ImGui_GetStyleVar    	ImGui_SetWindowCollapsedEx    	JS_Mouse_SetCursor    
ImGui_Begin    	ImGui_GetTextLineHeight    	ImGui_SetWindowFocus    	JS_Mouse_SetPosition    
ImGui_BeginChild    	ImGui_GetTextLineHeightWithSpacing    	ImGui_SetWindowFocusEx    	JS_ReaScriptAPI_Version    
ImGui_BeginChildFrame    	ImGui_GetTime    	ImGui_SetWindowPos    	JS_String    
ImGui_BeginCombo    	ImGui_GetTreeNodeToLabelSpacing    	ImGui_SetWindowPosEx    	JS_VKeys_GetDown    
ImGui_BeginDisabled    	ImGui_GetVersion    	ImGui_SetWindowSize    	JS_VKeys_GetState    
ImGui_BeginDragDropSource    	ImGui_GetWindowContentRegionMax    	ImGui_SetWindowSizeEx    	JS_VKeys_GetUp    
ImGui_BeginDragDropTarget    	ImGui_GetWindowContentRegionMin    	ImGui_ShowAboutWindow    	JS_VKeys_Intercept    
ImGui_BeginGroup    	ImGui_GetWindowDockID    	ImGui_ShowDebugLogWindow    	JS_WindowMessage_Intercept    
ImGui_BeginListBox    	ImGui_GetWindowDpiScale    	ImGui_ShowMetricsWindow    	JS_WindowMessage_InterceptList    
ImGui_BeginMenu    	ImGui_GetWindowDrawList    	ImGui_ShowStackToolWindow    	JS_WindowMessage_ListIntercepts    
ImGui_BeginMenuBar    	ImGui_GetWindowHeight    	ImGui_SliderAngle    	JS_WindowMessage_PassThrough    
ImGui_BeginPopup    	ImGui_GetWindowPos    	ImGui_SliderDouble    	JS_WindowMessage_Peek    
ImGui_BeginPopupContextItem    	ImGui_GetWindowSize    	ImGui_SliderDouble2    	JS_WindowMessage_Post    
ImGui_BeginPopupContextWindow    	ImGui_GetWindowViewport    	ImGui_SliderDouble3    	JS_WindowMessage_Release    
ImGui_BeginPopupModal    	ImGui_GetWindowWidth    	ImGui_SliderDouble4    	JS_WindowMessage_ReleaseAll    
ImGui_BeginTabBar    	ImGui_HoveredFlags_AllowWhenBlockedByActiveItem    	ImGui_SliderDoubleN    	JS_WindowMessage_ReleaseWindow    
ImGui_BeginTabItem    	ImGui_HoveredFlags_AllowWhenBlockedByPopup    	ImGui_SliderFlags_AlwaysClamp    	JS_WindowMessage_Send    
ImGui_BeginTable    	ImGui_HoveredFlags_AllowWhenDisabled    	ImGui_SliderFlags_Logarithmic    	JS_Window_AddressFromHandle    
ImGui_BeginTooltip    	ImGui_HoveredFlags_AllowWhenOverlapped    	ImGui_SliderFlags_NoInput    	JS_Window_ArrayAllChild    
ImGui_Bullet    	ImGui_HoveredFlags_AnyWindow    	ImGui_SliderFlags_NoRoundToFormat    	JS_Window_ArrayAllTop    
ImGui_BulletText    	ImGui_HoveredFlags_ChildWindows    	ImGui_SliderFlags_None    	JS_Window_ArrayFind    
ImGui_Button    	ImGui_HoveredFlags_DelayNormal    	ImGui_SliderInt    	JS_Window_AttachResizeGrip    
ImGui_ButtonFlags_MouseButtonLeft    	ImGui_HoveredFlags_DelayShort    	ImGui_SliderInt2    	JS_Window_AttachTopmostPin    
ImGui_ButtonFlags_MouseButtonMiddle    	ImGui_HoveredFlags_DockHierarchy    	ImGui_SliderInt3    	JS_Window_ClientToScreen    
ImGui_ButtonFlags_MouseButtonRight    	ImGui_HoveredFlags_NoNavOverride    	ImGui_SliderInt4    	JS_Window_Create    
ImGui_ButtonFlags_None    	ImGui_HoveredFlags_NoPopupHierarchy    	ImGui_SmallButton    	JS_Window_Destroy    
ImGui_CalcItemWidth    	ImGui_HoveredFlags_NoSharedDelay    	ImGui_SortDirection_Ascending    	JS_Window_Enable    
ImGui_CalcTextSize    	ImGui_HoveredFlags_None    	ImGui_SortDirection_Descending    	JS_Window_EnableMetal    
ImGui_Checkbox    	ImGui_HoveredFlags_RectOnly    	ImGui_SortDirection_None    	JS_Window_Find    
ImGui_CheckboxFlags    	ImGui_HoveredFlags_RootAndChildWindows    	ImGui_Spacing    	JS_Window_FindChild    
ImGui_CloseCurrentPopup    	ImGui_HoveredFlags_RootWindow    	ImGui_StyleVar_Alpha    	JS_Window_FindChildByID    
ImGui_Col_Border    	ImGui_Image    	ImGui_StyleVar_ButtonTextAlign    	JS_Window_FindEx    
ImGui_Col_BorderShadow    	ImGui_ImageButton    	ImGui_StyleVar_CellPadding    	JS_Window_FindTop    
ImGui_Col_Button    	ImGui_ImageSet_Add    	ImGui_StyleVar_ChildBorderSize    	JS_Window_FromPoint    
ImGui_Col_ButtonActive    	ImGui_Image_GetSize    	ImGui_StyleVar_ChildRounding    	JS_Window_GetClassName    
ImGui_Col_ButtonHovered    	ImGui_Indent    	ImGui_StyleVar_DisabledAlpha    	JS_Window_GetClientRect    
ImGui_Col_CheckMark    	ImGui_InputDouble    	ImGui_StyleVar_FrameBorderSize    	JS_Window_GetClientSize    
ImGui_Col_ChildBg    	ImGui_InputDouble2    	ImGui_StyleVar_FramePadding    	JS_Window_GetFocus    
ImGui_Col_DockingEmptyBg    	ImGui_InputDouble3    	ImGui_StyleVar_FrameRounding    	JS_Window_GetForeground    
ImGui_Col_DockingPreview    	ImGui_InputDouble4    	ImGui_StyleVar_GrabMinSize    	JS_Window_GetLong    
ImGui_Col_DragDropTarget    	ImGui_InputDoubleN    	ImGui_StyleVar_GrabRounding    	JS_Window_GetLongPtr    
ImGui_Col_FrameBg    	ImGui_InputInt    	ImGui_StyleVar_IndentSpacing    	JS_Window_GetParent    
ImGui_Col_FrameBgActive    	ImGui_InputInt2    	ImGui_StyleVar_ItemInnerSpacing    	JS_Window_GetRect    
ImGui_Col_FrameBgHovered    	ImGui_InputInt3    	ImGui_StyleVar_ItemSpacing    	JS_Window_GetRelated    
ImGui_Col_Header    	ImGui_InputInt4    	ImGui_StyleVar_PopupBorderSize    	JS_Window_GetScrollInfo    
ImGui_Col_HeaderActive    	ImGui_InputText    	ImGui_StyleVar_PopupRounding    	JS_Window_GetTitle    
ImGui_Col_HeaderHovered    	ImGui_InputTextFlags_AllowTabInput    	ImGui_StyleVar_ScrollbarRounding    	JS_Window_GetViewportFromRect    
ImGui_Col_MenuBarBg    	ImGui_InputTextFlags_AlwaysOverwrite    	ImGui_StyleVar_ScrollbarSize    	JS_Window_HandleFromAddress    
ImGui_Col_ModalWindowDimBg    	ImGui_InputTextFlags_AutoSelectAll    	ImGui_StyleVar_SelectableTextAlign    	JS_Window_InvalidateRect    
ImGui_Col_NavHighlight    	ImGui_InputTextFlags_CallbackAlways    	ImGui_StyleVar_SeparatorTextAlign    	JS_Window_IsChild    
ImGui_Col_NavWindowingDimBg    	ImGui_InputTextFlags_CallbackCharFilter    	ImGui_StyleVar_SeparatorTextBorderSize    	JS_Window_IsVisible    
ImGui_Col_NavWindowingHighlight    	ImGui_InputTextFlags_CallbackCompletion    	ImGui_StyleVar_SeparatorTextPadding    	JS_Window_IsWindow    
ImGui_Col_PlotHistogram    	ImGui_InputTextFlags_CallbackEdit    	ImGui_StyleVar_TabRounding    	JS_Window_ListAllChild    
ImGui_Col_PlotHistogramHovered    	ImGui_InputTextFlags_CallbackHistory    	ImGui_StyleVar_WindowBorderSize    	JS_Window_ListAllTop    
ImGui_Col_PlotLines    	ImGui_InputTextFlags_CharsDecimal    	ImGui_StyleVar_WindowMinSize    	JS_Window_ListFind    
ImGui_Col_PlotLinesHovered    	ImGui_InputTextFlags_CharsHexadecimal    	ImGui_StyleVar_WindowPadding    	JS_Window_MonitorFromRect    
ImGui_Col_PopupBg    	ImGui_InputTextFlags_CharsNoBlank    	ImGui_StyleVar_WindowRounding    	JS_Window_Move    
ImGui_Col_ResizeGrip    	ImGui_InputTextFlags_CharsScientific    	ImGui_StyleVar_WindowTitleAlign    	JS_Window_OnCommand    
ImGui_Col_ResizeGripActive    	ImGui_InputTextFlags_CharsUppercase    	ImGui_TabBarFlags_AutoSelectNewTabs    	JS_Window_Resize    
ImGui_Col_ResizeGripHovered    	ImGui_InputTextFlags_CtrlEnterForNewLine    	ImGui_TabBarFlags_FittingPolicyResizeDown    	JS_Window_ScreenToClient    
ImGui_Col_ScrollbarBg    	ImGui_InputTextFlags_EnterReturnsTrue    	ImGui_TabBarFlags_FittingPolicyScroll    	JS_Window_SetFocus    
ImGui_Col_ScrollbarGrab    	ImGui_InputTextFlags_EscapeClearsAll    	ImGui_TabBarFlags_NoCloseWithMiddleMouseButton    	JS_Window_SetForeground    
ImGui_Col_ScrollbarGrabActive    	ImGui_InputTextFlags_NoHorizontalScroll    	ImGui_TabBarFlags_NoTabListScrollingButtons    	JS_Window_SetLong    
ImGui_Col_ScrollbarGrabHovered    	ImGui_InputTextFlags_NoUndoRedo    	ImGui_TabBarFlags_NoTooltip    	JS_Window_SetOpacity    
ImGui_Col_Separator    	ImGui_InputTextFlags_None    	ImGui_TabBarFlags_None    	JS_Window_SetParent    
ImGui_Col_SeparatorActive    	ImGui_InputTextFlags_Password    	ImGui_TabBarFlags_Reorderable    	JS_Window_SetPosition    
ImGui_Col_SeparatorHovered    	ImGui_InputTextFlags_ReadOnly    	ImGui_TabBarFlags_TabListPopupButton    	JS_Window_SetScrollPos    
ImGui_Col_SliderGrab    	ImGui_InputTextMultiline    	ImGui_TabItemButton    	JS_Window_SetStyle    
ImGui_Col_SliderGrabActive    	ImGui_InputTextWithHint    	ImGui_TabItemFlags_Leading    	JS_Window_SetTitle    
ImGui_Col_Tab    	ImGui_InvisibleButton    	ImGui_TabItemFlags_NoCloseWithMiddleMouseButton    	JS_Window_SetZOrder    
ImGui_Col_TabActive    	ImGui_IsAnyItemActive    	ImGui_TabItemFlags_NoPushId    	JS_Window_Show    
ImGui_Col_TabHovered    	ImGui_IsAnyItemFocused    	ImGui_TabItemFlags_NoReorder    	JS_Window_Update    
ImGui_Col_TabUnfocused    	ImGui_IsAnyItemHovered    	ImGui_TabItemFlags_NoTooltip    	JS_Zip_Close    
ImGui_Col_TabUnfocusedActive    	ImGui_IsAnyMouseDown    	ImGui_TabItemFlags_None    	JS_Zip_CountEntries    
ImGui_Col_TableBorderLight    	ImGui_IsItemActivated    	ImGui_TabItemFlags_SetSelected    	JS_Zip_DeleteEntries    
ImGui_Col_TableBorderStrong    	ImGui_IsItemActive    	ImGui_TabItemFlags_Trailing    	JS_Zip_Entry_Close    
ImGui_Col_TableHeaderBg    	ImGui_IsItemClicked    	ImGui_TabItemFlags_UnsavedDocument    	JS_Zip_Entry_CompressFile    
ImGui_Col_TableRowBg    	ImGui_IsItemDeactivated    	ImGui_TableBgTarget_CellBg    	JS_Zip_Entry_CompressMemory    
ImGui_Col_TableRowBgAlt    	ImGui_IsItemDeactivatedAfterEdit    	ImGui_TableBgTarget_None    	JS_Zip_Entry_ExtractToFile    
ImGui_Col_Text    	ImGui_IsItemEdited    	ImGui_TableBgTarget_RowBg0    	JS_Zip_Entry_ExtractToMemory    
ImGui_Col_TextDisabled    	ImGui_IsItemFocused    	ImGui_TableBgTarget_RowBg1    	JS_Zip_Entry_Info    
ImGui_Col_TextSelectedBg    	ImGui_IsItemHovered    	ImGui_TableColumnFlags_DefaultHide    	JS_Zip_Entry_OpenByIndex    
ImGui_Col_TitleBg    	ImGui_IsItemToggledOpen    	ImGui_TableColumnFlags_DefaultSort    	JS_Zip_Entry_OpenByName    
ImGui_Col_TitleBgActive    	ImGui_IsItemVisible    	ImGui_TableColumnFlags_Disabled    	JS_Zip_ErrorString    
ImGui_Col_TitleBgCollapsed    	ImGui_IsKeyDown    	ImGui_TableColumnFlags_IndentDisable    	JS_Zip_Extract    
ImGui_Col_WindowBg    	ImGui_IsKeyPressed    	ImGui_TableColumnFlags_IndentEnable    	JS_Zip_ListAllEntries    
ImGui_CollapsingHeader    	ImGui_IsKeyReleased    	ImGui_TableColumnFlags_IsEnabled    	JS_Zip_Open    
ImGui_ColorButton    	ImGui_IsMouseClicked    	ImGui_TableColumnFlags_IsHovered    	Llm_Do    
ImGui_ColorConvertDouble4ToU32    	ImGui_IsMouseDoubleClicked    	ImGui_TableColumnFlags_IsSorted    	Llm_Get    
ImGui_ColorConvertHSVtoRGB    	ImGui_IsMouseDown    	ImGui_TableColumnFlags_IsVisible    	Llm_Set    
ImGui_ColorConvertNative    	ImGui_IsMouseDragging    	ImGui_TableColumnFlags_NoClip    	NF_AnalyzeMediaItemPeakAndRMS    
ImGui_ColorConvertRGBtoHSV    	ImGui_IsMouseHoveringRect    	ImGui_TableColumnFlags_NoHeaderLabel    	NF_AnalyzeTakeLoudness    
ImGui_ColorConvertU32ToDouble4    	ImGui_IsMousePosValid    	ImGui_TableColumnFlags_NoHeaderWidth    	NF_AnalyzeTakeLoudness2    
ImGui_ColorEdit3    	ImGui_IsMouseReleased    	ImGui_TableColumnFlags_NoHide    	NF_AnalyzeTakeLoudness_IntegratedOnly    
ImGui_ColorEdit4    	ImGui_IsPopupOpen    	ImGui_TableColumnFlags_NoReorder    	NF_GetMediaItemAverageRMS    
ImGui_ColorEditFlags_AlphaBar    	ImGui_IsRectVisible    	ImGui_TableColumnFlags_NoResize    	NF_GetMediaItemMaxPeak    
ImGui_ColorEditFlags_AlphaPreview    	ImGui_IsRectVisibleEx    	ImGui_TableColumnFlags_NoSort    	NF_GetMediaItemMaxPeakAndMaxPeakPos    
ImGui_ColorEditFlags_AlphaPreviewHalf    	ImGui_IsWindowAppearing    	ImGui_TableColumnFlags_NoSortAscending    	NF_GetMediaItemPeakRMS_NonWindowed    
ImGui_ColorEditFlags_DisplayHSV    	ImGui_IsWindowDocked    	ImGui_TableColumnFlags_NoSortDescending    	NF_GetMediaItemPeakRMS_Windowed    
ImGui_ColorEditFlags_DisplayHex    	ImGui_IsWindowFocused    	ImGui_TableColumnFlags_None    	NF_GetSWSMarkerRegionSub    
ImGui_ColorEditFlags_DisplayRGB    	ImGui_IsWindowHovered    	ImGui_TableColumnFlags_PreferSortAscending    	NF_GetSWSTrackNotes    
ImGui_ColorEditFlags_Float    	ImGui_Key_0    	ImGui_TableColumnFlags_PreferSortDescending    	NF_GetSWS_RMSoptions    
ImGui_ColorEditFlags_InputHSV    	ImGui_Key_1    	ImGui_TableColumnFlags_WidthFixed    	NF_SetSWSMarkerRegionSub    
ImGui_ColorEditFlags_InputRGB    	ImGui_Key_2    	ImGui_TableColumnFlags_WidthStretch    	NF_SetSWSTrackNotes    
ImGui_ColorEditFlags_NoAlpha    	ImGui_Key_3    	ImGui_TableFlags_Borders    	NF_SetSWS_RMSoptions    
ImGui_ColorEditFlags_NoBorder    	ImGui_Key_4    	ImGui_TableFlags_BordersH    	NF_TakeFX_GetFXModuleName    
ImGui_ColorEditFlags_NoDragDrop    	ImGui_Key_5    	ImGui_TableFlags_BordersInner    	NF_UpdateSWSMarkerRegionSubWindow    
ImGui_ColorEditFlags_NoInputs    	ImGui_Key_6    	ImGui_TableFlags_BordersInnerH    	NF_Win32_GetSystemMetrics    
ImGui_ColorEditFlags_NoLabel    	ImGui_Key_7    	ImGui_TableFlags_BordersInnerV    	ReaPack_AboutInstalledPackage    
ImGui_ColorEditFlags_NoOptions    	ImGui_Key_8    	ImGui_TableFlags_BordersOuter    	ReaPack_AboutRepository    
ImGui_ColorEditFlags_NoPicker    	ImGui_Key_9    	ImGui_TableFlags_BordersOuterH    	ReaPack_AddSetRepository    
ImGui_ColorEditFlags_NoSidePreview    	ImGui_Key_A    	ImGui_TableFlags_BordersOuterV    	ReaPack_BrowsePackages    
ImGui_ColorEditFlags_NoSmallPreview    	ImGui_Key_Apostrophe    	ImGui_TableFlags_BordersV    	ReaPack_CompareVersions    
ImGui_ColorEditFlags_NoTooltip    	ImGui_Key_B    	ImGui_TableFlags_ContextMenuInBody    	ReaPack_EnumOwnedFiles    
ImGui_ColorEditFlags_None    	ImGui_Key_Backslash    	ImGui_TableFlags_Hideable    	ReaPack_FreeEntry    
ImGui_ColorEditFlags_PickerHueBar    	ImGui_Key_Backspace    	ImGui_TableFlags_NoClip    	ReaPack_GetEntryInfo    
ImGui_ColorEditFlags_PickerHueWheel    	ImGui_Key_C    	ImGui_TableFlags_NoHostExtendX    	ReaPack_GetOwner    
ImGui_ColorEditFlags_Uint8    	ImGui_Key_CapsLock    	ImGui_TableFlags_NoHostExtendY    	ReaPack_GetRepositoryInfo    
ImGui_ColorPicker3    	ImGui_Key_Comma    	ImGui_TableFlags_NoKeepColumnsVisible    	ReaPack_ProcessQueue    
ImGui_ColorPicker4    	ImGui_Key_D    	ImGui_TableFlags_NoPadInnerX    	SNM_AddReceive    
ImGui_Combo    	ImGui_Key_Delete    	ImGui_TableFlags_NoPadOuterX    	SNM_AddTCPFXParm    
ImGui_ComboFlags_HeightLarge    	ImGui_Key_DownArrow    	ImGui_TableFlags_NoSavedSettings    	SNM_CreateFastString    
ImGui_ComboFlags_HeightLargest    	ImGui_Key_E    	ImGui_TableFlags_None    	SNM_DeleteFastString    
ImGui_ComboFlags_HeightRegular    	ImGui_Key_End    	ImGui_TableFlags_PadOuterX    	SNM_GetDoubleConfigVar    
ImGui_ComboFlags_HeightSmall    	ImGui_Key_Enter    	ImGui_TableFlags_PreciseWidths    	SNM_GetFastString    
ImGui_ComboFlags_NoArrowButton    	ImGui_Key_Equal    	ImGui_TableFlags_Reorderable    	SNM_GetFastStringLength    
ImGui_ComboFlags_NoPreview    	ImGui_Key_Escape    	ImGui_TableFlags_Resizable    	SNM_GetIntConfigVar    
ImGui_ComboFlags_None    	ImGui_Key_F    	ImGui_TableFlags_RowBg    	SNM_GetLongConfigVar    
ImGui_ComboFlags_PopupAlignLeft    	ImGui_Key_F1    	ImGui_TableFlags_ScrollX    	SNM_GetMediaItemTakeByGUID    
ImGui_Cond_Always    	ImGui_Key_F10    	ImGui_TableFlags_ScrollY    	SNM_GetProjectMarkerName    
ImGui_Cond_Appearing    	ImGui_Key_F11    	ImGui_TableFlags_SizingFixedFit    	SNM_GetSetObjectState    
ImGui_Cond_FirstUseEver    	ImGui_Key_F12    	ImGui_TableFlags_SizingFixedSame    	SNM_GetSetSourceState    
ImGui_Cond_Once    	ImGui_Key_F2    	ImGui_TableFlags_SizingStretchProp    	SNM_GetSetSourceState2    
ImGui_ConfigFlags_DockingEnable    	ImGui_Key_F3    	ImGui_TableFlags_SizingStretchSame    	SNM_GetSourceType    
ImGui_ConfigFlags_NavEnableKeyboard    	ImGui_Key_F4    	ImGui_TableFlags_SortMulti    	SNM_MoveOrRemoveTrackFX    
ImGui_ConfigFlags_NavEnableSetMousePos    	ImGui_Key_F5    	ImGui_TableFlags_SortTristate    	SNM_ReadMediaFileTag    
ImGui_ConfigFlags_NavNoCaptureKeyboard    	ImGui_Key_F6    	ImGui_TableFlags_Sortable    	SNM_RemoveReceive    
ImGui_ConfigFlags_NoMouse    	ImGui_Key_F7    	ImGui_TableGetColumnCount    	SNM_RemoveReceivesFrom    
ImGui_ConfigFlags_NoMouseCursorChange    	ImGui_Key_F8    	ImGui_TableGetColumnFlags    	SNM_SelectResourceBookmark    
ImGui_ConfigFlags_NoSavedSettings    	ImGui_Key_F9    	ImGui_TableGetColumnIndex    	SNM_SetDoubleConfigVar    
ImGui_ConfigFlags_None    	ImGui_Key_G    	ImGui_TableGetColumnName    	SNM_SetFastString    
ImGui_ConfigVar_DebugBeginReturnValueLoop    	ImGui_Key_GraveAccent    	ImGui_TableGetColumnSortSpecs    	SNM_SetIntConfigVar    
ImGui_ConfigVar_DebugBeginReturnValueOnce    	ImGui_Key_H    	ImGui_TableGetRowIndex    	SNM_SetLongConfigVar    
ImGui_ConfigVar_DockingNoSplit    	ImGui_Key_Home    	ImGui_TableHeader    	SNM_SetProjectMarker    
ImGui_ConfigVar_DockingTransparentPayload    	ImGui_Key_I    	ImGui_TableHeadersRow    	SNM_TagMediaFile    
ImGui_ConfigVar_DockingWithShift    	ImGui_Key_Insert    	ImGui_TableNeedSort    	SNM_TieResourceSlotActions    
ImGui_ConfigVar_DragClickToInputText    	ImGui_Key_J    	ImGui_TableNextColumn    	SN_FocusMIDIEditor    
ImGui_ConfigVar_Flags    	ImGui_Key_K    	ImGui_TableNextRow    	ULT_GetMediaItemNote    
ImGui_ConfigVar_HoverDelayNormal    	ImGui_Key_Keypad0    	ImGui_TableRowFlags_Headers    	ULT_SetMediaItemNote    
ImGui_ConfigVar_HoverDelayShort    	ImGui_Key_Keypad1    	ImGui_TableRowFlags_None    	Xen_AudioWriter_Create    
ImGui_ConfigVar_InputTextCursorBlink    	ImGui_Key_Keypad2    	ImGui_TableSetBgColor    	Xen_AudioWriter_Destroy    
ImGui_ConfigVar_InputTextEnterKeepActive    	ImGui_Key_Keypad3    	ImGui_TableSetColumnEnabled    	Xen_AudioWriter_Write    
ImGui_ConfigVar_InputTrickleEventQueue    	ImGui_Key_Keypad4    	ImGui_TableSetColumnIndex    	Xen_GetMediaSourceSamples    
ImGui_ConfigVar_KeyRepeatDelay    	ImGui_Key_Keypad5    	ImGui_TableSetupColumn    	Xen_StartSourcePreview    
ImGui_ConfigVar_KeyRepeatRate    	ImGui_Key_Keypad6    	ImGui_TableSetupScrollFreeze    	Xen_StopSourcePreview    
ImGui_ConfigVar_MacOSXBehaviors    	ImGui_Key_Keypad7    	ImGui_Text    	
ImGui_ConfigVar_MouseDoubleClickMaxDist    	ImGui_Key_Keypad8    	ImGui_TextColored    	
ImGui_ConfigVar_MouseDoubleClickTime    	ImGui_Key_Keypad9    	ImGui_TextDisabled    	



MediaItem reaper.AddMediaItemToTrack(MediaTrack tr)

creates a new media item.


integer reaper.AddProjectMarker(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx)

Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.


integer reaper.AddProjectMarker2(ReaProject proj, boolean isrgn, number pos, number rgnend, string name, integer wantidx, integer color)

Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000


integer reaper.AddRemoveReaScript(boolean add, integer sectionID, string scriptfn, boolean commit)

Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.


MediaItem_Take reaper.AddTakeToMediaItem(MediaItem item)

creates a new take in an item


boolean reaper.AddTempoTimeSigMarker(ReaProject proj, number timepos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempochange)

Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.


reaper.adjustZoom(number amt, integer forceset, boolean doupd, integer centermode)

forceset=0,doupd=true,centermode=-1 for default


boolean reaper.AnyTrackSolo(ReaProject proj)


boolean reaper.APIExists(string function_name)

Returns true if function_name exists in the REAPER API


reaper.APITest()

Displays a message window if the API was successfully called.


boolean reaper.ApplyNudge(ReaProject project, integer nudgeflag, integer nudgewhat, integer nudgeunits, number value, boolean reverse, integer copies)

nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections
value: amount to nudge by, or value to set to
reverse: in nudge mode, nudges left (otherwise ignored)
copies: in nudge duplicate mode, number of copies (otherwise ignored)


reaper.ArmCommand(integer cmd, string sectionname)

arms a command (or disarms if 0 passed) in section sectionname (empty string for main)


reaper.Audio_Init()

open all audio and MIDI devices, if not open


integer reaper.Audio_IsPreBuffer()

is in pre-buffer? threadsafe


integer reaper.Audio_IsRunning()

is audio running at all? threadsafe


reaper.Audio_Quit()

close all audio and MIDI devices, if open


boolean reaper.AudioAccessorStateChanged(AudioAccessor accessor)

Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.


reaper.AudioAccessorUpdate(AudioAccessor accessor)

Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.


boolean reaper.AudioAccessorValidateState(AudioAccessor accessor)

Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.


reaper.BypassFxAllTracks(integer bypass)

-1 = bypass all if not all bypassed,otherwise unbypass all


integer reaper.CalcMediaSrcLoudness(PCM_source mediasource)

Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String("RENDER_STATS") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.


number reaper.CalculateNormalization(PCM_source source, integer normalizeTo, number normalizeTarget, number normalizeStart, number normalizeEnd)

Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.


reaper.ClearAllRecArmed()


reaper.ClearConsole()

Clear the ReaScript console. See ShowConsoleMsg


reaper.ClearPeakCache()

resets the global peak caches


integer r, integer g, integer b = reaper.ColorFromNative(integer col)

Extract RGB values from an OS dependent color. See ColorToNative.


integer reaper.ColorToNative(integer r, integer g, integer b)

Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.


integer reaper.CountActionShortcuts(KbdSectionInfo section, integer cmdID)

Returns the number of shortcuts that exist for the given command ID.
see GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.


integer reaper.CountAutomationItems(TrackEnvelope env)

Returns the number of automation items on this envelope. See GetSetAutomationItemInfo


integer reaper.CountEnvelopePoints(TrackEnvelope envelope)

Returns the number of points in the envelope. See CountEnvelopePointsEx.


integer reaper.CountEnvelopePointsEx(TrackEnvelope envelope, integer autoitem_idx)

Returns the number of points in the envelope.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.


integer reaper.CountMediaItems(ReaProject proj)

count the number of items in the project (proj=0 for active project)


integer retval, integer num_markers, integer num_regions = reaper.CountProjectMarkers(ReaProject proj)

num_markersOut and num_regionsOut may be NULL.


integer reaper.CountSelectedMediaItems(ReaProject proj)

count the number of selected items in the project (proj=0 for active project)


integer reaper.CountSelectedTracks(ReaProject proj)

Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.


integer reaper.CountSelectedTracks2(ReaProject proj, boolean wantmaster)

Count the number of selected tracks in the project (proj=0 for active project).


integer reaper.CountTakeEnvelopes(MediaItem_Take take)

See GetTakeEnvelope


integer reaper.CountTakes(MediaItem item)

count the number of takes in the item


integer reaper.CountTCPFXParms(ReaProject project, MediaTrack track)

Count the number of FX parameter knobs displayed on the track control panel.


integer reaper.CountTempoTimeSigMarkers(ReaProject proj)

Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.


integer reaper.CountTrackEnvelopes(MediaTrack track)

see GetTrackEnvelope


integer reaper.CountTrackMediaItems(MediaTrack track)

count the number of items in the track


integer reaper.CountTracks(ReaProject proj)

count the number of tracks in the project (proj=0 for active project)


MediaItem reaper.CreateNewMIDIItemInProj(MediaTrack track, number starttime, number endtime, optional boolean qnIn)

Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.


AudioAccessor reaper.CreateTakeAudioAccessor(MediaItem_Take take)

Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.


AudioAccessor reaper.CreateTrackAudioAccessor(MediaTrack track)

Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.


integer reaper.CreateTrackSend(MediaTrack tr, MediaTrack desttrIn)

Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.


reaper.CSurf_FlushUndo(boolean force)

call this to force flushing of the undo states after using CSurf_On*Change()


boolean reaper.CSurf_GetTouchState(MediaTrack trackid, integer isPan)


reaper.CSurf_GoEnd()


reaper.CSurf_GoStart()


integer reaper.CSurf_NumTracks(boolean mcpView)


reaper.CSurf_OnArrow(integer whichdir, boolean wantzoom)


reaper.CSurf_OnFwd(integer seekplay)


boolean reaper.CSurf_OnFXChange(MediaTrack trackid, integer en)


integer reaper.CSurf_OnInputMonitorChange(MediaTrack trackid, integer monitor)


integer reaper.CSurf_OnInputMonitorChangeEx(MediaTrack trackid, integer monitor, boolean allowgang)


boolean reaper.CSurf_OnMuteChange(MediaTrack trackid, integer mute)


boolean reaper.CSurf_OnMuteChangeEx(MediaTrack trackid, integer mute, boolean allowgang)


number reaper.CSurf_OnPanChange(MediaTrack trackid, number pan, boolean relative)


number reaper.CSurf_OnPanChangeEx(MediaTrack trackid, number pan, boolean relative, boolean allowGang)


reaper.CSurf_OnPause()


reaper.CSurf_OnPlay()


reaper.CSurf_OnPlayRateChange(number playrate)


boolean reaper.CSurf_OnRecArmChange(MediaTrack trackid, integer recarm)


boolean reaper.CSurf_OnRecArmChangeEx(MediaTrack trackid, integer recarm, boolean allowgang)


reaper.CSurf_OnRecord()


number reaper.CSurf_OnRecvPanChange(MediaTrack trackid, integer recv_index, number pan, boolean relative)


number reaper.CSurf_OnRecvVolumeChange(MediaTrack trackid, integer recv_index, number volume, boolean relative)


reaper.CSurf_OnRew(integer seekplay)


reaper.CSurf_OnRewFwd(integer seekplay, integer dir)


reaper.CSurf_OnScroll(integer xdir, integer ydir)


boolean reaper.CSurf_OnSelectedChange(MediaTrack trackid, integer selected)


number reaper.CSurf_OnSendPanChange(MediaTrack trackid, integer send_index, number pan, boolean relative)


number reaper.CSurf_OnSendVolumeChange(MediaTrack trackid, integer send_index, number volume, boolean relative)


boolean reaper.CSurf_OnSoloChange(MediaTrack trackid, integer solo)


boolean reaper.CSurf_OnSoloChangeEx(MediaTrack trackid, integer solo, boolean allowgang)


reaper.CSurf_OnStop()


reaper.CSurf_OnTempoChange(number bpm)


reaper.CSurf_OnTrackSelection(MediaTrack trackid)


number reaper.CSurf_OnVolumeChange(MediaTrack trackid, number volume, boolean relative)


number reaper.CSurf_OnVolumeChangeEx(MediaTrack trackid, number volume, boolean relative, boolean allowGang)


number reaper.CSurf_OnWidthChange(MediaTrack trackid, number width, boolean relative)


number reaper.CSurf_OnWidthChangeEx(MediaTrack trackid, number width, boolean relative, boolean allowGang)


reaper.CSurf_OnZoom(integer xdir, integer ydir)


reaper.CSurf_ResetAllCachedVolPanStates()


reaper.CSurf_ScrubAmt(number amt)


reaper.CSurf_SetAutoMode(integer mode, IReaperControlSurface ignoresurf)


reaper.CSurf_SetPlayState(boolean play, boolean pause, boolean rec, IReaperControlSurface ignoresurf)


reaper.CSurf_SetRepeatState(boolean rep, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfaceMute(MediaTrack trackid, boolean mute, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfacePan(MediaTrack trackid, number pan, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfaceRecArm(MediaTrack trackid, boolean recarm, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfaceSelected(MediaTrack trackid, boolean selected, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfaceSolo(MediaTrack trackid, boolean solo, IReaperControlSurface ignoresurf)


reaper.CSurf_SetSurfaceVolume(MediaTrack trackid, number volume, IReaperControlSurface ignoresurf)


reaper.CSurf_SetTrackListChange()


MediaTrack reaper.CSurf_TrackFromID(integer idx, boolean mcpView)


integer reaper.CSurf_TrackToID(MediaTrack track, boolean mcpView)


number reaper.DB2SLIDER(number x)


boolean reaper.DeleteActionShortcut(KbdSectionInfo section, integer cmdID, integer shortcutidx)

Delete the specific shortcut for the given command ID.
See CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.


boolean reaper.DeleteEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)

Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.


boolean reaper.DeleteEnvelopePointRange(TrackEnvelope envelope, number time_start, number time_end)

Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.


boolean reaper.DeleteEnvelopePointRangeEx(TrackEnvelope envelope, integer autoitem_idx, number time_start, number time_end)

Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.


reaper.DeleteExtState(string section, string key, boolean persist)

Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.


boolean reaper.DeleteProjectMarker(ReaProject proj, integer markrgnindexnumber, boolean isrgn)

Delete a marker. proj==NULL for the active project.


boolean reaper.DeleteProjectMarkerByIndex(ReaProject proj, integer markrgnidx)

Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).


boolean reaper.DeleteTakeMarker(MediaItem_Take take, integer idx)

Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker


integer reaper.DeleteTakeStretchMarkers(MediaItem_Take take, integer idx, optional integer countIn)

Deletes one or more stretch markers. Returns number of stretch markers deleted.


boolean reaper.DeleteTempoTimeSigMarker(ReaProject project, integer markerindex)

Delete a tempo/time signature marker.


reaper.DeleteTrack(MediaTrack tr)

deletes a track


boolean reaper.DeleteTrackMediaItem(MediaTrack tr, MediaItem it)


reaper.DestroyAudioAccessor(AudioAccessor accessor)

Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.


boolean reaper.DoActionShortcutDialog(HWND hwnd, KbdSectionInfo section, integer cmdID, integer shortcutidx)

Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.
See CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.


reaper.Dock_UpdateDockID(string ident_str, integer whichDock)

updates preference for docker window ident_str to be in dock whichDock on next open


integer reaper.DockGetPosition(integer whichDock)

-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating


integer retval, boolean isFloatingDocker = reaper.DockIsChildOfDock(HWND hwnd)

returns dock index that contains hwnd, or -1


reaper.DockWindowActivate(HWND hwnd)


reaper.DockWindowAdd(HWND hwnd, string name, integer pos, boolean allowShow)


reaper.DockWindowAddEx(HWND hwnd, string name, string identstr, boolean allowShow)


reaper.DockWindowRefresh()


reaper.DockWindowRefreshForHWND(HWND hwnd)


reaper.DockWindowRemove(HWND hwnd)


boolean reaper.EditTempoTimeSigMarker(ReaProject project, integer markerindex)

Open the tempo/time signature marker editor dialog.


integerr.left, integerr.top, integerr.right, integerr.bot = reaper.EnsureNotCompletelyOffscreen(integerr.left, integerr.top, integerr.right, integerr.bot)

call with a saved window rect for your window and it'll correct any positioning info.


string reaper.EnumerateFiles(string path, integer fileindex)

List the files in the "path" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories


string reaper.EnumerateSubdirectories(string path, integer subdirindex)

List the subdirectories in the "path" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles


boolean retval, string str = reaper.EnumPitchShiftModes(integer mode)

Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported


string reaper.EnumPitchShiftSubModes(integer mode, integer submode)

Returns submode name, or NULL


integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers(integer idx)


integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber = reaper.EnumProjectMarkers2(ReaProject proj, integer idx)


integer retval, boolean isrgn, number pos, number rgnend, string name, integer markrgnindexnumber, integer color = reaper.EnumProjectMarkers3(ReaProject proj, integer idx)


ReaProject retval, optional string projfn = reaper.EnumProjects(integer idx)

idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.


boolean retval, optional string key, optional string val = reaper.EnumProjExtState(ReaProject proj, string extname, integer idx)

Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.


MediaTrack reaper.EnumRegionRenderMatrix(ReaProject proj, integer regionindex, integer rendertrack)

Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.


boolean retval, string programName = reaper.EnumTrackMIDIProgramNames(integer track, integer programNumber, string programName)

returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated


boolean retval, string programName = reaper.EnumTrackMIDIProgramNamesEx(ReaProject proj, MediaTrack track, integer programNumber, string programName)

returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated


integer retval, number value, number dVdS, number ddVdS, number dddVdS = reaper.Envelope_Evaluate(TrackEnvelope envelope, number time, number samplerate, integer samplesRequested)

Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.


string buf = reaper.Envelope_FormatValue(TrackEnvelope env, number value)

Formats the value of an envelope to a user-readable form


MediaItem_Take retval, integer index, integer index2 = reaper.Envelope_GetParentTake(TrackEnvelope env)

If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.


MediaTrack retval, integer index, integer index2 = reaper.Envelope_GetParentTrack(TrackEnvelope env)

If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.


boolean reaper.Envelope_SortPoints(TrackEnvelope envelope)

Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.


boolean reaper.Envelope_SortPointsEx(TrackEnvelope envelope, integer autoitem_idx)

Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.


string reaper.ExecProcess(string cmdline, integer timeoutmsec)

Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize


boolean reaper.file_exists(string path)

returns true if path points to a valid, readable file


integer reaper.FindTempoTimeSigMarker(ReaProject project, number time)

Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).


string buf = reaper.format_timestr(number tpos, string buf)

Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.


string buf = reaper.format_timestr_len(number tpos, string buf, number offset, integer modeoverride)

time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f
offset is start of where the length will be calculated from


string buf = reaper.format_timestr_pos(number tpos, string buf, integer modeoverride)

time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f



string gGUID = reaper.genGuid(string gGUID)


boolean retval, string buf = reaper.get_config_var_string(string name)

gets ini configuration variable value as string


string reaper.get_ini_file()

Get reaper.ini full filename.


boolean retval, string desc = reaper.GetActionShortcutDesc(KbdSectionInfo section, integer cmdID, integer shortcutidx)

Get the text description of a specific shortcut for the given command ID.
See CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.


MediaItem_Take reaper.GetActiveTake(MediaItem item)

get the active take in this item


integer reaper.GetAllProjectPlayStates(ReaProject ignoreProject)

returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)


string reaper.GetAppVersion()

Returns app version which may include an OS/arch signifier, such as: "6.17" (windows 32-bit), "6.17/x64" (windows 64-bit), "6.17/OSX64" (macOS 64-bit Intel), "6.17/OSX" (macOS 32-bit), "6.17/macOS-arm64", "6.17/linux-x86_64", "6.17/linux-i686", "6.17/linux-aarch64", "6.17/linux-armv7l", etc


integer retval, string sec = reaper.GetArmedCommand()

gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.


number reaper.GetAudioAccessorEndTime(AudioAccessor accessor)

Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.


string hashNeed128 = reaper.GetAudioAccessorHash(AudioAccessor accessor, string hashNeed128)

Deprecated. See AudioAccessorStateChanged instead.


integer reaper.GetAudioAccessorSamples(AudioAccessor accessor, integer samplerate, integer numchannels, number starttime_sec, integer numsamplesperchannel, reaper.array samplebuffer)

Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.

This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:

tr = RPR_GetTrack(0, 0)
aa = RPR_CreateTrackAudioAccessor(tr)
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
pos = 0.0
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
# buf now holds the first 2*1024 audio samples from the track.
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.



number reaper.GetAudioAccessorStartTime(AudioAccessor accessor)

Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.


boolean retval, string desc = reaper.GetAudioDeviceInfo(string attribute)

get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.


integer reaper.GetConfigWantsDock(string ident_str)

gets the dock ID desired by ident_str, if any


ReaProject reaper.GetCurrentProjectInLoadSave()

returns current project if in load/save (usually only used from project_config_extension_t)


integer reaper.GetCursorContext()

return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown


integer reaper.GetCursorContext2(boolean want_last_valid)

0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)


number reaper.GetCursorPosition()

edit cursor position


number reaper.GetCursorPositionEx(ReaProject proj)

edit cursor position


integer reaper.GetDisplayedMediaItemColor(MediaItem item)

see GetDisplayedMediaItemColor2.


integer reaper.GetDisplayedMediaItemColor2(MediaItem item, MediaItem_Take take)

Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means "no color", not black.


number reaper.GetEnvelopeInfo_Value(TrackEnvelope env, string parmname)

Gets an envelope numerical-value attribute:
I_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)
I_TCPH : int : visible height of envelope
I_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding
I_TCPH_USED : int : visible height of envelope, exclusive of padding
P_TRACK : MediaTrack * : parent track pointer (if any)
P_DESTTRACK : MediaTrack * : destination track pointer, if on a send
P_ITEM : MediaItem * : parent item pointer (if any)
P_TAKE : MediaItem_Take * : parent take pointer (if any)
I_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send
I_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output
I_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive



boolean retval, string buf = reaper.GetEnvelopeName(TrackEnvelope env)


boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePoint(TrackEnvelope envelope, integer ptidx)

Get the attributes of an envelope point. See GetEnvelopePointEx.


integer reaper.GetEnvelopePointByTime(TrackEnvelope envelope, number time)

Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.


integer reaper.GetEnvelopePointByTimeEx(TrackEnvelope envelope, integer autoitem_idx, number time)

Returns the envelope point at or immediately prior to the given time position.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.


boolean retval, number time, number value, integer shape, number tension, boolean selected = reaper.GetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx)

Get the attributes of an envelope point.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.


integer reaper.GetEnvelopeScalingMode(TrackEnvelope env)

Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.


boolean retval, string str = reaper.GetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)

Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.


integer reaper.GetEnvelopeUIState(TrackEnvelope env)

gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change


string reaper.GetExePath()

returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER


string reaper.GetExtState(string section, string key)

Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.


integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX()

This function is deprecated (returns GetFocusedFX2()&3), see GetFocusedFX2.


integer retval, integer tracknumber, integer itemnumber, integer fxnumber = reaper.GetFocusedFX2()

Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX.


integer reaper.GetFreeDiskSpaceForRecordPath(ReaProject proj, integer pathidx)

returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.


TrackEnvelope reaper.GetFXEnvelope(MediaTrack track, integer fxindex, integer parameterindex, boolean create)

Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.


integer reaper.GetGlobalAutomationOverride()

return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass


number reaper.GetHZoomLevel()

returns pixels/second


number reaper.GetInputActivityLevel(integer input_id)

returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices


string reaper.GetInputChannelName(integer channelIndex)


integer inputlatency, integer outputLatency = reaper.GetInputOutputLatency()

Gets the audio device input/output latency in samples


number, PCM_source which_item, integer flags = reaper.GetItemEditingTime2()

returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)


MediaItem, MediaItem_Take take = reaper.GetItemFromPoint(integer screen_x, integer screen_y, boolean allow_locked)

Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint.


ReaProject reaper.GetItemProjectContext(MediaItem item)


boolean retval, string str = reaper.GetItemStateChunk(MediaItem item, string str, boolean isundo)

Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.


string reaper.GetLastColorThemeFile()


integer markeridx, integer regionidx = reaper.GetLastMarkerAndCurRegion(ReaProject proj, number time)

Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.


boolean retval, integer tracknumber, integer fxnumber, integer paramnumber = reaper.GetLastTouchedFX()

Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number.


MediaTrack reaper.GetLastTouchedTrack()


HWND reaper.GetMainHwnd()


integer reaper.GetMasterMuteSoloFlags()

&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.


MediaTrack reaper.GetMasterTrack(ReaProject proj)


integer reaper.GetMasterTrackVisibility()

returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility.


integer reaper.GetMaxMidiInputs()

returns max dev for midi inputs/outputs


integer reaper.GetMaxMidiOutputs()


integer retval, string buf = reaper.GetMediaFileMetadata(PCM_source mediaSource, string identifier)

Get text-based metadata from a media file for a given identifier. Call with identifier="" to list all identifiers contained in the file, separated by newlines. May return "[Binary data]" for metadata that REAPER doesn't handle.


MediaItem reaper.GetMediaItem(ReaProject proj, integer itemidx)

get an item from a project by item count (zero-based) (proj=0 for active project)


MediaTrack reaper.GetMediaItem_Track(MediaItem item)

Get parent track of media item


number reaper.GetMediaItemInfo_Value(MediaItem item, string parmname)

Get media item numerical-value attributes.
B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
I_LASTH : int * : height in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)
P_TRACK : MediaTrack * : (read-only)



integer reaper.GetMediaItemNumTakes(MediaItem item)


MediaItem_Take reaper.GetMediaItemTake(MediaItem item, integer tk)


MediaItem reaper.GetMediaItemTake_Item(MediaItem_Take take)

Get parent item of media item take


integer reaper.GetMediaItemTake_Peaks(MediaItem_Take take, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)

Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.


PCM_source reaper.GetMediaItemTake_Source(MediaItem_Take take)

Get media source of media item take


MediaTrack reaper.GetMediaItemTake_Track(MediaItem_Take take)

Get parent track of media item take


MediaItem_Take reaper.GetMediaItemTakeByGUID(ReaProject project, string guidGUID)


number reaper.GetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname)

Get media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
I_LASTH : int * : height in pixels (read-only)
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
P_TRACK : pointer to MediaTrack (read-only)
P_ITEM : pointer to MediaItem (read-only)
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.



MediaTrack reaper.GetMediaItemTrack(MediaItem item)


string filenamebuf = reaper.GetMediaSourceFileName(PCM_source source)

Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.


number retval, boolean lengthIsQN = reaper.GetMediaSourceLength(PCM_source source)

Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.


integer reaper.GetMediaSourceNumChannels(PCM_source source)

Returns the number of channels in the source media.


PCM_source reaper.GetMediaSourceParent(PCM_source src)

Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.


integer reaper.GetMediaSourceSampleRate(PCM_source source)

Returns the sample rate. MIDI source media will return zero.


string typebuf = reaper.GetMediaSourceType(PCM_source source)

copies the media source type ("WAV", "MIDI", etc) to typebuf


number reaper.GetMediaTrackInfo_Value(MediaTrack tr, string parmname)

Get track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
I_MCPW : int * : current MCP width in pixels (read-only)
I_MCPH : int * : current MCP height in pixels (read-only)
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
P_PARTRACK : MediaTrack * : parent track (read-only)
P_PROJECT : ReaProject * : parent project (read-only)



boolean retval, string nameout = reaper.GetMIDIInputName(integer dev, string nameout)

returns true if device present


boolean retval, string nameout = reaper.GetMIDIOutputName(integer dev, string nameout)

returns true if device present


MediaTrack reaper.GetMixerScroll()

Get the leftmost track visible in the mixer


string action = reaper.GetMouseModifier(string context, integer modifier_flag)

Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
action will be filled in with the command ID number for a built-in mouse modifier
or built-in REAPER command ID, or the custom action ID string.
Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.
See SetMouseModifier for more information.



integer x, integer y = reaper.GetMousePosition()

get mouse position in screen coordinates


integer reaper.GetNumAudioInputs()

Return number of normal audio hardware inputs available


integer reaper.GetNumAudioOutputs()

Return number of normal audio hardware outputs available


integer reaper.GetNumMIDIInputs()

returns max number of real midi hardware inputs


integer reaper.GetNumMIDIOutputs()

returns max number of real midi hardware outputs


integer reaper.GetNumTakeMarkers(MediaItem_Take take)

Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker


integer reaper.GetNumTracks()


string reaper.GetOS()

Returns "Win32", "Win64", "OSX32", "OSX64", "macOS-arm64", or "Other".


string reaper.GetOutputChannelName(integer channelIndex)


number reaper.GetOutputLatency()

returns output latency in seconds


MediaTrack reaper.GetParentTrack(MediaTrack track)


string buf = reaper.GetPeakFileName(string fn)

get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)


string buf = reaper.GetPeakFileNameEx(string fn, string buf, boolean forWrite)

get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)


string buf = reaper.GetPeakFileNameEx2(string fn, string buf, boolean forWrite, string peaksfileextension)

Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"


number reaper.GetPlayPosition()

returns latency-compensated actual-what-you-hear position


number reaper.GetPlayPosition2()

returns position of next audio block being processed


number reaper.GetPlayPosition2Ex(ReaProject proj)

returns position of next audio block being processed


number reaper.GetPlayPositionEx(ReaProject proj)

returns latency-compensated actual-what-you-hear position


integer reaper.GetPlayState()

&1=playing, &2=paused, &4=is recording


integer reaper.GetPlayStateEx(ReaProject proj)

&1=playing, &2=paused, &4=is recording


number reaper.GetProjectLength(ReaProject proj)

returns length of project (maximum of end of media item, markers, end of regions, tempo map


string buf = reaper.GetProjectName(ReaProject proj)


string buf = reaper.GetProjectPath()

Get the project recording path.


string buf = reaper.GetProjectPathEx(ReaProject proj)

Get the project recording path.


integer reaper.GetProjectStateChangeCount(ReaProject proj)

returns an integer that changes when the project state changes


number reaper.GetProjectTimeOffset(ReaProject proj, boolean rndframe)

Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.


number bpm, number bpi = reaper.GetProjectTimeSignature()

deprecated


number bpm, number bpi = reaper.GetProjectTimeSignature2(ReaProject proj)

Gets basic time signature (beats per minute, numerator of time signature in bpi)
this does not reflect tempo envelopes but is purely what is set in the project settings.


integer retval, string val = reaper.GetProjExtState(ReaProject proj, string extname, string key)

Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.


string reaper.GetResourcePath()

returns path where ini files are stored, other things are in subdirectories.


TrackEnvelope reaper.GetSelectedEnvelope(ReaProject proj)

get the currently selected envelope, returns NULL/nil if no envelope is selected


MediaItem reaper.GetSelectedMediaItem(ReaProject proj, integer selitem)

get a selected item by selected item count (zero-based) (proj=0 for active project)


MediaTrack reaper.GetSelectedTrack(ReaProject proj, integer seltrackidx)

Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.


MediaTrack reaper.GetSelectedTrack2(ReaProject proj, integer seltrackidx, boolean wantmaster)

Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).


TrackEnvelope reaper.GetSelectedTrackEnvelope(ReaProject proj)

get the currently selected track envelope, returns NULL/nil if no envelope is selected


number start_time, number end_time = reaper.GetSet_ArrangeView2(ReaProject proj, boolean isSet, integer screen_x_start, integer screen_x_end, number start_time, number end_time)

Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time


number start, number end = reaper.GetSet_LoopTimeRange(boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)


number start, number end = reaper.GetSet_LoopTimeRange2(ReaProject proj, boolean isSet, boolean isLoop, number start, number end, boolean allowautoseek)


number reaper.GetSetAutomationItemInfo(TrackEnvelope env, integer autoitem_idx, string desc, number value, boolean is_set)

Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:
D_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID
D_POSITION : double * : automation item timeline position in seconds
D_LENGTH : double * : automation item length in seconds
D_STARTOFFS : double * : automation item start offset in seconds
D_PLAYRATE : double * : automation item playback rate
D_BASELINE : double * : automation item baseline value in the range [0,1]
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
D_LOOPSRC : double * : nonzero if the automation item contents are looped
D_UISEL : double * : nonzero if the automation item is selected in the arrange view
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)



boolean retval, string valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(TrackEnvelope env, integer autoitem_idx, string desc, string valuestrNeedBig, boolean is_set)

Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:
P_POOL_NAME : char * : name of the underlying automation item pool
P_POOL_EXT:xyz : char * : extension-specific persistent data



boolean retval, string stringNeedBig = reaper.GetSetEnvelopeInfo_String(TrackEnvelope env, string parmname, string stringNeedBig, boolean setNewValue)

Gets/sets an attribute string:
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.



boolean retval, string str = reaper.GetSetEnvelopeState(TrackEnvelope env, string str)

deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk


boolean retval, string str = reaper.GetSetEnvelopeState2(TrackEnvelope env, string str, boolean isundo)

deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk


boolean retval, string str = reaper.GetSetItemState(MediaItem item, string str)

deprecated -- see SetItemStateChunk, GetItemStateChunk


boolean retval, string str = reaper.GetSetItemState2(MediaItem item, string str, boolean isundo)

deprecated -- see SetItemStateChunk, GetItemStateChunk


boolean retval, string stringNeedBig = reaper.GetSetMediaItemInfo_String(MediaItem item, string parmname, string stringNeedBig, boolean setNewValue)

Gets/sets an item attribute string:
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.



boolean retval, string stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(MediaItem_Take tk, string parmname, string stringNeedBig, boolean setNewValue)

Gets/sets a take attribute string:
P_NAME : char * : take name
P_EXT:xyz : char * : extension-specific persistent data
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.



boolean retval, string stringNeedBig = reaper.GetSetMediaTrackInfo_String(MediaTrack tr, string parmname, string stringNeedBig, boolean setNewValue)

Get or set track string attributes.
P_NAME : char * : track name (on master returns NULL)
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
P_MCP_LAYOUT : const char * : layout name
P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.
Example: "0.0 1.0 \"\" 0.0 1.0 "{xyz-...}"
P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position.
Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.5"
P_TCP_LAYOUT : const char * : layout name
P_EXT:xyz : char * : extension-specific persistent data
P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.



string author = reaper.GetSetProjectAuthor(ReaProject proj, boolean set, string author)

deprecated, see GetSetProjectInfo_String with desc="PROJECT_AUTHOR"


integer retval, optional number division, optional integer swingmode, optional number swingamt = reaper.GetSetProjectGrid(ReaProject project, boolean set, optional number division, optional integer swingmode, optional number swingamt)

Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags


number reaper.GetSetProjectInfo(ReaProject project, string desc, number value, boolean is_set)

Get or set project information.
RENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers
RENDER_CHANNELS : number of channels in rendered file
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
RENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
RENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent
RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems
RENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, &256=only normalize files that are too loud, &512=apply fade-in, &1024=apply fade-out
RENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc
RENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc
RENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)
RENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)
RENDER_FADEINSHAPE: render fade-in shape
RENDER_FADEOUTSHAPE: render fade-out shape
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)
PROJECT_SRATE_USE : set to 1 if project samplerate is used



boolean retval, string valuestrNeedBig = reaper.GetSetProjectInfo_String(ReaProject project, string desc, string valuestrNeedBig, boolean is_set)

Get or set project information.
PROJECT_NAME : project file name (read-only, is_set will be ignored)
PROJECT_TITLE : title field from Project Settings/Notes dialog
PROJECT_AUTHOR : author field from Project Settings/Notes dialog
TRACK_GROUP_NAME:X : track group name, X should be 1..64
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)
MARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)
OPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
RECORD_PATH_SECONDARY : secondary recording directory
RECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
APPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FILE : render directory
RENDER_PATTERN : render file name (may contain wildcards)
RENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr="ID3:TALB" to get, valuestr="ID3:TALB|my album name" to set. Call with valuestr="" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.
RENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings
RENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr="XXX" to run an action (for example, "42437"=dry run render selected items) before returning statistics.
RENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type, or "" to disable secondary render.
    Formats available on this machine:
    "wave" "aiff" "caff" "mp3l" "wvpk" "OggS" "flac" "ddp " "iso " "oggv" "FFMP" "XAVF" "GIF " "LCF "


string notes = reaper.GetSetProjectNotes(ReaProject proj, boolean set, string notes)

gets or sets project notes, notesNeedBig_sz is ignored when setting


integer reaper.GetSetRepeat(integer val)

-1 == query,0=clear,1=set,>1=toggle . returns new value


integer reaper.GetSetRepeatEx(ReaProject proj, integer val)

-1 == query,0=clear,1=set,>1=toggle . returns new value


integer reaper.GetSetTrackGroupMembership(MediaTrack tr, string groupname, integer setmask, integer setvalue)

Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
MEDIA_EDIT_LEAD
MEDIA_EDIT_FOLLOW
VOLUME_LEAD
VOLUME_FOLLOW
VOLUME_VCA_LEAD
VOLUME_VCA_FOLLOW
PAN_LEAD
PAN_FOLLOW
WIDTH_LEAD
WIDTH_FOLLOW
MUTE_LEAD
MUTE_FOLLOW
SOLO_LEAD
SOLO_FOLLOW
RECARM_LEAD
RECARM_FOLLOW
POLARITY_LEAD
POLARITY_FOLLOW
AUTOMODE_LEAD
AUTOMODE_FOLLOW
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_LEAD_WHEN_FOLLOW
VOLUME_VCA_FOLLOW_ISPREFX

Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).



integer reaper.GetSetTrackGroupMembershipHigh(MediaTrack tr, string groupname, integer setmask, integer setvalue)

Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
MEDIA_EDIT_LEAD
MEDIA_EDIT_FOLLOW
VOLUME_LEAD
VOLUME_FOLLOW
VOLUME_VCA_LEAD
VOLUME_VCA_FOLLOW
PAN_LEAD
PAN_FOLLOW
WIDTH_LEAD
WIDTH_FOLLOW
MUTE_LEAD
MUTE_FOLLOW
SOLO_LEAD
SOLO_FOLLOW
RECARM_LEAD
RECARM_FOLLOW
POLARITY_LEAD
POLARITY_FOLLOW
AUTOMODE_LEAD
AUTOMODE_FOLLOW
VOLUME_REVERSE
PAN_REVERSE
WIDTH_REVERSE
NO_LEAD_WHEN_FOLLOW
VOLUME_VCA_FOLLOW_ISPREFX

Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).



boolean retval, string stringNeedBig = reaper.GetSetTrackSendInfo_String(MediaTrack tr, integer category, integer sendidx, string parmname, string stringNeedBig, boolean setNewValue)

Gets/sets a send attribute string:
P_EXT:xyz : char * : extension-specific persistent data



boolean retval, string str = reaper.GetSetTrackState(MediaTrack track, string str)

deprecated -- see SetTrackStateChunk, GetTrackStateChunk


boolean retval, string str = reaper.GetSetTrackState2(MediaTrack track, string str, boolean isundo)

deprecated -- see SetTrackStateChunk, GetTrackStateChunk


ReaProject reaper.GetSubProjectFromSource(PCM_source src)


MediaItem_Take reaper.GetTake(MediaItem item, integer takeidx)

get a take from an item by take count (zero-based)


TrackEnvelope reaper.GetTakeEnvelope(MediaItem_Take take, integer envidx)


TrackEnvelope reaper.GetTakeEnvelopeByName(MediaItem_Take take, string envname)


number retval, string name, optional integer color = reaper.GetTakeMarker(MediaItem_Take take, integer idx)

Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker


string reaper.GetTakeName(MediaItem_Take take)

returns NULL if the take is not valid


integer reaper.GetTakeNumStretchMarkers(MediaItem_Take take)

Returns number of stretch markers in take


integer retval, number pos, optional number srcpos = reaper.GetTakeStretchMarker(MediaItem_Take take, integer idx)

Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.


number reaper.GetTakeStretchMarkerSlope(MediaItem_Take take, integer idx)

See SetTakeStretchMarkerSlope


boolean retval, integer fxindex, integer parmidx = reaper.GetTCPFXParm(ReaProject project, MediaTrack track, integer index)

Get information about a specific FX parameter knob (see CountTCPFXParms).


boolean retval, number rate, number targetlen = reaper.GetTempoMatchPlayRate(PCM_source source, number srcscale, number position, number mult)

finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256


boolean retval, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo = reaper.GetTempoTimeSigMarker(ReaProject proj, integer ptidx)

Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.


integer reaper.GetThemeColor(string ini_key, integer flags)

Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key.


MediaTrack retval, string info = reaper.GetThingFromPoint(integer screen_x, integer screen_y)

Hit tests a point in screen coordinates. Updates infoOut with information such as "arrange", "fx_chain", "fx_0" (first FX in chain, floating). If a track panel is hit, string will begin with "tcp" or "mcp" or "tcp.mute" etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.


integer reaper.GetToggleCommandState(integer command_id)

See GetToggleCommandStateEx.


integer reaper.GetToggleCommandStateEx(integer section_id, integer command_id)

For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.


HWND reaper.GetTooltipWindow()

gets a tooltip window,in case you want to ask it for font information. Can return NULL.


MediaTrack reaper.GetTrack(ReaProject proj, integer trackidx)

get a track from a project by track count (zero-based) (proj=0 for active project)


integer reaper.GetTrackAutomationMode(MediaTrack tr)

return the track mode, regardless of global override


integer reaper.GetTrackColor(MediaTrack track)

Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.


integer reaper.GetTrackDepth(MediaTrack track)


TrackEnvelope reaper.GetTrackEnvelope(MediaTrack track, integer envidx)


TrackEnvelope reaper.GetTrackEnvelopeByChunkName(MediaTrack tr, string cfgchunkname_or_guid)

Gets a built-in track envelope by configuration chunk name, like "<VOLENV", or GUID string, like "{B577250D-146F-B544-9B34-F24FBE488F1F}".



TrackEnvelope reaper.GetTrackEnvelopeByName(MediaTrack track, string envname)


MediaTrack retval, optional integer info = reaper.GetTrackFromPoint(integer screen_x, integer screen_y)

Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. See GetThingFromPoint.


string GUID = reaper.GetTrackGUID(MediaTrack tr)


MediaItem reaper.GetTrackMediaItem(MediaTrack tr, integer itemidx)


boolean retval, string buf = reaper.GetTrackMIDILyrics(MediaTrack track, integer flag)

Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1 "). See SetTrackMIDILyrics


string reaper.GetTrackMIDINoteName(integer track, integer pitch, integer chan)

see GetTrackMIDINoteNameEx


string reaper.GetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan)

Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx


integer note_lo, integer note_hi = reaper.GetTrackMIDINoteRange(ReaProject proj, MediaTrack track)


boolean retval, string buf = reaper.GetTrackName(MediaTrack track)

Returns "MASTER" for master track, "Track N" if track has no name.


integer reaper.GetTrackNumMediaItems(MediaTrack tr)


integer reaper.GetTrackNumSends(MediaTrack tr, integer category)

returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs


boolean retval, string buf = reaper.GetTrackReceiveName(MediaTrack track, integer recv_index)

See GetTrackSendName.


boolean retval, boolean mute = reaper.GetTrackReceiveUIMute(MediaTrack track, integer recv_index)

See GetTrackSendUIMute.


boolean retval, number volume, number pan = reaper.GetTrackReceiveUIVolPan(MediaTrack track, integer recv_index)

See GetTrackSendUIVolPan.


number reaper.GetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname)

Get send/receive/hardware output numerical-value attributes.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool * : true to flip phase
B_MONO : bool *
D_VOL : double * : 1.0 = +0dB etc
D_PAN : double * : -1..+1
D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int * : index,&1024=mono, -1 for none
I_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)
P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)
P_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.


boolean retval, string buf = reaper.GetTrackSendName(MediaTrack track, integer send_index)

send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.


boolean retval, boolean mute = reaper.GetTrackSendUIMute(MediaTrack track, integer send_index)

send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.


boolean retval, number volume, number pan = reaper.GetTrackSendUIVolPan(MediaTrack track, integer send_index)

send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.


string retval, integer flags = reaper.GetTrackState(MediaTrack track)

Gets track state, returns track name.
flags will be set to:
&1=folder
&2=selected
&4=has fx enabled
&8=muted
&16=soloed
&32=SIP'd (with &16)
&64=rec armed
&128=rec monitoring on
&256=rec monitoring auto
&512=hide from TCP
&1024=hide from MCP


boolean retval, string str = reaper.GetTrackStateChunk(MediaTrack track, string str, boolean isundo)

Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.


boolean retval, boolean mute = reaper.GetTrackUIMute(MediaTrack track)


boolean retval, number pan1, number pan2, integer panmode = reaper.GetTrackUIPan(MediaTrack track)


boolean retval, number volume, number pan = reaper.GetTrackUIVolPan(MediaTrack track)


integer audio_xrun, integer media_xrun, integer curtime = reaper.GetUnderrunTime()

retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)


boolean retval, string filenameNeed4096 = reaper.GetUserFileNameForRead(string filenameNeed4096, string title, string defext)

returns true if the user selected a valid file, false if the user canceled the dialog


boolean retval, string retvals_csv = reaper.GetUserInputs(string title, integer num_inputs, string captions_csv, string retvals_csv)

Get values from the user.
If a caption begins with *, for example "*password", the edit field will not display the input text.
Maximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.


reaper.GoToMarker(ReaProject proj, integer marker_index, boolean use_timeline_order)

Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline. If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.


reaper.GoToRegion(ReaProject proj, integer region_index, boolean use_timeline_order)

Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline. If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.


integer retval, integer color = reaper.GR_SelectColor(HWND hwnd)

Runs the system color chooser dialog. Returns 0 if the user cancels the dialog.


integer reaper.GSC_mainwnd(integer t)

this is just like win32 GetSysColor() but can have overrides.


string destNeed64 = reaper.guidToString(string gGUID, string destNeed64)

dest should be at least 64 chars long to be safe


boolean reaper.HasExtState(string section, string key)

Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.


string reaper.HasTrackMIDIPrograms(integer track)

returns name of track plugin that is supplying MIDI programs,or NULL if there is none


string reaper.HasTrackMIDIProgramsEx(ReaProject proj, MediaTrack track)

returns name of track plugin that is supplying MIDI programs,or NULL if there is none


reaper.Help_Set(string helpstring, boolean is_temporary_help)


string out = reaper.image_resolve_fn(string in, string out)


integer reaper.InsertAutomationItem(TrackEnvelope env, integer pool_id, number position, number length)

Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.


boolean reaper.InsertEnvelopePoint(TrackEnvelope envelope, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)

Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.


boolean reaper.InsertEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, number time, number value, integer shape, number tension, boolean selected, optional boolean noSortIn)

Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.


integer reaper.InsertMedia(string file, integer mode)

mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse


integer reaper.InsertMediaSection(string file, integer mode, number startpct, number endpct, number pitchshift)

See InsertMedia.


reaper.InsertTrackAtIndex(integer idx, boolean wantDefaults)

inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env


boolean reaper.IsMediaExtension(string ext, boolean wantOthers)

Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.


boolean reaper.IsMediaItemSelected(MediaItem item)


integer reaper.IsProjectDirty(ReaProject proj)

Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.


boolean reaper.IsTrackSelected(MediaTrack track)


boolean reaper.IsTrackVisible(MediaTrack track, boolean mixer)

If mixer==true, returns true if the track is visible in the mixer. If mixer==false, returns true if the track is visible in the track control panel.


joystick_device reaper.joystick_create(string guidGUID)

creates a joystick device


reaper.joystick_destroy(joystick_device device)

destroys a joystick device


string retval, optional string namestr = reaper.joystick_enum(integer index)

enumerates installed devices, returns GUID as a string


number reaper.joystick_getaxis(joystick_device dev, integer axis)

returns axis value (-1..1)


integer reaper.joystick_getbuttonmask(joystick_device dev)

returns button pressed mask, 1=first button, 2=second...


integer retval, optional integer axes, optional integer povs = reaper.joystick_getinfo(joystick_device dev)

returns button count


number reaper.joystick_getpov(joystick_device dev, integer pov)

returns POV value (usually 0..655.35, or 655.35 on error)


boolean reaper.joystick_update(joystick_device dev)

Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)


integer retval, string name = reaper.kbd_enumerateActions(KbdSectionInfo section, integer idx)


string reaper.kbd_getTextFromCmd(integer cmd, KbdSectionInfo section)


boolean retval, integer pX1, integer pY1, integer pX2, integer pY2 = reaper.LICE_ClipLine(integer pX1, integer pY1, integer pX2, integer pY2, integer xLo, integer yLo, integer xHi, integer yHi)

Returns false if the line is entirely offscreen.


string reaper.LocalizeString(string src_string, string section, integer flags)

Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.


boolean reaper.Loop_OnArrow(ReaProject project, integer direction)

Move the loop selection left or right. Returns true if snap is enabled.


reaper.Main_OnCommand(integer command, integer flag)

See Main_OnCommandEx.


reaper.Main_OnCommandEx(integer command, integer flag, ReaProject proj)

Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().


reaper.Main_openProject(string name)

opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.
If passed a .RTrackTemplate file, adds the template to the existing project.


reaper.Main_SaveProject(ReaProject proj, boolean forceSaveAsIn)

Save the project.


reaper.Main_SaveProjectEx(ReaProject proj, string filename, integer options)

Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject.


reaper.Main_UpdateLoopInfo(integer ignoremask)


reaper.MarkProjectDirty(ReaProject proj)

Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.


reaper.MarkTrackItemsDirty(MediaTrack track, MediaItem item)

If track is supplied, item is ignored


number reaper.Master_GetPlayRate(ReaProject project)


number reaper.Master_GetPlayRateAtTime(number time_s, ReaProject proj)


number reaper.Master_GetTempo()


number reaper.Master_NormalizePlayRate(number playrate, boolean isnormalized)

Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.


number reaper.Master_NormalizeTempo(number bpm, boolean isnormalized)

Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.


integer reaper.MB(string msg, string title, integer type)

type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO


integer reaper.MediaItemDescendsFromTrack(MediaItem item, MediaTrack track)

Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.


integer retval, integer notecnt, integer ccevtcnt, integer textsyxevtcnt = reaper.MIDI_CountEvts(MediaItem_Take take)

Count the number of notes, CC events, and text/sysex events in a given MIDI item.


boolean reaper.MIDI_DeleteCC(MediaItem_Take take, integer ccidx)

Delete a MIDI CC event.


boolean reaper.MIDI_DeleteEvt(MediaItem_Take take, integer evtidx)

Delete a MIDI event.


boolean reaper.MIDI_DeleteNote(MediaItem_Take take, integer noteidx)

Delete a MIDI note.


boolean reaper.MIDI_DeleteTextSysexEvt(MediaItem_Take take, integer textsyxevtidx)

Delete a MIDI text or sysex event.


reaper.MIDI_DisableSort(MediaItem_Take take)

Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.


integer reaper.MIDI_EnumSelCC(MediaItem_Take take, integer ccidx)

Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).


integer reaper.MIDI_EnumSelEvts(MediaItem_Take take, integer evtidx)

Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).


integer reaper.MIDI_EnumSelNotes(MediaItem_Take take, integer noteidx)

Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).


integer reaper.MIDI_EnumSelTextSysexEvts(MediaItem_Take take, integer textsyxidx)

Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).


boolean retval, string buf = reaper.MIDI_GetAllEvts(MediaItem_Take take)

Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_SetAllEvts.


boolean retval, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3 = reaper.MIDI_GetCC(MediaItem_Take take, integer ccidx)

Get MIDI CC event properties.


boolean retval, integer shape, number beztension = reaper.MIDI_GetCCShape(MediaItem_Take take, integer ccidx)

Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape


boolean retval, boolean selected, boolean muted, number ppqpos, string msg = reaper.MIDI_GetEvt(MediaItem_Take take, integer evtidx)

Get MIDI event properties.


number retval, optional number swing, optional number noteLen = reaper.MIDI_GetGrid(MediaItem_Take take)

Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.


boolean retval, string hash = reaper.MIDI_GetHash(MediaItem_Take take, boolean notesonly)

Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash


boolean retval, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel = reaper.MIDI_GetNote(MediaItem_Take take, integer noteidx)

Get MIDI note properties.


number reaper.MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take take, number ppqpos)

Returns the MIDI tick (ppq) position corresponding to the end of the measure.


number reaper.MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take take, number ppqpos)

Returns the MIDI tick (ppq) position corresponding to the start of the measure.


number reaper.MIDI_GetPPQPosFromProjQN(MediaItem_Take take, number projqn)

Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.


number reaper.MIDI_GetPPQPosFromProjTime(MediaItem_Take take, number projtime)

Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.


number reaper.MIDI_GetProjQNFromPPQPos(MediaItem_Take take, number ppqpos)

Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.


number reaper.MIDI_GetProjTimeFromPPQPos(MediaItem_Take take, number ppqpos)

Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.


integer retval, string buf, integer ts, integer devIdx, number projPos, integer projLoopCnt = reaper.MIDI_GetRecentInputEvent(integer idx)

Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.


boolean retval, integer root, integer scale, string name = reaper.MIDI_GetScale(MediaItem_Take take)

Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.


boolean retval, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg = reaper.MIDI_GetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selected, optional boolean muted, optional number ppqpos, optional integer type, optional string msg)

Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt.


boolean retval, string hash = reaper.MIDI_GetTrackHash(MediaTrack track, boolean notesonly)

Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash


reaper.midi_init(integer force_reinit_input, integer force_reinit_output)

Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).


boolean reaper.MIDI_InsertCC(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer chanmsg, integer chan, integer msg2, integer msg3)

Insert a new MIDI CC event.


boolean reaper.MIDI_InsertEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, string bytestr)

Insert a new MIDI event.


boolean reaper.MIDI_InsertNote(MediaItem_Take take, boolean selected, boolean muted, number startppqpos, number endppqpos, integer chan, integer pitch, integer vel, optional boolean noSortIn)

Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.


boolean reaper.MIDI_InsertTextSysexEvt(MediaItem_Take take, boolean selected, boolean muted, number ppqpos, integer type, string bytestr)

Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.


reaper.midi_reinit()

Reset (close and re-open) all MIDI devices


reaper.MIDI_SelectAll(MediaItem_Take take, boolean select)

Select or deselect all MIDI content.


boolean reaper.MIDI_SetAllEvts(MediaItem_Take take, string buf)

Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
offset: MIDI ticks from previous event
flag: &1=selected &2=muted
flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
msg: the MIDI message.
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
See MIDI_GetAllEvts.


boolean reaper.MIDI_SetCC(MediaItem_Take take, integer ccidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer chanmsgIn, optional integer chanIn, optional integer msg2In, optional integer msg3In, optional boolean noSortIn)

Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.


boolean reaper.MIDI_SetCCShape(MediaItem_Take take, integer ccidx, integer shape, number beztension, optional boolean noSortIn)

Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape


boolean reaper.MIDI_SetEvt(MediaItem_Take take, integer evtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional string msg, optional boolean noSortIn)

Set MIDI event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.


boolean reaper.MIDI_SetItemExtents(MediaItem item, number startQN, number endQN)

Set the start/end positions of a media item that contains a MIDI take.


boolean reaper.MIDI_SetNote(MediaItem_Take take, integer noteidx, optional boolean selectedIn, optional boolean mutedIn, optional number startppqposIn, optional number endppqposIn, optional integer chanIn, optional integer pitchIn, optional integer velIn, optional boolean noSortIn)

Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.


boolean reaper.MIDI_SetTextSysexEvt(MediaItem_Take take, integer textsyxevtidx, optional boolean selectedIn, optional boolean mutedIn, optional number ppqposIn, optional integer typeIn, optional string msg, optional boolean noSortIn)

Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.


reaper.MIDI_Sort(MediaItem_Take take)

Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.


MediaItem_Take reaper.MIDIEditor_EnumTakes(HWND midieditor, integer takeindex, boolean editable_only)

list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake


HWND reaper.MIDIEditor_GetActive()

get a pointer to the focused MIDI editor window
see MIDIEditor_GetMode, MIDIEditor_OnCommand


integer reaper.MIDIEditor_GetMode(HWND midieditor)

get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
see MIDIEditor_GetActive, MIDIEditor_OnCommand


integer reaper.MIDIEditor_GetSetting_int(HWND midieditor, string setting_desc)

Get settings from a MIDI editor. setting_desc can be:
snap_enabled: returns 0 or 1
active_note_row: returns 0-127
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane
default_note_vel: returns 0-127
default_note_chan: returns 0-15
default_note_len: returns default length in MIDI ticks
scale_enabled: returns 0-1
scale_root: returns 0-12 (0=C)
list_cnt: if viewing list view, returns event count
if setting_desc is unsupported, the function returns -1.
See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str



boolean retval, string buf = reaper.MIDIEditor_GetSetting_str(HWND midieditor, string setting_desc)

Get settings from a MIDI editor. setting_desc can be:
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
scale: returns the scale record, for example "102034050607" for a major scale
list_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.
if setting_desc is unsupported, the function returns false.
See MIDIEditor_GetActive, MIDIEditor_GetSetting_int



MediaItem_Take reaper.MIDIEditor_GetTake(HWND midieditor)

get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes


boolean reaper.MIDIEditor_LastFocused_OnCommand(integer command_id, boolean islistviewcommand)

Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.
see MIDIEditor_OnCommand


boolean reaper.MIDIEditor_OnCommand(HWND midieditor, integer command_id)

Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).
see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand


boolean reaper.MIDIEditor_SetSetting_int(HWND midieditor, string setting_desc, integer setting)

Set settings for a MIDI editor. setting_desc can be:
active_note_row: 0-127
See MIDIEditor_GetSetting_int



string strNeed64 = reaper.mkpanstr(string strNeed64, number pan)


string strNeed64 = reaper.mkvolpanstr(string strNeed64, number vol, number pan)


string strNeed64 = reaper.mkvolstr(string strNeed64, number vol)


reaper.MoveEditCursor(number adjamt, boolean dosel)


boolean reaper.MoveMediaItemToTrack(MediaItem item, MediaTrack desttr)

returns TRUE if move succeeded


reaper.MuteAllTracks(boolean mute)


reaper.my_getViewport(integerr.left, integerr.top, integerr.right, integerr.bot, integer sr.left, integer sr.top, integer sr.right, integer sr.bot, boolean wantWorkArea)


integer reaper.NamedCommandLookup(string command_name)

Get the command ID number for named command that was registered by an extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.


reaper.OnPauseButton()

direct way to simulate pause button hit


reaper.OnPauseButtonEx(ReaProject proj)

direct way to simulate pause button hit


reaper.OnPlayButton()

direct way to simulate play button hit


reaper.OnPlayButtonEx(ReaProject proj)

direct way to simulate play button hit


reaper.OnStopButton()

direct way to simulate stop button hit


reaper.OnStopButtonEx(ReaProject proj)

direct way to simulate stop button hit


boolean reaper.OpenColorThemeFile(string fn)


HWND reaper.OpenMediaExplorer(string mediafn, boolean play)

Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.


reaper.OscLocalMessageToHost(string message, optional number valueIn)

Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.


number reaper.parse_timestr(string buf)

Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.


number reaper.parse_timestr_len(string buf, number offset, integer modeoverride)

time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f



number reaper.parse_timestr_pos(string buf, integer modeoverride)

Parse time string, time formatting mode overrides: -1=proj default.
0=time
1=measures.beats + time
2=measures.beats
3=seconds
4=samples
5=h:m:s:f



number reaper.parsepanstr(string str)


integer retval, string descstr = reaper.PCM_Sink_Enum(integer idx)


string reaper.PCM_Sink_GetExtension(string data)


HWND reaper.PCM_Sink_ShowConfig(string cfg, HWND hwndParent)


integer reaper.PCM_Source_BuildPeaks(PCM_source src, integer mode)

Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.


PCM_source reaper.PCM_Source_CreateFromFile(string filename)

See PCM_Source_CreateFromFileEx.


PCM_source reaper.PCM_Source_CreateFromFileEx(string filename, boolean forcenoMidiImp)

Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.


PCM_source reaper.PCM_Source_CreateFromType(string sourcetype)

Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.


reaper.PCM_Source_Destroy(PCM_source src)

Deletes a PCM_source -- be sure that you remove any project reference before deleting a source


integer reaper.PCM_Source_GetPeaks(PCM_source src, number peakrate, number starttime, integer numchannels, integer numsamplesperchannel, integer want_extra_type, reaper.array buf)

Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.


boolean retval, number offs, number len, boolean rev = reaper.PCM_Source_GetSectionInfo(PCM_source src)

If a section/reverse block, retrieves offset/len/reverse. return true if success


reaper.PluginWantsAlwaysRunFx(integer amt)


reaper.PreventUIRefresh(integer prevent_count)

adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur


integer reaper.PromptForAction(integer session_mode, integer init_id, integer section_id)

Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.


reaper.ReaScriptError(string errmsg)

Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.


integer reaper.RecursiveCreateDirectory(string path, integer ignored)

returns positive value on success, 0 on failure.


integer reaper.reduce_open_files(integer flags)

garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.


reaper.RefreshToolbar(integer command_id)

See RefreshToolbar2.


reaper.RefreshToolbar2(integer section_id, integer command_id)

Refresh the toolbar button states of a toggle action.


string out = reaper.relative_fn(string in, string out)

Makes a filename "in" relative to the current project, if any.


boolean reaper.RemoveTrackSend(MediaTrack tr, integer category, integer sendidx)

Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.


boolean reaper.RenderFileSection(string source_filename, string target_filename, number start_percent, number end_percent, number playrate)

Not available while playing back.


boolean reaper.ReorderSelectedTracks(integer beforeTrackIdx, integer makePrevFolder)

Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder


string reaper.Resample_EnumModes(integer mode)


string out = reaper.resolve_fn(string in, string out)

See resolve_fn2.


string out = reaper.resolve_fn2(string in, string out, optional string checkSubDir)

Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.


string reaper.ReverseNamedCommandLookup(integer command_id)

Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL if command_id is a native action.


number reaper.ScaleFromEnvelopeMode(integer scaling_mode, number val)

See GetEnvelopeScalingMode.


number reaper.ScaleToEnvelopeMode(integer scaling_mode, number val)

See GetEnvelopeScalingMode.


KbdSectionInfo reaper.SectionFromUniqueID(integer uniqueID)


reaper.SelectAllMediaItems(ReaProject proj, boolean selected)


reaper.SelectProjectInstance(ReaProject proj)


reaper.SendMIDIMessageToHardware(integer output, string msg)

Sends a MIDI message to output device specified by output. Message is sent in immediate mode.


reaper.SetActiveTake(MediaItem_Take take)

set this take active in this media item


reaper.SetAutomationMode(integer mode, boolean onlySel)

sets all or selected tracks to mode.


reaper.SetCurrentBPM(ReaProject __proj, number bpm, boolean wantUndo)

set current BPM in project, set wantUndo=true to add undo point


reaper.SetCursorContext(integer mode, TrackEnvelope envIn)

You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)


reaper.SetEditCurPos(number time, boolean moveview, boolean seekplay)


reaper.SetEditCurPos2(ReaProject proj, number time, boolean moveview, boolean seekplay)


boolean reaper.SetEnvelopePoint(TrackEnvelope envelope, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)

Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx.


boolean reaper.SetEnvelopePointEx(TrackEnvelope envelope, integer autoitem_idx, integer ptidx, optional number timeIn, optional number valueIn, optional integer shapeIn, optional number tensionIn, optional boolean selectedIn, optional boolean noSortIn)

Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
even if the automation item is trimmed so that not all points are visible.
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.


boolean reaper.SetEnvelopeStateChunk(TrackEnvelope env, string str, boolean isundo)

Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.


reaper.SetExtState(string section, string key, string value, boolean persist)

Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.


reaper.SetGlobalAutomationOverride(integer mode)

mode: see GetGlobalAutomationOverride


boolean reaper.SetItemStateChunk(MediaItem item, string str, boolean isundo)

Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.


integer reaper.SetMasterTrackVisibility(integer flag)

set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.


boolean reaper.SetMediaItemInfo_Value(MediaItem item, string parmname, number newvalue)

Set media item numerical-value attributes.
B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
B_LOOPSRC : bool * : loop source
B_ALLTAKESPLAY : bool * : all takes play
B_UISEL : bool * : selected in arrange view
C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
C_LOCK : char * : locked, &1=locked
D_VOL : double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_POSITION : double * : item position in seconds
D_LENGTH : double * : item length in seconds
D_SNAPOFFSET : double * : item snap offset in seconds
D_FADEINLEN : double * : item manual fadein length in seconds
D_FADEOUTLEN : double * : item manual fadeout length in seconds
D_FADEINDIR : double * : item fadein curvature, -1..1
D_FADEOUTDIR : double * : item fadeout curvature, -1..1
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
I_GROUPID : int * : group ID, 0=no group
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
I_LASTH : int * : height in pixels (read-only)
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
I_CURTAKE : int * : active take number
IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)



boolean reaper.SetMediaItemLength(MediaItem item, number length, boolean refreshUI)

Redraws the screen only if refreshUI == true.
See UpdateArrange().


boolean reaper.SetMediaItemPosition(MediaItem item, number position, boolean refreshUI)

Redraws the screen only if refreshUI == true.
See UpdateArrange().


reaper.SetMediaItemSelected(MediaItem item, boolean selected)


boolean reaper.SetMediaItemTake_Source(MediaItem_Take take, PCM_source source)

Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.


boolean reaper.SetMediaItemTakeInfo_Value(MediaItem_Take take, string parmname, number newvalue)

Set media item take numerical-value attributes.
D_STARTOFFS : double * : start offset in source media, in seconds
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
D_PAN : double * : take pan, -1..1
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
B_PPITCH : bool * : preserve pitch when changing playback rate
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
I_LASTH : int * : height in pixels (read-only)
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)



boolean reaper.SetMediaTrackInfo_Value(MediaTrack tr, string parmname, number newvalue)

Set track numerical-value attributes.
B_MUTE : bool * : muted
B_PHASE : bool * : track phase inverted
B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
I_RECARM : int * : record armed, 0=not record armed, 1=record armed
I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
I_NCHAN : int * : number of track channels, 2-64, even numbers only
I_SELECTED : int * : track selected, 0=unselected, 1=selected
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
I_MCPW : int * : current MCP width in pixels (read-only)
I_MCPH : int * : current MCP height in pixels (read-only)
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children
I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
B_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
D_PAN : double * : trim pan of track, -1..1
D_WIDTH : double * : width of track, -1..1
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
B_MAINSEND : bool * : track sends audio to parent
C_MAINSEND_OFFS : char * : channel offset of track send to parent
C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG



reaper.SetMIDIEditorGrid(ReaProject project, number division)

Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.


MediaTrack reaper.SetMixerScroll(MediaTrack leftmosttrack)

Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.


reaper.SetMouseModifier(string context, integer modifier_flag, string action)

Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
For left-click and double-click contexts, the action can be any built-in command ID number
or any custom action ID string. Find built-in command IDs in the REAPER actions window
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.
Assigning an action of -1 will reset that mouse modifier behavior to factory default.
Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.
Special case: SetMouseModifier(context, -1, -1) will reset the entire context to default.
Special case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.
See GetMouseModifier.



reaper.SetOnlyTrackSelected(MediaTrack track)

Set exactly one track selected, deselect all others


reaper.SetProjectGrid(ReaProject project, number division)

Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.


boolean reaper.SetProjectMarker(integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)

Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.


boolean reaper.SetProjectMarker2(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name)

Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.


boolean reaper.SetProjectMarker3(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color)

Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.


boolean reaper.SetProjectMarker4(ReaProject proj, integer markrgnindexnumber, boolean isrgn, number pos, number rgnend, string name, integer color, integer flags)

color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name


boolean reaper.SetProjectMarkerByIndex(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color)

See SetProjectMarkerByIndex2.


boolean reaper.SetProjectMarkerByIndex2(ReaProject proj, integer markrgnidx, boolean isrgn, number pos, number rgnend, integer IDnumber, string name, integer color, integer flags)

Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.


integer reaper.SetProjExtState(ReaProject proj, string extname, string key, string value)

Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "", all extended data for that extname will be deleted. If val is NULL or "", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.


reaper.SetRegionRenderMatrix(ReaProject proj, integer regionindex, MediaTrack track, integer flag)

Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.


integer reaper.SetTakeMarker(MediaItem_Take take, integer idx, string nameIn, optional number srcposIn, optional integer colorIn)

Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker


integer reaper.SetTakeStretchMarker(MediaItem_Take take, integer idx, number pos, optional number srcposIn)

Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).


boolean reaper.SetTakeStretchMarkerSlope(MediaItem_Take take, integer idx, number slope)

See GetTakeStretchMarkerSlope


boolean reaper.SetTempoTimeSigMarker(ReaProject proj, integer ptidx, number timepos, integer measurepos, number beatpos, number bpm, integer timesig_num, integer timesig_denom, boolean lineartempo)

Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.


integer reaper.SetThemeColor(string ini_key, integer color, integer flags)

Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.
Currently valid ini_keys:
col_main_bg2 : Main window/transport background -- current RGB: 51,51,51
col_main_text2 : Main window/transport text -- current RGB: 108,108,108
col_main_textshadow : Main window text shadow (ignored if too close to text color) -- current RGB: 51,51,51
col_main_3dhl : Main window 3D highlight -- current RGB: 51,51,51
col_main_3dsh : Main window 3D shadow -- current RGB: 51,51,51
col_main_resize2 : Main window pane resize mouseover -- current RGB: 87,161,149
col_main_text : Themed window text -- current RGB: 149,149,149
col_main_bg : Themed window background -- current RGB: 51,51,51
col_main_editbk : Themed window edit background -- current RGB: 80,80,80
col_nodarkmodemiscwnd : Do not use window theming on macOS dark mode -- bool 00000000
col_transport_editbk : Transport edit background -- current RGB: 51,51,51
col_toolbar_text : Toolbar button text -- current RGB: 160,160,160
col_toolbar_text_on : Toolbar button enabled text -- current RGB: 104,189,169
col_toolbar_frame : Toolbar frame when floating or docked -- current RGB: 74,77,78
toolbararmed_color : Toolbar button armed color -- current RGB: 20,160,140
toolbararmed_drawmode : Toolbar button armed fill mode -- blendmode 000300ff
io_text : I/O window text -- current RGB: 198,198,198
io_3dhl : I/O window 3D highlight -- current RGB: 56,56,56
io_3dsh : I/O window 3D shadow -- current RGB: 56,56,56
genlist_bg : Window list background -- current RGB: 48,48,48
genlist_fg : Window list text -- current RGB: 151,151,151
genlist_grid : Window list grid lines -- current RGB: 63,63,63
genlist_selbg : Window list selected row -- current RGB: 36,36,36
genlist_selfg : Window list selected text -- current RGB: 255,255,255
genlist_seliabg : Window list selected row (inactive) -- current RGB: 88,88,88
genlist_seliafg : Window list selected text (inactive) -- current RGB: 194,194,194
genlist_hilite : Window list highlighted text -- current RGB: 108,108,225
genlist_hilite_sel : Window list highlighted selected text -- current RGB: 223,223,255
col_buttonbg : Button background -- current RGB: 0,0,0
col_tcp_text : Track panel text -- current RGB: 23,27,29
col_tcp_textsel : Track panel (selected) text -- current RGB: 23,27,29
col_seltrack : Selected track control panel background -- current RGB: 129,129,129
col_seltrack2 : Unselected track control panel background (enabled with a checkbox above) -- current RGB: 127,127,127
tcplocked_color : Locked track control panel overlay color -- current RGB: 51,51,51
tcplocked_drawmode : Locked track control panel fill mode -- blendmode 0002c000
col_tracklistbg : Empty track list area -- current RGB: 38,38,38
col_mixerbg : Empty mixer list area -- current RGB: 51,51,51
col_arrangebg : Empty arrange view area -- current RGB: 69,69,69
arrange_vgrid : Empty arrange view area vertical grid shading -- current RGB: 70,70,70
col_fadearm : Fader background when automation recording -- current RGB: 137,65,65
col_fadearm2 : Fader background when automation playing -- current RGB: 40,84,69
col_fadearm3 : Fader background when in inactive touch/latch -- current RGB: 0,0,0
col_tl_fg : Timeline foreground -- current RGB: 116,116,116
col_tl_fg2 : Timeline foreground (secondary markings) -- current RGB: 92,92,92
col_tl_bg : Timeline background -- current RGB: 51,51,51
col_tl_bgsel : Time selection color -- current RGB: 255,255,255
timesel_drawmode : Time selection fill mode -- blendmode 00021100
col_tl_bgsel2 : Timeline background (in loop points) -- current RGB: 142,142,142
col_trans_bg : Transport status background -- current RGB: 73,73,73
col_trans_fg : Transport status text -- current RGB: 131,131,131
playrate_edited : Project play rate control when not 1.0 -- current RGB: 121,255,211
col_mi_label : Media item label -- current RGB: 44,44,44
col_mi_label_sel : Media item label (selected) -- current RGB: 63,63,63
col_mi_label_float : Floating media item label -- current RGB: 144,144,144
col_mi_label_float_sel : Floating media item label (selected) -- current RGB: 201,201,201
col_mi_bg : Media item background (odd tracks) -- current RGB: 79,79,79
col_mi_bg2 : Media item background (even tracks) -- current RGB: 129,129,129
col_tr1_itembgsel : Media item background selected (odd tracks) -- current RGB: 129,129,129
col_tr2_itembgsel : Media item background selected (even tracks) -- current RGB: 129,129,129
itembg_drawmode : Media item background fill mode -- blendmode 00030000
col_tr1_peaks : Media item peaks (odd tracks) -- current RGB: 37,37,37
col_tr2_peaks : Media item peaks (even tracks) -- current RGB: 37,37,37
col_tr1_ps2 : Media item peaks when selected (odd tracks) -- current RGB: 245,245,245
col_tr2_ps2 : Media item peaks when selected (even tracks) -- current RGB: 245,245,245
col_peaksedge : Media item peaks edge highlight (odd tracks) -- current RGB: 59,59,59
col_peaksedge2 : Media item peaks edge highlight (even tracks) -- current RGB: 59,59,59
col_peaksedgesel : Media item peaks edge highlight when selected (odd tracks) -- current RGB: 226,226,226
col_peaksedgesel2 : Media item peaks edge highlight when selected (even tracks) -- current RGB: 226,226,226
cc_chase_drawmode : Media item MIDI CC peaks fill mode -- blendmode 00024000
col_peaksfade : Media item peaks when active in crossfade editor (fade-out) -- current RGB: 121,255,121
col_peaksfade2 : Media item peaks when active in crossfade editor (fade-in) -- current RGB: 255,121,121
col_mi_fades : Media item fade/volume controls -- current RGB: 46,46,46
fadezone_color : Media item fade quiet zone fill color -- current RGB: 0,0,0
fadezone_drawmode : Media item fade quiet zone fill mode -- blendmode 00023300
fadearea_color : Media item fade full area fill color -- current RGB: 255,255,255
fadearea_drawmode : Media item fade full area fill mode -- blendmode 00020000
col_mi_fade2 : Media item edges of controls -- current RGB: 0,0,0
col_mi_fade2_drawmode : Media item edges of controls blend mode -- blendmode 00023300
item_grouphl : Media item edge when selected via grouping -- current RGB: 114,185,113
col_offlinetext : Media item "offline" text -- current RGB: 59,68,71
col_stretchmarker : Media item stretch marker line -- current RGB: 198,198,198
col_stretchmarker_h0 : Media item stretch marker handle (1x) -- current RGB: 196,196,196
col_stretchmarker_h1 : Media item stretch marker handle (>1x) -- current RGB: 113,192,237
col_stretchmarker_h2 : Media item stretch marker handle (<1x) -- current RGB: 224,107,107
col_stretchmarker_b : Media item stretch marker handle edge -- current RGB: 255,255,255
col_stretchmarkerm : Media item stretch marker blend mode -- blendmode 0002a800
col_stretchmarker_text : Media item stretch marker text -- current RGB: 212,212,212
col_stretchmarker_tm : Media item transient guide handle -- current RGB: 112,235,112
take_marker : Media item take marker -- current RGB: 255,252,121
selitem_tag : Selected media item bar color -- current RGB: 0,0,0
activetake_tag : Active media item take bar color -- current RGB: 0,0,0
col_tr1_bg : Track background (odd tracks) -- current RGB: 66,66,66
col_tr2_bg : Track background (even tracks) -- current RGB: 69,69,69
selcol_tr1_bg : Selected track background (odd tracks) -- current RGB: 66,66,66
selcol_tr2_bg : Selected track background (even tracks) -- current RGB: 69,69,69
col_tr1_divline : Track divider line (odd tracks) -- current RGB: 66,66,66
col_tr2_divline : Track divider line (even tracks) -- current RGB: 69,69,69
col_envlane1_divline : Envelope lane divider line (odd tracks) -- current RGB: 117,119,120
col_envlane2_divline : Envelope lane divider line (even tracks) -- current RGB: 117,119,120
mute_overlay_col : Muted/unsoloed track/item overlay color -- current RGB: 48,48,48
mute_overlay_mode : Muted/unsoloed track/item overlay mode -- blendmode 00028000
inactive_take_overlay_col : Inactive take overlay color -- current RGB: 48,48,48
inactive_take_overlay_mode : Inactive take overlay mode -- blendmode 00028000
locked_overlay_col : Locked track/item overlay color -- current RGB: 0,0,0
locked_overlay_mode : Locked track/item overlay mode -- blendmode 00025c03
marquee_fill : Marquee fill -- current RGB: 128,128,110
marquee_drawmode : Marquee fill mode -- blendmode 000299ff
marquee_outline : Marquee outline -- current RGB: 255,255,255
marqueezoom_fill : Marquee zoom fill -- current RGB: 255,255,255
marqueezoom_drawmode : Marquee zoom fill mode -- blendmode 00024002
marqueezoom_outline : Marquee zoom outline -- current RGB: 121,255,121
areasel_fill : Razor edit area fill -- current RGB: 127,234,210
areasel_drawmode : Razor edit area fill mode -- blendmode 00021801
areasel_outline : Razor edit area outline -- current RGB: 121,252,225
areasel_outlinemode : Razor edit area outline mode -- blendmode 0002c000
col_cursor : Edit cursor -- current RGB: 99,153,143
col_cursor2 : Edit cursor (alternate) -- current RGB: 99,153,143
playcursor_color : Play cursor -- current RGB: 240,219,157
playcursor_drawmode : Play cursor fill mode -- blendmode 00028000
col_gridlines2 : Grid lines (start of measure) -- current RGB: 0,0,0
col_gridlines2dm : Grid lines (start of measure) - draw mode -- blendmode 0002c000
col_gridlines3 : Grid lines (start of beats) -- current RGB: 0,0,0
col_gridlines3dm : Grid lines (start of beats) - draw mode -- blendmode 00025400
col_gridlines : Grid lines (in between beats) -- current RGB: 0,0,0
col_gridlines1dm : Grid lines (in between beats) - draw mode -- blendmode 00025900
guideline_color : Editing guide line color -- current RGB: 75,158,155
guideline_drawmode : Editing guide fill mode -- blendmode 0002c000
region : Regions -- current RGB: 99,113,114
region_lane_bg : Region lane background -- current RGB: 46,46,46
region_lane_text : Region lane text -- current RGB: 191,196,197
marker : Markers -- current RGB: 99,99,99
marker_lane_bg : Marker lane background -- current RGB: 46,46,46
marker_lane_text : Marker lane text -- current RGB: 190,190,190
col_tsigmark : Time signature change marker -- current RGB: 15,18,17
ts_lane_bg : Time signature lane background -- current RGB: 51,51,51
ts_lane_text : Time signature lane text -- current RGB: 166,166,166
timesig_sel_bg : Time signature marker selected background -- current RGB: 161,76,76
col_routinghl1 : Routing matrix row highlight -- current RGB: 255,254,223
col_routinghl2 : Routing matrix column highlight -- current RGB: 189,189,255
col_routingact : Routing matrix input activity highlight -- current RGB: 155,255,155
col_vudoint : Theme has interlaced VU meters -- bool 00010000
col_vuclip : VU meter clip indicator -- current RGB: 188,108,90
col_vutop : VU meter top -- current RGB: 121,255,198
col_vumid : VU meter middle -- current RGB: 105,219,194
col_vubot : VU meter bottom -- current RGB: 91,190,192
col_vuintcol : VU meter interlace/edge color -- current RGB: 32,32,32
col_vumidi : VU meter midi activity -- current RGB: 255,223,121
col_vuind1 : VU (indicator) - no signal -- current RGB: 32,32,32
col_vuind2 : VU (indicator) - low signal -- current RGB: 19,40,19
col_vuind3 : VU (indicator) - med signal -- current RGB: 138,255,121
col_vuind4 : VU (indicator) - hot signal -- current RGB: 255,252,121
mcp_sends_normal : Sends text: normal -- current RGB: 192,192,192
mcp_sends_muted : Sends text: muted -- current RGB: 176,143,112
mcp_send_midihw : Sends text: MIDI hardware -- current RGB: 106,222,196
mcp_sends_levels : Sends level -- current RGB: 59,68,71
mcp_fx_normal : FX insert text: normal -- current RGB: 176,172,167
mcp_fx_bypassed : FX insert text: bypassed -- current RGB: 176,143,112
mcp_fx_offlined : FX insert text: offline -- current RGB: 217,135,135
mcp_fxparm_normal : FX parameter text: normal -- current RGB: 164,164,164
mcp_fxparm_bypassed : FX parameter text: bypassed -- current RGB: 212,163,135
mcp_fxparm_offlined : FX parameter text: offline -- current RGB: 217,135,135
tcp_list_scrollbar : List scrollbar (track panel) -- current RGB: 50,50,50
tcp_list_scrollbar_mode : List scrollbar (track panel) - draw mode -- blendmode 00028000
tcp_list_scrollbar_mouseover : List scrollbar mouseover (track panel) -- current RGB: 30,30,30
tcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (track panel) - draw mode -- blendmode 00028000
mcp_list_scrollbar : List scrollbar (mixer panel) -- current RGB: 141,141,141
mcp_list_scrollbar_mode : List scrollbar (mixer panel) - draw mode -- blendmode 00028000
mcp_list_scrollbar_mouseover : List scrollbar mouseover (mixer panel) -- current RGB: 125,192,175
mcp_list_scrollbar_mouseover_mode : List scrollbar mouseover (mixer panel) - draw mode -- blendmode 00028000
midi_rulerbg : MIDI editor ruler background -- current RGB: 51,51,51
midi_rulerfg : MIDI editor ruler text -- current RGB: 116,116,116
midi_grid2 : MIDI editor grid line (start of measure) -- current RGB: 255,255,255
midi_griddm2 : MIDI editor grid line (start of measure) - draw mode -- blendmode 00021e00
midi_grid3 : MIDI editor grid line (start of beats) -- current RGB: 0,0,0
midi_griddm3 : MIDI editor grid line (start of beats) - draw mode -- blendmode 00023300
midi_grid1 : MIDI editor grid line (between beats) -- current RGB: 0,0,0
midi_griddm1 : MIDI editor grid line (between beats) - draw mode -- blendmode 00021e00
midi_trackbg1 : MIDI editor background color (naturals) -- current RGB: 70,70,70
midi_trackbg2 : MIDI editor background color (sharps/flats) -- current RGB: 62,62,62
midi_trackbg_outer1 : MIDI editor background color, out of bounds (naturals) -- current RGB: 51,51,51
midi_trackbg_outer2 : MIDI editor background color, out of bounds (sharps/flats) -- current RGB: 54,54,54
midi_selpitch1 : MIDI editor background color, selected pitch (naturals) -- current RGB: 38,38,38
midi_selpitch2 : MIDI editor background color, selected pitch (sharps/flats) -- current RGB: 38,38,38
midi_selbg : MIDI editor time selection color -- current RGB: 255,255,255
midi_selbg_drawmode : MIDI editor time selection fill mode -- blendmode 00021001
midi_gridhc : MIDI editor CC horizontal center line -- current RGB: 0,0,0
midi_gridhcdm : MIDI editor CC horizontal center line - draw mode -- blendmode 00030000
midi_gridh : MIDI editor CC horizontal line -- current RGB: 0,0,0
midi_gridhdm : MIDI editor CC horizontal line - draw mode -- blendmode 00028000
midi_ccbut : MIDI editor CC lane add/remove buttons -- current RGB: 111,111,111
midi_ccbut_text : MIDI editor CC lane button text -- current RGB: 111,111,111
midi_ccbut_arrow : MIDI editor CC lane button arrow -- current RGB: 111,111,111
midioct : MIDI editor octave line color -- current RGB: 46,46,46
midi_inline_trackbg1 : MIDI inline background color (naturals) -- current RGB: 70,70,70
midi_inline_trackbg2 : MIDI inline background color (sharps/flats) -- current RGB: 62,62,62
midioct_inline : MIDI inline octave line color -- current RGB: 46,46,46
midi_endpt : MIDI editor end marker -- current RGB: 100,190,170
midi_notebg : MIDI editor note, unselected (midi_note_colormap overrides) -- current RGB: 0,0,0
midi_notefg : MIDI editor note, selected (midi_note_colormap overrides) -- current RGB: 255,255,255
midi_notemute : MIDI editor note, muted, unselected (midi_note_colormap overrides) -- current RGB: 129,61,61
midi_notemute_sel : MIDI editor note, muted, selected (midi_note_colormap overrides) -- current RGB: 255,121,121
midi_itemctl : MIDI editor note controls -- current RGB: 0,0,0
midi_ofsn : MIDI editor note (offscreen) -- current RGB: 73,73,73
midi_ofsnsel : MIDI editor note (offscreen, selected) -- current RGB: 100,190,170
midi_editcurs : MIDI editor cursor -- current RGB: 99,153,143
midi_pkey1 : MIDI piano key color (naturals background, sharps/flats text) -- current RGB: 255,255,255
midi_pkey2 : MIDI piano key color (sharps/flats background, naturals text) -- current RGB: 0,0,0
midi_pkey3 : MIDI piano key color (selected) -- current RGB: 93,93,93
midi_noteon_flash : MIDI piano key note-on flash -- current RGB: 64,30,30
midi_leftbg : MIDI piano pane background -- current RGB: 51,51,51
midifont_col_light_unsel : MIDI editor note text and control color, unselected (light) -- current RGB: 255,255,255
midifont_col_dark_unsel : MIDI editor note text and control color, unselected (dark) -- current RGB: 0,0,0
midifont_mode_unsel : MIDI editor note text and control mode, unselected -- blendmode 00028000
midifont_col_light : MIDI editor note text and control color (light) -- current RGB: 255,255,255
midifont_col_dark : MIDI editor note text and control color (dark) -- current RGB: 0,0,0
midifont_mode : MIDI editor note text and control mode -- blendmode 0002c000
score_bg : MIDI notation editor background -- current RGB: 255,255,255
score_fg : MIDI notation editor staff/notation/text -- current RGB: 0,0,0
score_sel : MIDI notation editor selected staff/notation/text -- current RGB: 121,121,255
score_timesel : MIDI notation editor time selection -- current RGB: 255,254,240
score_loop : MIDI notation editor loop points, selected pitch -- current RGB: 255,221,121
midieditorlist_bg : MIDI list editor background -- current RGB: 84,84,84
midieditorlist_fg : MIDI list editor text -- current RGB: 225,225,225
midieditorlist_grid : MIDI list editor grid lines -- current RGB: 175,177,178
midieditorlist_selbg : MIDI list editor selected row -- current RGB: 240,241,241
midieditorlist_selfg : MIDI list editor selected text -- current RGB: 43,44,44
midieditorlist_seliabg : MIDI list editor selected row (inactive) -- current RGB: 241,241,241
midieditorlist_seliafg : MIDI list editor selected text (inactive) -- current RGB: 0,0,0
midieditorlist_bg2 : MIDI list editor background (secondary) -- current RGB: 198,198,198
midieditorlist_fg2 : MIDI list editor text (secondary) -- current RGB: 69,70,70
midieditorlist_selbg2 : MIDI list editor selected row (secondary) -- current RGB: 217,217,218
midieditorlist_selfg2 : MIDI list editor selected text (secondary) -- current RGB: 76,77,77
col_explorer_sel : Media explorer selection -- current RGB: 255,255,255
col_explorer_seldm : Media explorer selection mode -- blendmode 00026600
col_explorer_seledge : Media explorer selection edge -- current RGB: 202,202,202
explorer_grid : Media explorer grid, markers -- current RGB: 255,255,255
explorer_pitchtext : Media explorer pitch detection text -- current RGB: 255,255,255
docker_shadow : Tab control shadow -- current RGB: 51,51,51
docker_selface : Tab control selected tab -- current RGB: 51,51,51
docker_unselface : Tab control unselected tab -- current RGB: 40,40,40
docker_text : Tab control text -- current RGB: 149,149,149
docker_text_sel : Tab control text selected tab -- current RGB: 178,178,178
docker_bg : Tab control background -- current RGB: 29,29,29
windowtab_bg : Tab control background in windows -- current RGB: 60,60,60
auto_item_unsel : Envelope: Unselected automation item -- current RGB: 96,96,96
col_env1 : Envelope: Volume (pre-FX) -- current RGB: 128,180,173
col_env2 : Envelope: Volume -- current RGB: 128,180,173
env_trim_vol : Envelope: Trim Volume -- current RGB: 128,180,173
col_env3 : Envelope: Pan (pre-FX) -- current RGB: 254,190,126
col_env4 : Envelope: Pan -- current RGB: 255,198,121
env_track_mute : Envelope: Mute -- current RGB: 229,151,150
col_env5 : Envelope: Master playrate -- current RGB: 128,180,173
col_env6 : Envelope: Master tempo -- current RGB: 134,156,192
col_env7 : Envelope: Width / Send volume -- current RGB: 189,187,228
col_env8 : Envelope: Send pan -- current RGB: 254,190,126
col_env9 : Envelope: Send volume 2 -- current RGB: 128,180,173
col_env10 : Envelope: Send pan 2 -- current RGB: 254,190,126
env_sends_mute : Envelope: Send mute -- current RGB: 220,135,138
col_env11 : Envelope: Audio hardware output volume -- current RGB: 128,180,173
col_env12 : Envelope: Audio hardware output pan -- current RGB: 251,177,126
col_env13 : Envelope: FX parameter 1 -- current RGB: 108,151,145
col_env14 : Envelope: FX parameter 2 -- current RGB: 149,173,204
col_env15 : Envelope: FX parameter 3 -- current RGB: 254,190,126
col_env16 : Envelope: FX parameter 4 -- current RGB: 192,186,228
env_item_vol : Envelope: Item take volume -- current RGB: 128,180,173
env_item_pan : Envelope: Item take pan -- current RGB: 254,190,126
env_item_mute : Envelope: Item take mute -- current RGB: 220,135,138
env_item_pitch : Envelope: Item take pitch -- current RGB: 183,149,201
wiring_grid2 : Wiring: Background -- current RGB: 46,46,46
wiring_grid : Wiring: Background grid lines -- current RGB: 51,51,51
wiring_border : Wiring: Box border -- current RGB: 154,154,154
wiring_tbg : Wiring: Box background -- current RGB: 38,38,38
wiring_ticon : Wiring: Box foreground -- current RGB: 205,205,205
wiring_recbg : Wiring: Record section background -- current RGB: 101,88,88
wiring_recitem : Wiring: Record section foreground -- current RGB: 63,47,47
wiring_media : Wiring: Media -- current RGB: 47,64,47
wiring_recv : Wiring: Receives -- current RGB: 92,92,92
wiring_send : Wiring: Sends -- current RGB: 92,92,92
wiring_fader : Wiring: Fader -- current RGB: 159,159,193
wiring_parent : Wiring: Master/Parent -- current RGB: 95,128,129
wiring_parentwire_border : Wiring: Master/Parent wire border -- current RGB: 100,100,100
wiring_parentwire_master : Wiring: Master/Parent to master wire -- current RGB: 193,193,193
wiring_parentwire_folder : Wiring: Master/Parent to parent folder wire -- current RGB: 129,129,129
wiring_pin_normal : Wiring: Pins normal -- current RGB: 193,193,193
wiring_pin_connected : Wiring: Pins connected -- current RGB: 119,145,119
wiring_pin_disconnected : Wiring: Pins disconnected -- current RGB: 64,47,47
wiring_horz_col : Wiring: Horizontal pin connections -- current RGB: 72,72,72
wiring_sendwire : Wiring: Send hanging wire -- current RGB: 129,129,129
wiring_hwoutwire : Wiring: Hardware output wire -- current RGB: 129,129,129
wiring_recinputwire : Wiring: Record input wire -- current RGB: 255,189,189
wiring_hwout : Wiring: System hardware outputs -- current RGB: 64,64,64
wiring_recinput : Wiring: System record inputs -- current RGB: 129,95,95
wiring_activity : Wiring: Activity lights -- current RGB: 155,255,155
autogroup : Automatic track group -- current RGB: 255,255,255
group_0 : Group #1 -- current RGB: 255,121,121
group_1 : Group #2 -- current RGB: 121,255,121
group_2 : Group #3 -- current RGB: 121,121,255
group_3 : Group #4 -- current RGB: 255,252,121
group_4 : Group #5 -- current RGB: 255,0,255
group_5 : Group #6 -- current RGB: 121,252,255
group_6 : Group #7 -- current RGB: 193,92,92
group_7 : Group #8 -- current RGB: 92,193,92
group_8 : Group #9 -- current RGB: 92,92,193
group_9 : Group #10 -- current RGB: 193,191,92
group_10 : Group #11 -- current RGB: 191,92,193
group_11 : Group #12 -- current RGB: 92,191,193
group_12 : Group #13 -- current RGB: 129,61,61
group_13 : Group #14 -- current RGB: 61,129,61
group_14 : Group #15 -- current RGB: 61,61,129
group_15 : Group #16 -- current RGB: 129,127,61
group_16 : Group #17 -- current RGB: 127,61,129
group_17 : Group #18 -- current RGB: 61,127,129
group_18 : Group #19 -- current RGB: 193,158,92
group_19 : Group #20 -- current RGB: 92,193,158
group_20 : Group #21 -- current RGB: 92,158,193
group_21 : Group #22 -- current RGB: 193,158,92
group_22 : Group #23 -- current RGB: 158,92,193
group_23 : Group #24 -- current RGB: 158,193,92
group_24 : Group #25 -- current RGB: 64,30,30
group_25 : Group #26 -- current RGB: 30,64,30
group_26 : Group #27 -- current RGB: 30,30,64
group_27 : Group #28 -- current RGB: 64,64,30
group_28 : Group #29 -- current RGB: 64,30,64
group_29 : Group #30 -- current RGB: 30,64,64
group_30 : Group #31 -- current RGB: 64,30,64
group_31 : Group #32 -- current RGB: 30,64,64
group_32 : Group #33 -- current RGB: 189,253,255
group_33 : Group #34 -- current RGB: 127,61,129
group_34 : Group #35 -- current RGB: 122,255,188
group_35 : Group #36 -- current RGB: 188,121,255
group_36 : Group #37 -- current RGB: 122,252,255
group_37 : Group #38 -- current RGB: 61,61,129
group_38 : Group #39 -- current RGB: 189,255,238
group_39 : Group #40 -- current RGB: 128,94,129
group_40 : Group #41 -- current RGB: 138,255,187
group_41 : Group #42 -- current RGB: 174,140,225
group_42 : Group #43 -- current RGB: 138,255,238
group_43 : Group #44 -- current RGB: 78,94,129
group_44 : Group #45 -- current RGB: 189,255,222
group_45 : Group #46 -- current RGB: 129,128,129
group_46 : Group #47 -- current RGB: 155,255,188
group_47 : Group #48 -- current RGB: 159,159,193
group_48 : Group #49 -- current RGB: 155,255,222
group_49 : Group #50 -- current RGB: 95,127,129
group_50 : Group #51 -- current RGB: 174,174,225
group_51 : Group #52 -- current RGB: 94,94,129
group_52 : Group #53 -- current RGB: 78,127,129
group_53 : Group #54 -- current RGB: 174,174,225
group_54 : Group #55 -- current RGB: 138,255,222
group_55 : Group #56 -- current RGB: 159,125,193
group_56 : Group #57 -- current RGB: 189,255,205
group_57 : Group #58 -- current RGB: 159,192,159
group_58 : Group #59 -- current RGB: 172,255,189
group_59 : Group #60 -- current RGB: 159,192,175
group_60 : Group #61 -- current RGB: 172,255,205
group_61 : Group #62 -- current RGB: 142,192,158
group_62 : Group #63 -- current RGB: 172,255,205
group_63 : Group #64 -- current RGB: 142,192,158



boolean reaper.SetToggleCommandState(integer section_id, integer command_id, integer state)

Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.


reaper.SetTrackAutomationMode(MediaTrack tr, integer mode)


reaper.SetTrackColor(MediaTrack track, integer color)

Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR


boolean reaper.SetTrackMIDILyrics(MediaTrack track, integer flag, string str)

Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1 "). See GetTrackMIDILyrics


boolean reaper.SetTrackMIDINoteName(integer track, integer pitch, integer chan, string name)

channel < 0 assigns these note names to all channels.


boolean reaper.SetTrackMIDINoteNameEx(ReaProject proj, MediaTrack track, integer pitch, integer chan, string name)

channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.


reaper.SetTrackSelected(MediaTrack track, boolean selected)


boolean reaper.SetTrackSendInfo_Value(MediaTrack tr, integer category, integer sendidx, string parmname, number newvalue)

Set send/receive/hardware output numerical-value attributes, return true on success.
category is <0 for receives, 0=sends, >0 for hardware outputs
parameter names:
B_MUTE : bool *
B_PHASE : bool * : true to flip phase
B_MONO : bool *
D_VOL : double * : 1.0 = +0dB etc
D_PAN : double * : -1..+1
D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
I_SRCCHAN : int * : index,&1024=mono, -1 for none
I_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute
I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan
See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.


boolean reaper.SetTrackSendUIPan(MediaTrack track, integer send_idx, number pan, integer isend)

send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.


boolean reaper.SetTrackSendUIVol(MediaTrack track, integer send_idx, number vol, integer isend)

send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.


boolean reaper.SetTrackStateChunk(MediaTrack track, string str, boolean isundo)

Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.


integer reaper.SetTrackUIInputMonitor(MediaTrack track, integer monitor, integer igngroupflags)

monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


integer reaper.SetTrackUIMute(MediaTrack track, integer mute, integer igngroupflags)

mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


number reaper.SetTrackUIPan(MediaTrack track, number pan, boolean relative, boolean done, integer igngroupflags)

igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


integer reaper.SetTrackUIPolarity(MediaTrack track, integer polarity, integer igngroupflags)

polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


integer reaper.SetTrackUIRecArm(MediaTrack track, integer recarm, integer igngroupflags)

recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


integer reaper.SetTrackUISolo(MediaTrack track, integer solo, integer igngroupflags)

solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


number reaper.SetTrackUIVolume(MediaTrack track, number volume, boolean relative, boolean done, integer igngroupflags)

igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


number reaper.SetTrackUIWidth(MediaTrack track, number width, boolean relative, boolean done, integer igngroupflags)

igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging


reaper.ShowActionList(KbdSectionInfo section, HWND callerWnd)


reaper.ShowConsoleMsg(string msg)

Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. See ClearConsole


integer reaper.ShowMessageBox(string msg, string title, integer type)

type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO


reaper.ShowPopupMenu(string name, integer x, integer y, HWND hwndParent, identifier ctx, integer ctx2, integer ctx3)

shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)


number reaper.SLIDER2DB(number y)


number reaper.SnapToGrid(ReaProject project, number time_pos)


reaper.SoloAllTracks(integer solo)

solo=2 for SIP


HWND reaper.Splash_GetWnd()

gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.


MediaItem reaper.SplitMediaItem(MediaItem item, number position)

the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)


string gGUID = reaper.stringToGuid(string str, string gGUID)


reaper.StuffMIDIMessage(integer mode, integer msg1, integer msg2, integer msg3)

Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.


integer reaper.TakeFX_AddByName(MediaItem_Take take, string fxname, integer instantiate)

Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate.


reaper.TakeFX_CopyToTake(MediaItem_Take src_take, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)

Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder.


reaper.TakeFX_CopyToTrack(MediaItem_Take src_take, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)

Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.


boolean reaper.TakeFX_Delete(MediaItem_Take take, integer fx)

Remove a FX from take chain (returns true on success)


boolean reaper.TakeFX_EndParamEdit(MediaItem_Take take, integer fx, integer param)


boolean retval, string buf = reaper.TakeFX_FormatParamValue(MediaItem_Take take, integer fx, integer param, number val)

Note: only works with FX that support Cockos VST extensions.


boolean retval, string buf = reaper.TakeFX_FormatParamValueNormalized(MediaItem_Take take, integer fx, integer param, number value, string buf)

Note: only works with FX that support Cockos VST extensions.


integer reaper.TakeFX_GetChainVisible(MediaItem_Take take)

returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected


integer reaper.TakeFX_GetCount(MediaItem_Take take)


boolean reaper.TakeFX_GetEnabled(MediaItem_Take take, integer fx)

See TakeFX_SetEnabled


TrackEnvelope reaper.TakeFX_GetEnvelope(MediaItem_Take take, integer fxindex, integer parameterindex, boolean create)

Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.


HWND reaper.TakeFX_GetFloatingWindow(MediaItem_Take take, integer index)

returns HWND of floating window for effect index, if any


boolean retval, string buf = reaper.TakeFX_GetFormattedParamValue(MediaItem_Take take, integer fx, integer param)


string GUID = reaper.TakeFX_GetFXGUID(MediaItem_Take take, integer fx)


boolean retval, string buf = reaper.TakeFX_GetFXName(MediaItem_Take take, integer fx)


integer retval, integer inputPins, integer outputPins = reaper.TakeFX_GetIOSize(MediaItem_Take take, integer fx)

Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error


boolean retval, string buf = reaper.TakeFX_GetNamedConfigParm(MediaItem_Take take, integer fx, string parmname)

gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm


integer reaper.TakeFX_GetNumParams(MediaItem_Take take, integer fx)


boolean reaper.TakeFX_GetOffline(MediaItem_Take take, integer fx)

See TakeFX_SetOffline


boolean reaper.TakeFX_GetOpen(MediaItem_Take take, integer fx)

Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen


number retval, number minval, number maxval = reaper.TakeFX_GetParam(MediaItem_Take take, integer fx, integer param)


boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TakeFX_GetParameterStepSizes(MediaItem_Take take, integer fx, integer param)


number retval, number minval, number maxval, number midval = reaper.TakeFX_GetParamEx(MediaItem_Take take, integer fx, integer param)


integer reaper.TakeFX_GetParamFromIdent(MediaItem_Take take, integer fx, string ident_str)

gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown.


boolean retval, string buf = reaper.TakeFX_GetParamIdent(MediaItem_Take take, integer fx, integer param)

gets an identifying string for the parameter


boolean retval, string buf = reaper.TakeFX_GetParamName(MediaItem_Take take, integer fx, integer param)


number reaper.TakeFX_GetParamNormalized(MediaItem_Take take, integer fx, integer param)


integer retval, integer high32 = reaper.TakeFX_GetPinMappings(MediaItem_Take take, integer fx, integer isoutput, integer pin)

gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits


boolean retval, string presetname = reaper.TakeFX_GetPreset(MediaItem_Take take, integer fx)

Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.


integer retval, integer numberOfPresets = reaper.TakeFX_GetPresetIndex(MediaItem_Take take, integer fx)

Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex


string fn = reaper.TakeFX_GetUserPresetFilename(MediaItem_Take take, integer fx)


boolean reaper.TakeFX_NavigatePresets(MediaItem_Take take, integer fx, integer presetmove)

presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.


reaper.TakeFX_SetEnabled(MediaItem_Take take, integer fx, boolean enabled)

See TakeFX_GetEnabled


boolean reaper.TakeFX_SetNamedConfigParm(MediaItem_Take take, integer fx, string parmname, string value)

gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm


reaper.TakeFX_SetOffline(MediaItem_Take take, integer fx, boolean offline)

See TakeFX_GetOffline


reaper.TakeFX_SetOpen(MediaItem_Take take, integer fx, boolean open)

Open this FX UI. See TakeFX_GetOpen


boolean reaper.TakeFX_SetParam(MediaItem_Take take, integer fx, integer param, number val)


boolean reaper.TakeFX_SetParamNormalized(MediaItem_Take take, integer fx, integer param, number value)


boolean reaper.TakeFX_SetPinMappings(MediaItem_Take take, integer fx, integer isoutput, integer pin, integer low32bits, integer hi32bits)

sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)


boolean reaper.TakeFX_SetPreset(MediaItem_Take take, integer fx, string presetname)

Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.


boolean reaper.TakeFX_SetPresetByIndex(MediaItem_Take take, integer fx, integer idx)

Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.


reaper.TakeFX_Show(MediaItem_Take take, integer index, integer showFlag)

showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)


boolean reaper.TakeIsMIDI(MediaItem_Take take)

Returns true if the active take contains MIDI.


boolean retval, string name = reaper.ThemeLayout_GetLayout(string section, integer idx)

Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.


string retval, optional string desc, optional integer value, optional integer defValue, optional integer minValue, optional integer maxValue = reaper.ThemeLayout_GetParameter(integer wp)

returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.


reaper.ThemeLayout_RefreshAll()

Refreshes all layouts


boolean reaper.ThemeLayout_SetLayout(string section, string layout)

Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.


boolean reaper.ThemeLayout_SetParameter(integer wp, integer value, boolean persist)

sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.


number reaper.time_precise()

Gets a precise system timestamp in seconds


number reaper.TimeMap2_beatsToTime(ReaProject proj, number tpos, optional integer measuresIn)

convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.


number reaper.TimeMap2_GetDividedBpmAtTime(ReaProject proj, number time)

get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)


number reaper.TimeMap2_GetNextChangeTime(ReaProject proj, number time)

when does the next time map (tempo or time sig) change occur


number reaper.TimeMap2_QNToTime(ReaProject proj, number qn)

converts project QN position to time.


number retval, optional integer measures, optional integer cml, optional number fullbeats, optional integer cdenom = reaper.TimeMap2_timeToBeats(ReaProject proj, number tpos)

convert a time into beats.
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).
if cdenom is non-NULL, will be set to the current time signature denominator.


number reaper.TimeMap2_timeToQN(ReaProject proj, number tpos)

converts project time position to QN position.


number retval, boolean dropFrame = reaper.TimeMap_curFrameRate(ReaProject proj)

Gets project framerate, and optionally whether it is drop-frame timecode


number reaper.TimeMap_GetDividedBpmAtTime(number time)

get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)


number retval, number qn_start, number qn_end, integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetMeasureInfo(ReaProject proj, integer measure)

Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.


integer retval, string pattern = reaper.TimeMap_GetMetronomePattern(ReaProject proj, number time, string pattern)

Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be "1221222". The length of the string is the time signature numerator, and the function returns the time signature denominator.


integer timesig_num, integer timesig_denom, number tempo = reaper.TimeMap_GetTimeSigAtTime(ReaProject proj, number time)

get the effective time signature and tempo


integer retval, optional number qnMeasureStart, optional number qnMeasureEnd = reaper.TimeMap_QNToMeasures(ReaProject proj, number qn)

Find which measure the given QN position falls in.


number reaper.TimeMap_QNToTime(number qn)

converts project QN position to time.


number reaper.TimeMap_QNToTime_abs(ReaProject proj, number qn)

Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime


number reaper.TimeMap_timeToQN(number tpos)

converts project QN position to time.


number reaper.TimeMap_timeToQN_abs(ReaProject proj, number tpos)

Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN


boolean reaper.ToggleTrackSendUIMute(MediaTrack track, integer send_idx)

send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.


number reaper.Track_GetPeakHoldDB(MediaTrack track, integer channel, boolean clear)

Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.


number reaper.Track_GetPeakInfo(MediaTrack track, integer channel)

Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.


reaper.TrackCtl_SetToolTip(string fmt, integer xpos, integer ypos, boolean topmost)

displays tooltip at location, or removes if empty string


integer reaper.TrackFX_AddByName(MediaTrack track, string fxname, boolean recFX, integer instantiate)

Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success.


reaper.TrackFX_CopyToTake(MediaTrack src_track, integer src_fx, MediaItem_Take dest_take, integer dest_fx, boolean is_move)

Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.


reaper.TrackFX_CopyToTrack(MediaTrack src_track, integer src_fx, MediaTrack dest_track, integer dest_fx, boolean is_move)

Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX.


boolean reaper.TrackFX_Delete(MediaTrack track, integer fx)

Remove a FX from track chain (returns true on success)


boolean reaper.TrackFX_EndParamEdit(MediaTrack track, integer fx, integer param)


boolean retval, string buf = reaper.TrackFX_FormatParamValue(MediaTrack track, integer fx, integer param, number val)

Note: only works with FX that support Cockos VST extensions.


boolean retval, string buf = reaper.TrackFX_FormatParamValueNormalized(MediaTrack track, integer fx, integer param, number value, string buf)

Note: only works with FX that support Cockos VST extensions.


integer reaper.TrackFX_GetByName(MediaTrack track, string fxname, boolean instantiate)

Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.


integer reaper.TrackFX_GetChainVisible(MediaTrack track)

returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected


integer reaper.TrackFX_GetCount(MediaTrack track)


boolean reaper.TrackFX_GetEnabled(MediaTrack track, integer fx)

See TrackFX_SetEnabled


integer reaper.TrackFX_GetEQ(MediaTrack track, boolean instantiate)

Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.


boolean reaper.TrackFX_GetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx)

Returns true if the EQ band is enabled.
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.

See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.


boolean retval, integer bandtype, integer bandidx, integer paramtype, number normval = reaper.TrackFX_GetEQParam(MediaTrack track, integer fxidx, integer paramidx)

Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.


HWND reaper.TrackFX_GetFloatingWindow(MediaTrack track, integer index)

returns HWND of floating window for effect index, if any


boolean retval, string buf = reaper.TrackFX_GetFormattedParamValue(MediaTrack track, integer fx, integer param)


string GUID = reaper.TrackFX_GetFXGUID(MediaTrack track, integer fx)


boolean retval, string buf = reaper.TrackFX_GetFXName(MediaTrack track, integer fx)


integer reaper.TrackFX_GetInstrument(MediaTrack track)

Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.


integer retval, integer inputPins, integer outputPins = reaper.TrackFX_GetIOSize(MediaTrack track, integer fx)

Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error


boolean retval, string buf = reaper.TrackFX_GetNamedConfigParm(MediaTrack track, integer fx, string parmname)

gets plug-in specific named configuration value (returns true on success).

Supported values for read:
pdc : PDC latency
in_pin_X : name of input pin X
out_pin_X : name of output pin X
fx_type : type string
fx_ident : type-specific identifier
fx_name : pre-aliased name
GainReduction_dB : [ReaComp + other supported compressors]
vst_chunk[_program] : base64-encoded VST-specific chunk.
clap_chunk : base64-encoded CLAP-specific chunk.
param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
param.X.mod.[active,baseline,visible] : parameter module global settings
param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]
NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
MODE, RSMODE : [RS5k] general mode, resample mode
VIDEO_CODE : [video processor] code
force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)



integer reaper.TrackFX_GetNumParams(MediaTrack track, integer fx)


boolean reaper.TrackFX_GetOffline(MediaTrack track, integer fx)

See TrackFX_SetOffline


boolean reaper.TrackFX_GetOpen(MediaTrack track, integer fx)

Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen


number retval, number minval, number maxval = reaper.TrackFX_GetParam(MediaTrack track, integer fx, integer param)


boolean retval, number step, number smallstep, number largestep, boolean istoggle = reaper.TrackFX_GetParameterStepSizes(MediaTrack track, integer fx, integer param)


number retval, number minval, number maxval, number midval = reaper.TrackFX_GetParamEx(MediaTrack track, integer fx, integer param)


integer reaper.TrackFX_GetParamFromIdent(MediaTrack track, integer fx, string ident_str)

gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown.


boolean retval, string buf = reaper.TrackFX_GetParamIdent(MediaTrack track, integer fx, integer param)

gets an identifying string for the parameter


boolean retval, string buf = reaper.TrackFX_GetParamName(MediaTrack track, integer fx, integer param)


number reaper.TrackFX_GetParamNormalized(MediaTrack track, integer fx, integer param)


integer retval, integer high32 = reaper.TrackFX_GetPinMappings(MediaTrack tr, integer fx, integer isoutput, integer pin)

gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits


boolean retval, string presetname = reaper.TrackFX_GetPreset(MediaTrack track, integer fx)

Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.


integer retval, integer numberOfPresets = reaper.TrackFX_GetPresetIndex(MediaTrack track, integer fx)

Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex


integer reaper.TrackFX_GetRecChainVisible(MediaTrack track)

returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected


integer reaper.TrackFX_GetRecCount(MediaTrack track)

returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.


string fn = reaper.TrackFX_GetUserPresetFilename(MediaTrack track, integer fx)


boolean reaper.TrackFX_NavigatePresets(MediaTrack track, integer fx, integer presetmove)

presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.


reaper.TrackFX_SetEnabled(MediaTrack track, integer fx, boolean enabled)

See TrackFX_GetEnabled


boolean reaper.TrackFX_SetEQBandEnabled(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, boolean enable)

Enable or disable a ReaEQ band.
Returns false if track/fxidx is not ReaEQ.
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.

See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.


boolean reaper.TrackFX_SetEQParam(MediaTrack track, integer fxidx, integer bandtype, integer bandidx, integer paramtype, number val, boolean isnorm)

Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.


boolean reaper.TrackFX_SetNamedConfigParm(MediaTrack track, integer fx, string parmname, string value)

sets plug-in specific named configuration value (returns true on success).

Support values for write:
vst_chunk[_program] : base64-encoded VST-specific chunk.
clap_chunk : base64-encoded CLAP-specific chunk.
param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
param.X.mod.[active,baseline,visible] : parameter module global settings
param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]
NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
MODE, RSMODE : [RS5k] general mode, resample mode
VIDEO_CODE : [video processor] code
force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)



reaper.TrackFX_SetOffline(MediaTrack track, integer fx, boolean offline)

See TrackFX_GetOffline


reaper.TrackFX_SetOpen(MediaTrack track, integer fx, boolean open)

Open this FX UI. See TrackFX_GetOpen


boolean reaper.TrackFX_SetParam(MediaTrack track, integer fx, integer param, number val)


boolean reaper.TrackFX_SetParamNormalized(MediaTrack track, integer fx, integer param, number value)


boolean reaper.TrackFX_SetPinMappings(MediaTrack tr, integer fx, integer isoutput, integer pin, integer low32bits, integer hi32bits)

sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)


boolean reaper.TrackFX_SetPreset(MediaTrack track, integer fx, string presetname)

Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.


boolean reaper.TrackFX_SetPresetByIndex(MediaTrack track, integer fx, integer idx)

Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.


reaper.TrackFX_Show(MediaTrack track, integer index, integer showFlag)

showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)


reaper.TrackList_AdjustWindows(boolean isMinor)


reaper.TrackList_UpdateAllExternalSurfaces()


reaper.Undo_BeginBlock()

call to start a new block


reaper.Undo_BeginBlock2(ReaProject proj)

call to start a new block


string reaper.Undo_CanRedo2(ReaProject proj)

returns string of next action,if able,NULL if not


string reaper.Undo_CanUndo2(ReaProject proj)

returns string of last action,if able,NULL if not


integer reaper.Undo_DoRedo2(ReaProject proj)

nonzero if success


integer reaper.Undo_DoUndo2(ReaProject proj)

nonzero if success


reaper.Undo_EndBlock(string descchange, integer extraflags)

call to end the block,with extra flags if any,and a description


reaper.Undo_EndBlock2(ReaProject proj, string descchange, integer extraflags)

call to end the block,with extra flags if any,and a description


reaper.Undo_OnStateChange(string descchange)

limited state change to items


reaper.Undo_OnStateChange2(ReaProject proj, string descchange)

limited state change to items


reaper.Undo_OnStateChange_Item(ReaProject proj, string name, MediaItem item)


reaper.Undo_OnStateChangeEx(string descchange, integer whichStates, integer trackparm)

trackparm=-1 by default,or if updating one fx chain,you can specify track index


reaper.Undo_OnStateChangeEx2(ReaProject proj, string descchange, integer whichStates, integer trackparm)

trackparm=-1 by default,or if updating one fx chain,you can specify track index


reaper.UpdateArrange()

Redraw the arrange view


reaper.UpdateItemInProject(MediaItem item)


reaper.UpdateTimeline()

Redraw the arrange view and ruler


boolean reaper.ValidatePtr(identifier pointer, string ctypename)

see ValidatePtr2


boolean reaper.ValidatePtr2(ReaProject proj, identifier pointer, string ctypename)

Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.


reaper.ViewPrefs(integer page, string pageByName)

Opens the prefs to a page, use pageByName if page is 0.


BR_Envelope reaper.BR_EnvAlloc(TrackEnvelope envelope, boolean takeEnvelopesUseProjectTime)

[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.
takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.

For further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.


integer reaper.BR_EnvCountPoints(BR_Envelope envelope)

[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.


boolean reaper.BR_EnvDeletePoint(BR_Envelope envelope, integer id)

[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.


integer reaper.BR_EnvFind(BR_Envelope envelope, number position, number delta)

[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.


integer reaper.BR_EnvFindNext(BR_Envelope envelope, number position)

[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.


integer reaper.BR_EnvFindPrevious(BR_Envelope envelope, number position)

[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.


boolean reaper.BR_EnvFree(BR_Envelope envelope, boolean commit)

[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.


MediaItem_Take reaper.BR_EnvGetParentTake(BR_Envelope envelope)

[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.


MediaTrack reaper.BR_EnvGetParentTrack(BR_Envelope envelope)

[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.


boolean retval, number position, number value, integer shape, boolean selected, number bezier = reaper.BR_EnvGetPoint(BR_Envelope envelope, integer id)

[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.


boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, number minValue, number maxValue, number centerValue, integer type, boolean faderScaling, optional integer automationItemsOptions = reaper.BR_EnvGetProperties(BR_Envelope envelope)

[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.

active: true if envelope is active
visible: true if envelope is visible
armed: true if envelope is armed
inLane: true if envelope has it's own envelope lane
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels
defaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier
minValue: minimum envelope value
maxValue: maximum envelope value
type: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter
faderScaling: true if envelope uses fader scaling
automationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side, &2->attach to underl. env. on both sides, &4: bypass underl. env.


boolean reaper.BR_EnvSetPoint(BR_Envelope envelope, integer id, number position, number value, integer shape, boolean selected, number bezier)

[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.
Returns true on success.


reaper.BR_EnvSetProperties(BR_Envelope envelope, boolean active, boolean visible, boolean armed, boolean inLane, integer laneHeight, integer defaultShape, boolean faderScaling, optional integer automationItemsOptionsIn)

[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.
Setting automationItemsOptions requires REAPER 5.979+.


reaper.BR_EnvSortPoints(BR_Envelope envelope)

[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.


number reaper.BR_EnvValueAtPos(BR_Envelope envelope, number position)

[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.


number startTime, number endTime = reaper.BR_GetArrangeView(ReaProject proj)

[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.


number reaper.BR_GetClosestGridDivision(number position)

[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.


string themePath, string themeName = reaper.BR_GetCurrentTheme()

[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension


MediaItem reaper.BR_GetMediaItemByGUID(ReaProject proj, string guidStringIn)

[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.


string guidString = reaper.BR_GetMediaItemGUID(MediaItem item)

[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.


boolean retval, string image, integer imageFlags = reaper.BR_GetMediaItemImageResource(MediaItem item)

[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.


string guidString = reaper.BR_GetMediaItemTakeGUID(MediaItem_Take take)

[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.


boolean retval, boolean section, number start, number length, number fade, boolean reverse = reaper.BR_GetMediaSourceProperties(MediaItem_Take take)

[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).
To set source properties, see BR_SetMediaSourceProperties.


MediaTrack reaper.BR_GetMediaTrackByGUID(ReaProject proj, string guidStringIn)

[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String.


integer reaper.BR_GetMediaTrackFreezeCount(MediaTrack track)

[BR] Get media track freeze count (if track isn't frozen at all, returns 0).


string guidString = reaper.BR_GetMediaTrackGUID(MediaTrack track)

[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.


string mcpLayoutName, string tcpLayoutName = reaper.BR_GetMediaTrackLayouts(MediaTrack track)

[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ("") means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.


TrackEnvelope reaper.BR_GetMediaTrackSendInfo_Envelope(MediaTrack track, integer category, integer sendidx, integer envelopeType)

[BR] Get track envelope for send/receive/hardware output.

category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)

Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.


MediaTrack reaper.BR_GetMediaTrackSendInfo_Track(MediaTrack track, integer category, integer sendidx, integer trackType)

[BR] Get source or destination media track for send/receive.

category is <0 for receives, 0=sends
sendidx is zero-based (see GetTrackNumSends to count track sends/receives)
trackType determines which track is returned (0=source track, 1=destination track)

Note: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.


number reaper.BR_GetMidiSourceLenPPQ(MediaItem_Take take)

[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.


boolean retval, string guidString = reaper.BR_GetMidiTakePoolGUID(MediaItem_Take take)

[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.


boolean retval, boolean ignoreProjTempo, number bpm, integer num, integer den = reaper.BR_GetMidiTakeTempoInfo(MediaItem_Take take)

[BR] Get "ignore project tempo" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.


string window, string segment, string details = reaper.BR_GetMouseCursorContext()

[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.

To get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track

Window	Segment	Details
unknown	""	""
ruler	region_lane	""
marker_lane	""
tempo_lane	""
timeline	""
transport	""	""
tcp	track	""
envelope	""
empty	""
mcp	track	""
empty	""
arrange	track	empty,
item, item_stretch_marker,
env_point, env_segment
envelope	empty, env_point, env_segment
empty	""
midi_editor	unknown	""
ruler	""
piano	""
notes	""
cc_lane	cc_selector, cc_lane



TrackEnvelope retval, boolean takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()

[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.


MediaItem reaper.BR_GetMouseCursorContext_Item()

[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.


identifier retval, boolean inlineEditor, integer noteRow, integer ccLane, integer ccLaneVal, integer ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()

[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.

inlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)
noteRow: note row or piano key under mouse cursor (0-127)
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)
ccLaneId: lane position, counting from the top (0 based)

Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1


number reaper.BR_GetMouseCursorContext_Position()

[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.


integer reaper.BR_GetMouseCursorContext_StretchMarker()

[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.


MediaItem_Take reaper.BR_GetMouseCursorContext_Take()

[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.


MediaTrack reaper.BR_GetMouseCursorContext_Track()

[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.


number reaper.BR_GetNextGridDivision(number position)

[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.


number reaper.BR_GetPrevGridDivision(number position)

[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.


number reaper.BR_GetSetTrackSendInfo(MediaTrack track, integer category, integer sendidx, string parmname, boolean setNewValue, number newValue)

[BR] Get or set send attributes.

category is <0 for receives, 0=sends, >0 for hardware outputs
sendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)
To set attribute, pass setNewValue as true

List of possible parameters:
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)
D_VOL : send volume (1.0=+0dB etc...)
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)
I_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)
I_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI

Note: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.


integer reaper.BR_GetTakeFXCount(MediaItem_Take take)

[BR] Returns FX count for supplied take


boolean reaper.BR_IsMidiOpenInInlineEditor(MediaItem_Take take)

[SWS] Check if take has MIDI inline editor open and returns true or false.


boolean retval, boolean inProjectMidi = reaper.BR_IsTakeMidi(MediaItem_Take take)

[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.


MediaItem retval, number position = reaper.BR_ItemAtMouseCursor()

[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.


boolean reaper.BR_MIDI_CCLaneRemove(identifier midiEditor, integer laneId)

[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success


boolean reaper.BR_MIDI_CCLaneReplace(identifier midiEditor, integer laneId, integer newCC)

[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207


number reaper.BR_PositionAtMouseCursor(boolean checkRuler)

[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.


reaper.BR_SetArrangeView(ReaProject proj, number startTime, number endTime)

[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.


boolean reaper.BR_SetItemEdges(MediaItem item, number startTime, number endTime)

[BR] Set item start and end edges' position - returns true in case of any changes


reaper.BR_SetMediaItemImageResource(MediaItem item, string imageIn, integer imageFlags)

[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as "".
imageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).
To get image resource, see BR_GetMediaItemImageResource.


boolean reaper.BR_SetMediaSourceProperties(MediaItem_Take take, boolean section, number start, number length, number fade, boolean reverse)

[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.
To get source properties, see BR_GetMediaSourceProperties.


boolean reaper.BR_SetMediaTrackLayouts(MediaTrack track, string mcpLayoutNameIn, string tcpLayoutNameIn)

[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ("") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).
To get media track layouts, see BR_GetMediaTrackLayouts.


boolean reaper.BR_SetMidiTakeTempoInfo(MediaItem_Take take, boolean ignoreProjTempo, number bpm, integer num, integer den)

[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.


boolean reaper.BR_SetTakeSourceFromFile(MediaItem_Take take, string filenameIn, boolean inProjectData)

[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.
Any take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.
Note: To set source from existing take, see SNM_GetSetSourceState2.


boolean reaper.BR_SetTakeSourceFromFile2(MediaItem_Take take, string filenameIn, boolean inProjectData, boolean keepSourceProperties)

[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.


MediaItem_Take retval, number position = reaper.BR_TakeAtMouseCursor()

[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.


MediaTrack retval, integer context, number position = reaper.BR_TrackAtMouseCursor()

[BR] Get track under mouse cursor.
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.
Position will hold mouse cursor position in arrange if applicable.


boolean retval, string name = reaper.BR_TrackFX_GetFXModuleName(MediaTrack track, integer fx)

[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.


integer reaper.BR_Win32_CB_FindString(identifier comboBoxHwnd, integer startId, string string)

[BR] Equivalent to win32 API ComboBox_FindString().


integer reaper.BR_Win32_CB_FindStringExact(identifier comboBoxHwnd, integer startId, string string)

[BR] Equivalent to win32 API ComboBox_FindStringExact().


integer x, integer y = reaper.BR_Win32_ClientToScreen(identifier hwnd, integer xIn, integer yIn)

[BR] Equivalent to win32 API ClientToScreen().


identifier reaper.BR_Win32_FindWindowEx(string hwndParent, string hwndChildAfter, string className, string windowName, boolean searchClass, boolean searchName)

[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either "0" to signify NULL or as string obtained from BR_Win32_HwndToString.


integer reaper.BR_Win32_GET_X_LPARAM(integer lParam)

[BR] Equivalent to win32 API GET_X_LPARAM().


integer reaper.BR_Win32_GET_Y_LPARAM(integer lParam)

[BR] Equivalent to win32 API GET_Y_LPARAM().


integer reaper.BR_Win32_GetConstant(string constantName)

[BR] Returns various constants needed for BR_Win32 functions.
Supported constants are:
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL
EM_SETSEL
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER
GWL_STYLE
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER
VK_DOWN, VK_UP
WM_CLOSE, WM_KEYDOWN
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW


boolean retval, integer x, integer y = reaper.BR_Win32_GetCursorPos()

[BR] Equivalent to win32 API GetCursorPos().


identifier reaper.BR_Win32_GetFocus()

[BR] Equivalent to win32 API GetFocus().


identifier reaper.BR_Win32_GetForegroundWindow()

[BR] Equivalent to win32 API GetForegroundWindow().


identifier reaper.BR_Win32_GetMainHwnd()

[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type


identifier retval, boolean isDocked = reaper.BR_Win32_GetMixerHwnd()

[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked


integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetMonitorRectFromRect(boolean workingAreaOnly, integer leftIn, integer topIn, integer rightIn, integer bottomIn)

[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).


identifier reaper.BR_Win32_GetParent(identifier hwnd)

[BR] Equivalent to win32 API GetParent().


integer retval, string string = reaper.BR_Win32_GetPrivateProfileString(string sectionName, string keyName, string defaultString, string filePath)

[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini


identifier reaper.BR_Win32_GetWindow(identifier hwnd, integer cmd)

[BR] Equivalent to win32 API GetWindow().


integer reaper.BR_Win32_GetWindowLong(identifier hwnd, integer index)

[BR] Equivalent to win32 API GetWindowLong().


boolean retval, integer left, integer top, integer right, integer bottom = reaper.BR_Win32_GetWindowRect(identifier hwnd)

[BR] Equivalent to win32 API GetWindowRect().


integer retval, string text = reaper.BR_Win32_GetWindowText(identifier hwnd)

[BR] Equivalent to win32 API GetWindowText().


integer reaper.BR_Win32_HIBYTE(integer value)

[BR] Equivalent to win32 API HIBYTE().


integer reaper.BR_Win32_HIWORD(integer value)

[BR] Equivalent to win32 API HIWORD().


string string = reaper.BR_Win32_HwndToString(identifier hwnd)

[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.


boolean reaper.BR_Win32_IsWindow(identifier hwnd)

[BR] Equivalent to win32 API IsWindow().


boolean reaper.BR_Win32_IsWindowVisible(identifier hwnd)

[BR] Equivalent to win32 API IsWindowVisible().


integer reaper.BR_Win32_LOBYTE(integer value)

[BR] Equivalent to win32 API LOBYTE().


integer reaper.BR_Win32_LOWORD(integer value)

[BR] Equivalent to win32 API LOWORD().


integer reaper.BR_Win32_MAKELONG(integer low, integer high)

[BR] Equivalent to win32 API MAKELONG().


integer reaper.BR_Win32_MAKELPARAM(integer low, integer high)

[BR] Equivalent to win32 API MAKELPARAM().


integer reaper.BR_Win32_MAKELRESULT(integer low, integer high)

[BR] Equivalent to win32 API MAKELRESULT().


integer reaper.BR_Win32_MAKEWORD(integer low, integer high)

[BR] Equivalent to win32 API MAKEWORD().


integer reaper.BR_Win32_MAKEWPARAM(integer low, integer high)

[BR] Equivalent to win32 API MAKEWPARAM().


identifier reaper.BR_Win32_MIDIEditor_GetActive()

[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.


integer x, integer y = reaper.BR_Win32_ScreenToClient(identifier hwnd, integer xIn, integer yIn)

[BR] Equivalent to win32 API ClientToScreen().


integer reaper.BR_Win32_SendMessage(identifier hwnd, integer msg, integer lParam, integer wParam)

[BR] Equivalent to win32 API SendMessage().


identifier reaper.BR_Win32_SetFocus(identifier hwnd)

[BR] Equivalent to win32 API SetFocus().


integer reaper.BR_Win32_SetForegroundWindow(identifier hwnd)

[BR] Equivalent to win32 API SetForegroundWindow().


integer reaper.BR_Win32_SetWindowLong(identifier hwnd, integer index, integer newLong)

[BR] Equivalent to win32 API SetWindowLong().


boolean reaper.BR_Win32_SetWindowPos(identifier hwnd, string hwndInsertAfter, integer x, integer y, integer width, integer height, integer flags)

[BR] Equivalent to win32 API SetWindowPos().
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with BR_Win32_HwndToString.


integer reaper.BR_Win32_ShellExecute(string operation, string file, string parameters, string directory, integer showFlags)

[BR] Equivalent to win32 API ShellExecute() with HWND set to main window


boolean reaper.BR_Win32_ShowWindow(identifier hwnd, integer cmdShow)

[BR] Equivalent to win32 API ShowWindow().


identifier reaper.BR_Win32_StringToHwnd(string string)

[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.


identifier reaper.BR_Win32_WindowFromPoint(integer x, integer y)

[BR] Equivalent to win32 API WindowFromPoint().


boolean reaper.BR_Win32_WritePrivateProfileString(string sectionName, string keyName, string value, string filePath)

[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini


number reaper.Blink_GetBeatAtTime(number time, number quantum)

Get session beat value corresponding to given time for given quantum.


number reaper.Blink_GetClockNow()

Clock used by Blink.


boolean reaper.Blink_GetEnabled()

Is Blink currently enabled?


boolean reaper.Blink_GetMaster()

Is Blink Master?


integer reaper.Blink_GetNumPeers()

How many peers are currently connected in Link session?


number reaper.Blink_GetPhaseAtTime(number time, number quantum)

Get session phase at given time for given quantum.


boolean reaper.Blink_GetPlaying()

Is transport playing?


boolean reaper.Blink_GetPuppet()

Is Blink Puppet?


number reaper.Blink_GetQuantum()

Get quantum.


boolean reaper.Blink_GetStartStopSyncEnabled()

Is start/stop synchronization enabled?


number reaper.Blink_GetTempo()

Tempo of timeline, in quarter note Beats Per Minute.


number reaper.Blink_GetTimeAtBeat(number beat, number quantum)

Get time at which given beat occurs for given quantum.


number reaper.Blink_GetTimeForPlaying()

Get time at which transport start/stop occurs.


number reaper.Blink_GetVersion()

Get Blink version.


reaper.Blink_SetBeatAtStartPlayingTimeRequest(number beat, number quantum)

Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.


reaper.Blink_SetBeatAtTimeForce(number bpm, number time, number quantum)

Rudely re-map beat/time relationship for all peers in Link session.


reaper.Blink_SetBeatAtTimeRequest(number bpm, number time, number quantum)

Attempt to map given beat to given time in context of given quantum.


reaper.Blink_SetCaptureTransportCommands(boolean enable)

Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.


reaper.Blink_SetEnabled(boolean enable)

Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.


reaper.Blink_SetMaster(boolean enable)

Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.


reaper.Blink_SetPlaying(boolean playing, number time)

Set if transport should be playing or stopped, taking effect at given time.


reaper.Blink_SetPlayingAndBeatAtTimeRequest(boolean playing, number time, number beat, number quantum)

Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.


reaper.Blink_SetPuppet(boolean enable)

Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.


reaper.Blink_SetQuantum(number quantum)

Set quantum. Usually this is set to length of one measure/bar in quarter notes.


reaper.Blink_SetStartStopSyncEnabled(boolean enable)

Enable start/stop synchronization.


reaper.Blink_SetTempo(number bpm)

Set timeline tempo to given bpm value.


reaper.Blink_SetTempoAtTime(number bpm, number time)

Set tempo to given bpm value, taking effect at given time.


reaper.Blink_StartStop()

Transport start/stop.


integer retval, number time, number endTime, boolean isRegion, string name = reaper.CF_EnumMediaSourceCues(PCM_source src, integer index)

Enumerate the source's media cues. Returns the next index or 0 when finished.


integer reaper.CF_EnumSelectedFX(FxChain hwnd, integer index)

Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.


integer retval, string name = reaper.CF_EnumerateActions(integer section, integer index)

Wrapper for the unexposed kbd_enumerateActions API function.
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063


boolean reaper.CF_ExportMediaSource(PCM_source src, string fn)

Export the source to the given file (MIDI only).


string text = reaper.CF_GetClipboard()

Read the contents of the system clipboard.


string reaper.CF_GetClipboardBig(WDL_FastString output)

[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.


string reaper.CF_GetCommandText(integer section, integer command)

Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.


FxChain = reaper.CF_GetFocusedFXChain()

Return a handle to the currently focused FX chain window.


integer reaper.CF_GetMediaSourceBitDepth(PCM_source src)

Returns the bit depth if available (0 otherwise).


boolean retval, string out = reaper.CF_GetMediaSourceMetadata(PCM_source src, string name, string out)

Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).


boolean reaper.CF_GetMediaSourceOnline(PCM_source src)

Returns the online/offline status of the given source.


boolean retval, string fn = reaper.CF_GetMediaSourceRPP(PCM_source src)

Get the project associated with this source (BWF, subproject...).


string version = reaper.CF_GetSWSVersion()

Return the current SWS version number.


FxChain reaper.CF_GetTakeFXChain(MediaItem_Take take)

Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.


FxChain reaper.CF_GetTrackFXChain(MediaTrack track)

Return a handle to the given track FX chain window.


boolean reaper.CF_LocateInExplorer(string file)

Select the given file in explorer/finder.


boolean reaper.CF_SelectTrackFX(MediaTrack track, integer index)

Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.


reaper.CF_SetClipboard(string str)

Write the given string into the system clipboard.


reaper.CF_SetMediaSourceOnline(PCM_source src, boolean set)

Set the online/offline status of the given source (closes files when set=false).


boolean reaper.CF_ShellExecute(string file)

Open the given file or URL in the default application. See also CF_LocateInExplorer.


RprMidiNote reaper.FNG_AddMidiNote(RprMidiTake midiTake)

[FNG] Add MIDI note to MIDI take


RprMidiTake reaper.FNG_AllocMidiTake(MediaItem_Take take)

[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take


integer reaper.FNG_CountMidiNotes(RprMidiTake midiTake)

[FNG] Count of how many MIDI notes are in the MIDI take


reaper.FNG_FreeMidiTake(RprMidiTake midiTake)

[FNG] Commit changes to MIDI take and free allocated memory


RprMidiNote reaper.FNG_GetMidiNote(RprMidiTake midiTake, integer index)

[FNG] Get a MIDI note from a MIDI take at specified index


integer reaper.FNG_GetMidiNoteIntProperty(RprMidiNote midiNote, string property)

[FNG] Get MIDI note property


reaper.FNG_SetMidiNoteIntProperty(RprMidiNote midiNote, string property, integer value)

[FNG] Set MIDI note property


boolean reaper.Fab_Clear(optional string idStringIn)

Clears ReaFab control map, optionally based on matching idString. Returns true on success.


boolean reaper.Fab_Do(integer command, integer val)

Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.


reaper.Fab_Dump()

Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua


boolean retval, integer fx, integer param = reaper.Fab_Get(integer command)

Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.


boolean reaper.Fab_Map(string fxId, integer command, string paramId, integer control, optional integer bandsIn, optional number stepIn, optional number accelIn, optional number minvalIn, optional number maxvalIn)

Creates control mapping for ReaFab command.
fxId e.g. "ReaComp".
command 1-8 for encoders, 9-24 for buttons.
paramId e.g. "Ratio".
control 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.
bands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. "Band 00 Gain".
step overrides built-in default step of ~0.001 for continuous parameters.
accel overrides built-in default control acceleration step of 1.0.
minval & maxval override default detected target param value range.
Prefixing paramId with "-" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.


boolean retval, string payload = reaper.ImGui_AcceptDragDropPayload(ImGui_Context ctx, string type, string payload, optional integer flagsIn)

Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set
you can peek into the payload before the mouse button is released.


boolean retval, integer count = reaper.ImGui_AcceptDragDropPayloadFiles(ImGui_Context ctx, integer count, optional integer flagsIn)

Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.


boolean retval, integer rgb = reaper.ImGui_AcceptDragDropPayloadRGB(ImGui_Context ctx, integer rgb, optional integer flagsIn)

Accept a RGB color. See AcceptDragDropPayload.


boolean retval, integer rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(ImGui_Context ctx, integer rgba, optional integer flagsIn)

Accept a RGBA color. See AcceptDragDropPayload.


reaper.ImGui_AlignTextToFramePadding(ImGui_Context ctx)

Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it
will align properly to regularly framed items (call if you have text on a line
before a framed item).


boolean reaper.ImGui_ArrowButton(ImGui_Context ctx, string str_id, integer dir)

Square button with an arrow shape. 'dir' is one of the Dir_* values


reaper.ImGui_Attach(ImGui_Context ctxImGui_Resource obj)

Link the object's lifetime to the given context.
Objects can be draw list splitters, fonts, images, list clippers, etc.
Call Detach to let the object be garbage-collected after unuse again.

List clipper objects may only be attached to the context they were created for.

Fonts are (currently) a special case: they must be attached to the context
before usage. Furthermore, fonts may only be attached or detached immediately
after the context is created or before any other function calls modifying the
context per defer cycle. See "limitations" in the font API documentation.


boolean retval, optional boolean p_open = reaper.ImGui_Begin(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)

Push window to the stack and start appending to it.

- Passing true to 'p_open' shows a window-closing widget in the upper-right
corner of the window, which clicking will set the boolean to false when returned.
- You may append multiple times to the same window during the same frame by
calling Begin()/End() pairs multiple times. Some information such as 'flags'
or 'p_open' will only be considered by the first call to Begin().
- Begin() return false to indicate the window is collapsed or fully clipped,
so you may early out and omit submitting anything to the window.


boolean reaper.ImGui_BeginChild(ImGui_Context ctx, string str_id, optional number size_wIn, optional number size_hIn, optional boolean borderIn, optional integer flagsIn)

For each independent axis of 'size':
- \> 0.0: fixed size
- = 0.0: use remaining host window size
- < 0.0: use remaining window size minus abs(size)
(Each axis can use a different mode, e.g. size = 0x400.)

Returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.


boolean reaper.ImGui_BeginChildFrame(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)

Helper to create a child window / scrolling region that looks like a normal
widget frame. See BeginChild.


boolean reaper.ImGui_BeginCombo(ImGui_Context ctx, string label, string preview_value, optional integer flagsIn)

The BeginCombo/EndCombo API allows you to manage your contents and selection
state however you want it, by creating e.g. Selectable items.


reaper.ImGui_BeginDisabled(ImGui_Context ctx, optional boolean disabledIn)

Disable all user interactions and dim items visuals
(applying StyleVar_DisabledAlpha over current colors).

BeginDisabled(false) essentially does nothing useful but is provided to
facilitate use of boolean expressions.
If you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.


boolean reaper.ImGui_BeginDragDropSource(ImGui_Context ctx, optional integer flagsIn)

Call after submitting an item which may be dragged. when this return true,
you can call SetDragDropPayload() + EndDragDropSource()

If you stop calling BeginDragDropSource() the payload is preserved however
it won't have a preview tooltip (we currently display a fallback "..." tooltip
as replacement).


boolean reaper.ImGui_BeginDragDropTarget(ImGui_Context ctx)

Call after submitting an item that may receive a payload.
If this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.


reaper.ImGui_BeginGroup(ImGui_Context ctx)

Lock horizontal starting position. See EndGroup.


boolean reaper.ImGui_BeginListBox(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)

Open a framed scrolling region. This is essentially a thin wrapper to using
BeginChild/EndChild with some stylistic changes.

The BeginListBox/EndListBox API allows you to manage your contents and selection
state however you want it, by creating e.g. Selectable or any items.

- Choose frame width:
- width > 0.0: custom
- width < 0.0 or -FLT_MIN: right-align
- width = 0.0 (default): use current ItemWidth
- Choose frame height:
- height > 0.0: custom
- height < 0.0 or -FLT_MIN: bottom-align
- height = 0.0 (default): arbitrary default height which can fit ~7 items

See EndListBox.


boolean reaper.ImGui_BeginMenu(ImGui_Context ctx, string label, optional boolean enabledIn)

Create a sub-menu entry. only call EndMenu if this returns true!


boolean reaper.ImGui_BeginMenuBar(ImGui_Context ctx)

Append to menu-bar of current window (requires WindowFlags_MenuBar flag set
on parent window). See EndMenuBar.


boolean reaper.ImGui_BeginPopup(ImGui_Context ctx, string str_id, optional integer flagsIn)

Query popup state, if open start appending into the window. Call EndPopup
afterwards. WindowFlags* are forwarded to the window.

Return true if the popup is open, and you can start outputting to it.


boolean reaper.ImGui_BeginPopupContextItem(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)

This is a helper to handle the simplest case of associating one named popup
to one given widget. You can pass a nil str_id to use the identifier of the last
item. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup
but written to avoid computing the ID twice because BeginPopupContext*
functions may be called very frequently.

If you want to use that on a non-interactive item such as Text you need to pass
in an explicit ID here.


boolean reaper.ImGui_BeginPopupContextWindow(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)

Open+begin popup when clicked on current window.


boolean retval, optional boolean p_open = reaper.ImGui_BeginPopupModal(ImGui_Context ctx, string name, optional boolean p_open, optional integer flagsIn)

Block every interaction behind the window, cannot be closed by user, add a
dimming background, has a title bar. Return true if the modal is open, and you
can start outputting to it. See BeginPopup.


boolean reaper.ImGui_BeginTabBar(ImGui_Context ctx, string str_id, optional integer flagsIn)

Create and append into a TabBar.


boolean retval, optional boolean p_open = reaper.ImGui_BeginTabItem(ImGui_Context ctx, string label, optional boolean p_open, optional integer flagsIn)

Create a Tab. Returns true if the Tab is selected.
Set 'p_open' to true to enable the close button.


boolean reaper.ImGui_BeginTable(ImGui_Context ctx, string str_id, integer column, optional integer flagsIn, optional number outer_size_wIn, optional number outer_size_hIn, optional number inner_widthIn)


boolean reaper.ImGui_BeginTooltip(ImGui_Context ctx)

Begin/append a tooltip window.
To create full-featured tooltip (with any kind of items).


reaper.ImGui_Bullet(ImGui_Context ctx)

Draw a small circle + keep the cursor on the same line.
Advance cursor x position by GetTreeNodeToLabelSpacing,
same distance that TreeNode uses.


reaper.ImGui_BulletText(ImGui_Context ctx, string text)

Shortcut for Bullet + Text.


boolean reaper.ImGui_Button(ImGui_Context ctx, string label, optional number size_wIn, optional number size_hIn)


integer reaper.ImGui_ButtonFlags_MouseButtonLeft()

React on left mouse button (default).


integer reaper.ImGui_ButtonFlags_MouseButtonMiddle()

React on center mouse button.


integer reaper.ImGui_ButtonFlags_MouseButtonRight()

React on right mouse button.


integer reaper.ImGui_ButtonFlags_None()


number reaper.ImGui_CalcItemWidth(ImGui_Context ctx)

Width of item given pushed settings and current cursor position.
NOT necessarily the width of last item unlike most 'Item' functions.


number w, number h = reaper.ImGui_CalcTextSize(ImGui_Context ctx, string text, number w, number h, optional boolean hide_text_after_double_hashIn, optional number wrap_widthIn)


boolean retval, boolean v = reaper.ImGui_Checkbox(ImGui_Context ctx, string label, boolean v)


boolean retval, integer flags = reaper.ImGui_CheckboxFlags(ImGui_Context ctx, string label, integer flags, integer flags_value)


reaper.ImGui_CloseCurrentPopup(ImGui_Context ctx)

Manually close the popup we have begin-ed into.
Use inside the BeginPopup/EndPopup scope to close manually.

CloseCurrentPopup() is called by default by Selectable/MenuItem when activated.


integer reaper.ImGui_Col_Border()


integer reaper.ImGui_Col_BorderShadow()


integer reaper.ImGui_Col_Button()


integer reaper.ImGui_Col_ButtonActive()


integer reaper.ImGui_Col_ButtonHovered()


integer reaper.ImGui_Col_CheckMark()


integer reaper.ImGui_Col_ChildBg()

Background of child windows.


integer reaper.ImGui_Col_DockingEmptyBg()

Background color for empty node (e.g. CentralNode with no window docked into it).


integer reaper.ImGui_Col_DockingPreview()

Preview overlay color when about to docking something.


integer reaper.ImGui_Col_DragDropTarget()

Rectangle highlighting a drop target


integer reaper.ImGui_Col_FrameBg()

Background of checkbox, radio button, plot, slider, text input.


integer reaper.ImGui_Col_FrameBgActive()


integer reaper.ImGui_Col_FrameBgHovered()


integer reaper.ImGui_Col_Header()

Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.


integer reaper.ImGui_Col_HeaderActive()


integer reaper.ImGui_Col_HeaderHovered()


integer reaper.ImGui_Col_MenuBarBg()


integer reaper.ImGui_Col_ModalWindowDimBg()

Darken/colorize entire screen behind a modal window, when one is active.


integer reaper.ImGui_Col_NavHighlight()

Gamepad/keyboard: current highlighted item.


integer reaper.ImGui_Col_NavWindowingDimBg()

Darken/colorize entire screen behind the CTRL+TAB window list, when active.


integer reaper.ImGui_Col_NavWindowingHighlight()

Highlight window when using CTRL+TAB.


integer reaper.ImGui_Col_PlotHistogram()


integer reaper.ImGui_Col_PlotHistogramHovered()


integer reaper.ImGui_Col_PlotLines()


integer reaper.ImGui_Col_PlotLinesHovered()


integer reaper.ImGui_Col_PopupBg()

Background of popups, menus, tooltips windows.


integer reaper.ImGui_Col_ResizeGrip()

Resize grip in lower-right and lower-left corners of windows.


integer reaper.ImGui_Col_ResizeGripActive()


integer reaper.ImGui_Col_ResizeGripHovered()


integer reaper.ImGui_Col_ScrollbarBg()


integer reaper.ImGui_Col_ScrollbarGrab()


integer reaper.ImGui_Col_ScrollbarGrabActive()


integer reaper.ImGui_Col_ScrollbarGrabHovered()


integer reaper.ImGui_Col_Separator()


integer reaper.ImGui_Col_SeparatorActive()


integer reaper.ImGui_Col_SeparatorHovered()


integer reaper.ImGui_Col_SliderGrab()


integer reaper.ImGui_Col_SliderGrabActive()


integer reaper.ImGui_Col_Tab()

TabItem in a TabBar


integer reaper.ImGui_Col_TabActive()


integer reaper.ImGui_Col_TabHovered()


integer reaper.ImGui_Col_TabUnfocused()


integer reaper.ImGui_Col_TabUnfocusedActive()


integer reaper.ImGui_Col_TableBorderLight()

Table inner borders (prefer using Alpha=1.0 here).


integer reaper.ImGui_Col_TableBorderStrong()

Table outer and header borders (prefer using Alpha=1.0 here).


integer reaper.ImGui_Col_TableHeaderBg()

Table header background.


integer reaper.ImGui_Col_TableRowBg()

Table row background (even rows).


integer reaper.ImGui_Col_TableRowBgAlt()

Table row background (odd rows).


integer reaper.ImGui_Col_Text()


integer reaper.ImGui_Col_TextDisabled()


integer reaper.ImGui_Col_TextSelectedBg()


integer reaper.ImGui_Col_TitleBg()


integer reaper.ImGui_Col_TitleBgActive()


integer reaper.ImGui_Col_TitleBgCollapsed()


integer reaper.ImGui_Col_WindowBg()

Background of normal windows. See also WindowFlags_NoBackground.


boolean retval, boolean p_visible = reaper.ImGui_CollapsingHeader(ImGui_Context ctx, string label, boolean p_visible, optional integer flagsIn)

Returns true when opened but do not indent nor push into the ID stack
(because of the TreeNodeFlags_NoTreePushOnOpen flag).

This is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).
You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal
TreeNode.

When 'visible' is provided: if 'true' display an additional small close button
on upper right of the header which will set the bool to false when clicked,
if 'false' don't display the header.


boolean reaper.ImGui_ColorButton(ImGui_Context ctx, string desc_id, integer col_rgba, optional integer flagsIn, optional number size_wIn, optional number size_hIn)

Display a color square/button, hover for details, return true when pressed.
Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.


integer reaper.ImGui_ColorConvertDouble4ToU32(number r, number g, number b, number a)

Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).


number r, number g, number b = reaper.ImGui_ColorConvertHSVtoRGB(number h, number s, number v)

Convert HSV values (0..1) into RGB (0..1).


integer reaper.ImGui_ColorConvertNative(integer rgb)

Convert a native color coming from REAPER or 0xRRGGBB to native.
This swaps the red and blue channels on Windows.


number h, number s, number v = reaper.ImGui_ColorConvertRGBtoHSV(number r, number g, number b)

Convert RGB values (0..1) into HSV (0..1).


number r, number g, number b, number a = reaper.ImGui_ColorConvertU32ToDouble4(integer rgba)

Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).


boolean retval, integer col_rgb = reaper.ImGui_ColorEdit3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)

Color is in 0xXXRRGGBB. XX is ignored and will not be modified.


boolean retval, integer col_rgba = reaper.ImGui_ColorEdit4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn)

Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB
(XX is ignored and will not be modified).


integer reaper.ImGui_ColorEditFlags_AlphaBar()

ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.


integer reaper.ImGui_ColorEditFlags_AlphaPreview()

ColorEdit, ColorPicker, ColorButton: display preview as a transparent color
over a checkerboard, instead of opaque.


integer reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()

ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,
instead of opaque.


integer reaper.ImGui_ColorEditFlags_DisplayHSV()

ColorEdit: override _display_ type to HSV. ColorPicker:
select any combination using one or more of RGB/HSV/Hex.


integer reaper.ImGui_ColorEditFlags_DisplayHex()

ColorEdit: override _display_ type to Hex. ColorPicker:
select any combination using one or more of RGB/HSV/Hex.


integer reaper.ImGui_ColorEditFlags_DisplayRGB()

ColorEdit: override _display_ type to RGB. ColorPicker:
select any combination using one or more of RGB/HSV/Hex.


integer reaper.ImGui_ColorEditFlags_Float()

ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0
floats instead of 0..255 integers. No round-trip of value via integers.


integer reaper.ImGui_ColorEditFlags_InputHSV()

ColorEdit, ColorPicker: input and output data in HSV format.


integer reaper.ImGui_ColorEditFlags_InputRGB()

ColorEdit, ColorPicker: input and output data in RGB format.


integer reaper.ImGui_ColorEditFlags_NoAlpha()

ColorEdit, ColorPicker, ColorButton: ignore Alpha component
(will only read 3 components from the input pointer).


integer reaper.ImGui_ColorEditFlags_NoBorder()

ColorButton: disable border (which is enforced by default).


integer reaper.ImGui_ColorEditFlags_NoDragDrop()

ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.


integer reaper.ImGui_ColorEditFlags_NoInputs()

ColorEdit, ColorPicker: disable inputs sliders/text widgets
(e.g. to show only the small preview color square).


integer reaper.ImGui_ColorEditFlags_NoLabel()

ColorEdit, ColorPicker: disable display of inline text label
(the label is still forwarded to the tooltip and picker).


integer reaper.ImGui_ColorEditFlags_NoOptions()

ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.


integer reaper.ImGui_ColorEditFlags_NoPicker()

ColorEdit: disable picker when clicking on color square.


integer reaper.ImGui_ColorEditFlags_NoSidePreview()

ColorPicker: disable bigger color preview on right side of the picker,
use small color square preview instead.


integer reaper.ImGui_ColorEditFlags_NoSmallPreview()

ColorEdit, ColorPicker: disable color square preview next to the inputs.
(e.g. to show only the inputs).


integer reaper.ImGui_ColorEditFlags_NoTooltip()

ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.


integer reaper.ImGui_ColorEditFlags_None()


integer reaper.ImGui_ColorEditFlags_PickerHueBar()

ColorPicker: bar for Hue, rectangle for Sat/Value.


integer reaper.ImGui_ColorEditFlags_PickerHueWheel()

ColorPicker: wheel for Hue, triangle for Sat/Value.


integer reaper.ImGui_ColorEditFlags_Uint8()

ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.


boolean retval, integer col_rgb = reaper.ImGui_ColorPicker3(ImGui_Context ctx, string label, integer col_rgb, optional integer flagsIn)

Color is in 0xXXRRGGBB. XX is ignored and will not be modified.


boolean retval, integer col_rgba = reaper.ImGui_ColorPicker4(ImGui_Context ctx, string label, integer col_rgba, optional integer flagsIn, optional integer ref_colIn)


boolean retval, integer current_item = reaper.ImGui_Combo(ImGui_Context ctx, string label, integer current_item, string items, optional integer popup_max_height_in_itemsIn)

Helper over BeginCombo/EndCombo for convenience purpose. Each item must be
null-terminated (requires REAPER v6.44 or newer for EEL and Lua).


integer reaper.ImGui_ComboFlags_HeightLarge()

Max ~20 items visible.


integer reaper.ImGui_ComboFlags_HeightLargest()

As many fitting items as possible.


integer reaper.ImGui_ComboFlags_HeightRegular()

Max ~8 items visible (default).


integer reaper.ImGui_ComboFlags_HeightSmall()

Max ~4 items visible. Tip: If you want your combo popup to be a specific size
you can use SetNextWindowSizeConstraints prior to calling BeginCombo.


integer reaper.ImGui_ComboFlags_NoArrowButton()

Display on the preview box without the square arrow button.


integer reaper.ImGui_ComboFlags_NoPreview()

Display only a square arrow button.


integer reaper.ImGui_ComboFlags_None()


integer reaper.ImGui_ComboFlags_PopupAlignLeft()

Align the popup toward the left by default.


integer reaper.ImGui_Cond_Always()

No condition (always set the variable).


integer reaper.ImGui_Cond_Appearing()

Set the variable if the object/window is appearing after being
hidden/inactive (or the first time).


integer reaper.ImGui_Cond_FirstUseEver()

Set the variable if the object/window has no persistently saved data
(no entry in .ini file).


integer reaper.ImGui_Cond_Once()

Set the variable once per runtime session (only the first call will succeed).


integer reaper.ImGui_ConfigFlags_DockingEnable()

[BETA] Enable docking functionality.


integer reaper.ImGui_ConfigFlags_NavEnableKeyboard()

Master keyboard navigation enable flag.
Enable full Tabbing + directional arrows + space/enter to activate.


integer reaper.ImGui_ConfigFlags_NavEnableSetMousePos()

Instruct navigation to move the mouse cursor.


integer reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()

Instruct navigation to not capture global keyboard input when
ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).


integer reaper.ImGui_ConfigFlags_NoMouse()

Instruct imgui to ignore mouse position/buttons.


integer reaper.ImGui_ConfigFlags_NoMouseCursorChange()

Instruct backend to not alter mouse cursor shape and visibility.


integer reaper.ImGui_ConfigFlags_NoSavedSettings()

Disable state restoration and persistence for the whole context.


integer reaper.ImGui_ConfigFlags_None()


integer reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop()

Some calls to Begin()/BeginChild() will return false.
Will cycle through window depths then repeat. Suggested use: add
"SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift"
in your main loop then occasionally press SHIFT.
Windows should be flickering while running.


integer reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce()

First-time calls to Begin()/BeginChild() will return false.
**Needs to be set at context startup time** if you don't want to miss windows.


integer reaper.ImGui_ConfigVar_DockingNoSplit()

Simplified docking mode: disable window splitting, so docking is limited to
merging multiple windows together into tab-bars.


integer reaper.ImGui_ConfigVar_DockingTransparentPayload()

Make window or viewport transparent when docking and only display docking
boxes on the target viewport.


integer reaper.ImGui_ConfigVar_DockingWithShift()

Enable docking with holding Shift key
(reduce visual noise, allows dropping in wider space


integer reaper.ImGui_ConfigVar_DragClickToInputText()

Enable turning Drag* widgets into text input with a simple mouse
click-release (without moving). Not desirable on devices without a keyboard.


integer reaper.ImGui_ConfigVar_Flags()

ConfigFlags_*


integer reaper.ImGui_ConfigVar_HoverDelayNormal()

Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.


integer reaper.ImGui_ConfigVar_HoverDelayShort()

Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.


integer reaper.ImGui_ConfigVar_InputTextCursorBlink()

Enable blinking cursor (optional as some users consider it to be distracting).


integer reaper.ImGui_ConfigVar_InputTextEnterKeepActive()

Pressing Enter will keep item active and select contents (single-line only).


integer reaper.ImGui_ConfigVar_InputTrickleEventQueue()

Enable input queue trickling: some types of events submitted during the same
frame (e.g. button down + up) will be spread over multiple frames, improving
interactions with low framerates.


integer reaper.ImGui_ConfigVar_KeyRepeatDelay()

When holding a key/button, time before it starts repeating, in seconds
(for buttons in Repeat mode, etc.).


integer reaper.ImGui_ConfigVar_KeyRepeatRate()

When holding a key/button, rate at which it repeats, in seconds.


integer reaper.ImGui_ConfigVar_MacOSXBehaviors()

OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts
using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows
instead of Home/End, Double click selects by word instead of selecting whole
text, Multi-selection in lists uses Cmd/Super instead of Ctrl.


integer reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()

Distance threshold to stay in to validate a double-click, in pixels.


integer reaper.ImGui_ConfigVar_MouseDoubleClickTime()

Time for a double-click, in seconds.


integer reaper.ImGui_ConfigVar_MouseDragThreshold()

Distance threshold before considering we are dragging.


integer reaper.ImGui_ConfigVar_ViewportsNoDecoration()

Disable default OS window decoration. Enabling decoration can create
subsequent issues at OS levels (e.g. minimum window size).


integer reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()

Enable allowing to move windows only when clicking on their title bar.
Does not apply to windows without a title bar.


integer reaper.ImGui_ConfigVar_WindowsResizeFromEdges()

Enable resizing of windows from their edges and from the lower-left corner.


ImGui_Context reaper.ImGui_CreateContext(string label, optional integer config_flagsIn)

Create a new ReaImGui context.
The context will remain valid as long as it is used in each defer cycle.

The label is used for the tab text when windows are docked in REAPER
and also as a unique identifier for storing settings.


ImGui_DrawListSplitter reaper.ImGui_CreateDrawListSplitter(ImGui_DrawList draw_list)


ImGui_Font reaper.ImGui_CreateFont(string family_or_file, integer size, optional integer flagsIn)

Load a font matching a font family name or from a font file.
The font will remain valid while it's attached to a context. See Attach.

The family name can be an installed font or one of the generic fonts:
sans-serif, serif, monospace, cursive, fantasy.

If 'family_or_file' specifies a path to a font file (contains a / or \):
- The first byte of 'flags' is used as the font index within the file
- The font styles in 'flags' are simulated by the font renderer


ImGui_Function reaper.ImGui_CreateFunctionFromEEL(string code)

Compile an EEL program.

Standard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)
and [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)
functions are available in addition to callback-specific functions
(see InputTextCallback_*).


ImGui_Image reaper.ImGui_CreateImage(string file, optional integer flagsIn)

The returned object is valid as long as it is used in each defer cycle
unless attached to a context (see Attach).

('flags' currently unused and reserved for future expansion)


ImGui_Image reaper.ImGui_CreateImageFromMem(string data)

Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using
CreateImage or explicitely specify data_sz if supporting older versions.


ImGui_ImageSet = reaper.ImGui_CreateImageSet()


ImGui_ListClipper reaper.ImGui_CreateListClipper(ImGui_Context ctx)

The returned clipper object is only valid for the given context and is valid
as long as it is used in each defer cycle unless attached (see Attach).


ImGui_TextFilter reaper.ImGui_CreateTextFilter(optional string default_filterIn)

Valid while used every frame unless attached to a context (see Attach).


reaper.ImGui_DebugTextEncoding(ImGui_Context ctx, string text)

Helper tool to diagnose between text encoding issues and font loading issues.
Pass your UTF-8 string and verify that there are correct.


reaper.ImGui_DestroyContext(ImGui_Context ctx)

Free the resources used by a context.

Calling this function is usually not required as all ReaImGui objects are
automatically garbage-collected when unused.


reaper.ImGui_Detach(ImGui_Context ctxImGui_Resource obj)

Unlink the object's lifetime. Unattached objects are automatically destroyed
when left unused. You may check whether an object has been destroyed using
ValidatePtr.


integer reaper.ImGui_Dir_Down()


integer reaper.ImGui_Dir_Left()


integer reaper.ImGui_Dir_None()


integer reaper.ImGui_Dir_Right()


integer reaper.ImGui_Dir_Up()


boolean retval, number v = reaper.ImGui_DragDouble(ImGui_Context ctx, string label, number v, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2 = reaper.ImGui_DragDouble2(ImGui_Context ctx, string label, number v1, number v2, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3 = reaper.ImGui_DragDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_DragDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional integer flagsIn)


boolean reaper.ImGui_DragDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number speedIn, optional number minIn, optional number maxIn, optional string formatIn, optional integer flagsIn)


integer reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()

AcceptDragDropPayload will returns true even before the mouse button is
released. You can then check GetDragDropPayload/is_delivery to test if the
payload needs to be delivered.


integer reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()

Do not draw the default highlight rectangle when hovering over target.


integer reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()

Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.


integer reaper.ImGui_DragDropFlags_AcceptPeekOnly()

For peeking ahead and inspecting the payload before delivery.
Equivalent to DragDropFlags_AcceptBeforeDelivery |
DragDropFlags_AcceptNoDrawDefaultRect.


integer reaper.ImGui_DragDropFlags_None()


integer reaper.ImGui_DragDropFlags_SourceAllowNullID()

Allow items such as Text, Image that have no unique identifier to be used as
drag source, by manufacturing a temporary identifier based on their
window-relative position. This is extremely unusual within the dear imgui
ecosystem and so we made it explicit.


integer reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()

Automatically expire the payload if the source cease to be submitted
(otherwise payloads are persisting while being dragged).


integer reaper.ImGui_DragDropFlags_SourceExtern()

External source (from outside of dear imgui), won't attempt to read current
item/window info. Will always return true.
Only one Extern source can be active simultaneously.


integer reaper.ImGui_DragDropFlags_SourceNoDisableHover()

By default, when dragging we clear data so that IsItemHovered will return
false, to avoid subsequent user code submitting tooltips. This flag disables
this behavior so you can still call IsItemHovered on the source item.


integer reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()

Disable the behavior that allows to open tree nodes and collapsing header by
holding over them while dragging a source item.


integer reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()

By default, a successful call to BeginDragDropSource opens a tooltip so you
can display a preview or description of the source contents.
This flag disables this behavior.


boolean retval, number v_current_min, number v_current_max = reaper.ImGui_DragFloatRange2(ImGui_Context ctx, string label, number v_current_min, number v_current_max, optional number v_speedIn, optional number v_minIn, optional number v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)


boolean retval, integer v = reaper.ImGui_DragInt(ImGui_Context ctx, string label, integer v, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2 = reaper.ImGui_DragInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_DragInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_DragInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, integer v_current_min, integer v_current_max = reaper.ImGui_DragIntRange2(ImGui_Context ctx, string label, integer v_current_min, integer v_current_max, optional number v_speedIn, optional integer v_minIn, optional integer v_maxIn, optional string formatIn, optional string format_maxIn, optional integer flagsIn)


integer reaper.ImGui_DrawFlags_Closed()

DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be
closed (Important: this is always == 1 for legacy reason).


integer reaper.ImGui_DrawFlags_None()


integer reaper.ImGui_DrawFlags_RoundCornersAll()


integer reaper.ImGui_DrawFlags_RoundCornersBottom()


integer reaper.ImGui_DrawFlags_RoundCornersBottomLeft()

DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
bottom-left corner only (when rounding > 0.0, we default to all corners).


integer reaper.ImGui_DrawFlags_RoundCornersBottomRight()

DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
bottom-right corner only (when rounding > 0.0, we default to all corners).


integer reaper.ImGui_DrawFlags_RoundCornersLeft()


integer reaper.ImGui_DrawFlags_RoundCornersNone()

DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding
on all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!.


integer reaper.ImGui_DrawFlags_RoundCornersRight()


integer reaper.ImGui_DrawFlags_RoundCornersTop()


integer reaper.ImGui_DrawFlags_RoundCornersTopLeft()

DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
top-left corner only (when rounding > 0.0, we default to all corners).


integer reaper.ImGui_DrawFlags_RoundCornersTopRight()

DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding
top-right corner only (when rounding > 0.0, we default to all corners).


reaper.ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter splitter)


reaper.ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter splitter)


reaper.ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter splitter, integer channel_idx)


reaper.ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter splitter, integer count)


reaper.ImGui_DrawList_AddBezierCubic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, number thickness, optional integer num_segmentsIn)

Cubic Bezier (4 control points)


reaper.ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, number thickness, optional integer num_segmentsIn)

Quadratic Bezier (3 control points)


reaper.ImGui_DrawList_AddCircle(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn, optional number thicknessIn)

Use "num_segments == 0" to automatically calculate tessellation (preferred).


reaper.ImGui_DrawList_AddCircleFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, optional integer num_segmentsIn)

Use "num_segments == 0" to automatically calculate tessellation (preferred).


reaper.ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList draw_listreaper_array points, integer col_rgba)

Note: Anti-aliased filling requires points to be in clockwise order.


reaper.ImGui_DrawList_AddImage(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, optional number uv_min_xIn, optional number uv_min_yIn, optional number uv_max_xIn, optional number uv_max_yIn, optional integer col_rgbaIn)


reaper.ImGui_DrawList_AddImageQuad(ImGui_DrawList draw_listImGui_Image img, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional number uv1_xIn, optional number uv1_yIn, optional number uv2_xIn, optional number uv2_yIn, optional number uv3_xIn, optional number uv3_yIn, optional number uv4_xIn, optional number uv4_yIn, optional integer col_rgbaIn)


reaper.ImGui_DrawList_AddImageRounded(ImGui_DrawList draw_listImGui_Image img, number p_min_x, number p_min_y, number p_max_x, number p_max_y, number uv_min_x, number uv_min_y, number uv_max_x, number uv_max_y, integer col_rgba, number rounding, optional integer flagsIn)


reaper.ImGui_DrawList_AddLine(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, integer col_rgba, optional number thicknessIn)


reaper.ImGui_DrawList_AddNgon(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments, optional number thicknessIn)


reaper.ImGui_DrawList_AddNgonFilled(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer col_rgba, integer num_segments)


reaper.ImGui_DrawList_AddPolyline(ImGui_DrawList draw_listreaper_array points, integer col_rgba, integer flags, number thickness)

Points is a list of x,y coordinates.


reaper.ImGui_DrawList_AddQuad(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba, optional number thicknessIn)


reaper.ImGui_DrawList_AddQuadFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, integer col_rgba)


reaper.ImGui_DrawList_AddRect(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn, optional number thicknessIn)


reaper.ImGui_DrawList_AddRectFilled(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_rgba, optional number roundingIn, optional integer flagsIn)


reaper.ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList draw_list, number p_min_x, number p_min_y, number p_max_x, number p_max_y, integer col_upr_left, integer col_upr_right, integer col_bot_right, integer col_bot_left)


reaper.ImGui_DrawList_AddText(ImGui_DrawList draw_list, number x, number y, integer col_rgba, string text)


reaper.ImGui_DrawList_AddTextEx(ImGui_DrawList draw_listImGui_Font font, number font_size, number pos_x, number pos_y, integer col_rgba, string text, optional number wrap_widthIn, optional number cpu_fine_clip_rect_xIn, optional number cpu_fine_clip_rect_yIn, optional number cpu_fine_clip_rect_wIn, optional number cpu_fine_clip_rect_hIn)

The last pushed font is used if font is nil.
The size of the last pushed font is used if font_size is 0.
cpu_fine_clip_rect_* only takes effect if all four are non-nil.


reaper.ImGui_DrawList_AddTriangle(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba, optional number thicknessIn)


reaper.ImGui_DrawList_AddTriangleFilled(ImGui_DrawList draw_list, number p1_x, number p1_y, number p2_x, number p2_y, number p3_x, number p3_y, integer col_rgba)


reaper.ImGui_DrawList_PathArcTo(ImGui_DrawList draw_list, number center_x, number center_y, number radius, number a_min, number a_max, optional integer num_segmentsIn)


reaper.ImGui_DrawList_PathArcToFast(ImGui_DrawList draw_list, number center_x, number center_y, number radius, integer a_min_of_12, integer a_max_of_12)

Use precomputed angles for a 12 steps circle.


reaper.ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, number p4_x, number p4_y, optional integer num_segmentsIn)

Cubic Bezier (4 control points)


reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList draw_list, number p2_x, number p2_y, number p3_x, number p3_y, optional integer num_segmentsIn)

Quadratic Bezier (3 control points)


reaper.ImGui_DrawList_PathClear(ImGui_DrawList draw_list)


reaper.ImGui_DrawList_PathFillConvex(ImGui_DrawList draw_list, integer col_rgba)

Note: Anti-aliased filling requires points to be in clockwise order.


reaper.ImGui_DrawList_PathLineTo(ImGui_DrawList draw_list, number pos_x, number pos_y)


reaper.ImGui_DrawList_PathRect(ImGui_DrawList draw_list, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y, optional number roundingIn, optional integer flagsIn)


reaper.ImGui_DrawList_PathStroke(ImGui_DrawList draw_list, integer col_rgba, optional integer flagsIn, optional number thicknessIn)


reaper.ImGui_DrawList_PopClipRect(ImGui_DrawList draw_list)

See DrawList_PushClipRect


reaper.ImGui_DrawList_PushClipRect(ImGui_DrawList draw_list, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, optional boolean intersect_with_current_clip_rectIn)

Render-level scissoring. Prefer using higher-level PushClipRect to affect
logic (hit-testing and widget culling).


reaper.ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList draw_list)


reaper.ImGui_Dummy(ImGui_Context ctx, number size_w, number size_h)

Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the
mouse click or be navigable into.


reaper.ImGui_End(ImGui_Context ctx)

Pop window from the stack. See Begin.


reaper.ImGui_EndChild(ImGui_Context ctx)

See BeginChild.


reaper.ImGui_EndChildFrame(ImGui_Context ctx)

See BeginChildFrame.


reaper.ImGui_EndCombo(ImGui_Context ctx)

Only call EndCombo() if BeginCombo returns true!


reaper.ImGui_EndDisabled(ImGui_Context ctx)

See BeginDisabled.


reaper.ImGui_EndDragDropSource(ImGui_Context ctx)

Only call EndDragDropSource() if BeginDragDropSource returns true!


reaper.ImGui_EndDragDropTarget(ImGui_Context ctx)

Only call EndDragDropTarget() if BeginDragDropTarget returns true!


reaper.ImGui_EndGroup(ImGui_Context ctx)

Unlock horizontal starting position + capture the whole group bounding box
into one "item" (so you can use IsItemHovered or layout primitives such as
SameLine on whole group, etc.).

See BeginGroup.


reaper.ImGui_EndListBox(ImGui_Context ctx)

Only call EndListBox() if BeginListBox returned true!


reaper.ImGui_EndMenu(ImGui_Context ctx)

Only call EndMenu() if BeginMenu returns true!


reaper.ImGui_EndMenuBar(ImGui_Context ctx)

Only call EndMenuBar if BeginMenuBar returns true!


reaper.ImGui_EndPopup(ImGui_Context ctx)

Only call EndPopup() if BeginPopup*() returns true!


reaper.ImGui_EndTabBar(ImGui_Context ctx)

Only call EndTabBar() if BeginTabBar() returns true!


reaper.ImGui_EndTabItem(ImGui_Context ctx)

Only call EndTabItem() if BeginTabItem() returns true!


reaper.ImGui_EndTable(ImGui_Context ctx)

Only call EndTable() if BeginTable() returns true!


reaper.ImGui_EndTooltip(ImGui_Context ctx)

Only call EndTooltip() if BeginTooltip() returns true.


integer reaper.ImGui_FocusedFlags_AnyWindow()

Return true if any window is focused.


integer reaper.ImGui_FocusedFlags_ChildWindows()

Return true if any children of the window is focused.


integer reaper.ImGui_FocusedFlags_DockHierarchy()

Consider docking hierarchy (treat dockspace host as parent of docked window)
(when used with _ChildWindows or _RootWindow).


integer reaper.ImGui_FocusedFlags_NoPopupHierarchy()

Do not consider popup hierarchy (do not treat popup emitter as parent of
popup) (when used with _ChildWindows or _RootWindow).


integer reaper.ImGui_FocusedFlags_None()


integer reaper.ImGui_FocusedFlags_RootAndChildWindows()

FocusedFlags_RootWindow | FocusedFlags_ChildWindows


integer reaper.ImGui_FocusedFlags_RootWindow()

Test from root window (top most parent of the current hierarchy).


integer reaper.ImGui_FontFlags_Bold()


integer reaper.ImGui_FontFlags_Italic()


integer reaper.ImGui_FontFlags_None()


reaper.ImGui_Function_Execute(ImGui_Function func)


number reaper.ImGui_Function_GetValue(ImGui_Function func, string name)


reaper.ImGui_Function_GetValue_Array(ImGui_Function func, string namereaper_array values)

Copy the values in the function's memory starting at the address stored
in the given variable into the array.


string value = reaper.ImGui_Function_GetValue_String(ImGui_Function func, string name)

Read from a string slot or a named string (when name starts with a `#`).


reaper.ImGui_Function_SetValue(ImGui_Function func, string name, number value)


reaper.ImGui_Function_SetValue_Array(ImGui_Function func, string namereaper_array values)

Copy the values in the array to the function's memory at the address stored
in the given variable.


reaper.ImGui_Function_SetValue_String(ImGui_Function func, string name, string value)

Write to a string slot or a named string (when name starts with a `#`).


ImGui_DrawList reaper.ImGui_GetBackgroundDrawList(ImGui_Context ctx)

This draw list will be the first rendering one. Useful to quickly draw
shapes/text behind dear imgui contents.


string reaper.ImGui_GetClipboardText(ImGui_Context ctx)


integer reaper.ImGui_GetColor(ImGui_Context ctx, integer idx, optional number alpha_mulIn)

Retrieve given style color with style alpha applied and optional extra alpha
multiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.


integer reaper.ImGui_GetColorEx(ImGui_Context ctx, integer col_rgba)

Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).


number reaper.ImGui_GetConfigVar(ImGui_Context ctx, integer var_idx)


number x, number y = reaper.ImGui_GetContentRegionAvail(ImGui_Context ctx)

== GetContentRegionMax() - GetCursorPos()


number x, number y = reaper.ImGui_GetContentRegionMax(ImGui_Context ctx)

Current content boundaries (typically window boundaries including scrolling,
or current column boundaries), in windows coordinates.


number x, number y = reaper.ImGui_GetCursorPos(ImGui_Context ctx)

Cursor position in window


number reaper.ImGui_GetCursorPosX(ImGui_Context ctx)

Cursor X position in window


number reaper.ImGui_GetCursorPosY(ImGui_Context ctx)

Cursor Y position in window


number x, number y = reaper.ImGui_GetCursorScreenPos(ImGui_Context ctx)

Cursor position in absolute screen coordinates (useful to work with the DrawList API).


number x, number y = reaper.ImGui_GetCursorStartPos(ImGui_Context ctx)

Initial cursor position in window coordinates.


number reaper.ImGui_GetDeltaTime(ImGui_Context ctx)

Time elapsed since last frame, in seconds.


boolean retval, string type, string payload, boolean is_preview, boolean is_delivery = reaper.ImGui_GetDragDropPayload(ImGui_Context ctx)

Peek directly into the current payload from anywhere.


boolean retval, string filename = reaper.ImGui_GetDragDropPayloadFile(ImGui_Context ctx, integer index)

Get a filename from the list of dropped files.
Returns false if index is out of bounds.


ImGui_Font reaper.ImGui_GetFont(ImGui_Context ctx)

Get the current font


number reaper.ImGui_GetFontSize(ImGui_Context ctx)

Get current font size (= height in pixels) of current font with current scale
applied.


ImGui_DrawList reaper.ImGui_GetForegroundDrawList(ImGui_Context ctx)

This draw list will be the last rendered one. Useful to quickly draw
shapes/text over dear imgui contents.


integer reaper.ImGui_GetFrameCount(ImGui_Context ctx)

Get global imgui frame count. incremented by 1 every frame.


number reaper.ImGui_GetFrameHeight(ImGui_Context ctx)

GetFontSize + StyleVar_FramePadding.y * 2


number reaper.ImGui_GetFrameHeightWithSpacing(ImGui_Context ctx)

GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y
(distance in pixels between 2 consecutive lines of framed widgets).


number reaper.ImGui_GetFramerate(ImGui_Context ctx)

Estimate of application framerate (rolling average over 60 frames, based on
GetDeltaTime), in frame per second. Solely for convenience.


boolean retval, integer unicode_char = reaper.ImGui_GetInputQueueCharacter(ImGui_Context ctx, integer idx)

Read from ImGui's character input queue.
Call with increasing idx until false is returned.


number x, number y = reaper.ImGui_GetItemRectMax(ImGui_Context ctx)

Get lower-right bounding rectangle of the last item (screen space)


number x, number y = reaper.ImGui_GetItemRectMin(ImGui_Context ctx)

Get upper-left bounding rectangle of the last item (screen space)


number w, number h = reaper.ImGui_GetItemRectSize(ImGui_Context ctx)

Get size of last item


number reaper.ImGui_GetKeyDownDuration(ImGui_Context ctx, integer key)

Duration the keyboard key has been down (0.0 == just pressed)


integer reaper.ImGui_GetKeyMods(ImGui_Context ctx)

Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.


integer reaper.ImGui_GetKeyPressedAmount(ImGui_Context ctx, integer key, number repeat_delay, number rate)

Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might
be >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate.


ImGui_Viewport reaper.ImGui_GetMainViewport(ImGui_Context ctx)

Currently represents REAPER's main window (arrange view).
WARNING: This may change or be removed in the future.


integer reaper.ImGui_GetMouseClickedCount(ImGui_Context ctx, integer button)

Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).


number x, number y = reaper.ImGui_GetMouseClickedPos(ImGui_Context ctx, integer button)


integer reaper.ImGui_GetMouseCursor(ImGui_Context ctx)

Get desired mouse cursor shape, reset every frame. This is updated during the frame.


number x, number y = reaper.ImGui_GetMouseDelta(ImGui_Context ctx)

Mouse delta. Note that this is zero if either current or previous position
are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have
a huge delta.


number reaper.ImGui_GetMouseDownDuration(ImGui_Context ctx, integer button)

Duration the mouse button has been down (0.0 == just clicked)


number x, number y = reaper.ImGui_GetMouseDragDelta(ImGui_Context ctx, number x, number y, optional integer buttonIn, optional number lock_thresholdIn)

Return the delta from the initial clicking position while the mouse button is
pressed or was just released. This is locked and return 0.0 until the mouse
moves past a distance threshold at least once (if lock_threshold < -1.0, uses
ConfigVar_MouseDragThreshold).


number x, number y = reaper.ImGui_GetMousePos(ImGui_Context ctx)


number x, number y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context ctx)

Retrieve mouse position at the time of opening popup we have BeginPopup()
into (helper to avoid user backing that value themselves).


number vertical, number horizontal = reaper.ImGui_GetMouseWheel(ImGui_Context ctx)

Vertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down.
Hold SHIFT to turn vertical scroll into horizontal scroll

Horizontal: >0 scrolls Left, <0 scrolls Right.
Most users don't have a mouse with a horizontal wheel.


number reaper.ImGui_GetScrollMaxX(ImGui_Context ctx)

Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x


number reaper.ImGui_GetScrollMaxY(ImGui_Context ctx)

Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y


number reaper.ImGui_GetScrollX(ImGui_Context ctx)

Get scrolling amount [0 .. GetScrollMaxX()]


number reaper.ImGui_GetScrollY(ImGui_Context ctx)

Get scrolling amount [0 .. GetScrollMaxY()]


integer reaper.ImGui_GetStyleColor(ImGui_Context ctx, integer idx)

Retrieve style color as stored in ImGuiStyle structure.
Use to feed back into PushStyleColor, Otherwise use GetColor to get style color
with style alpha baked in. See Col_* for available style colors.


number val1, number val2 = reaper.ImGui_GetStyleVar(ImGui_Context ctx, integer var_idx)


number reaper.ImGui_GetTextLineHeight(ImGui_Context ctx)

Same as GetFontSize


number reaper.ImGui_GetTextLineHeightWithSpacing(ImGui_Context ctx)

GetFontSize + StyleVar_ItemSpacing.y
(distance in pixels between 2 consecutive lines of text).


number reaper.ImGui_GetTime(ImGui_Context ctx)

Get global imgui time. Incremented every frame.


number reaper.ImGui_GetTreeNodeToLabelSpacing(ImGui_Context ctx)

Horizontal distance preceding label when using TreeNode*() or Bullet()
== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.


string imgui_version, integer imgui_version_num, string reaimgui_version = reaper.ImGui_GetVersion()


number x, number y = reaper.ImGui_GetWindowContentRegionMax(ImGui_Context ctx)

Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be
overridden with SetNextWindowContentSize, in window coordinates.


number x, number y = reaper.ImGui_GetWindowContentRegionMin(ImGui_Context ctx)

Content boundaries min (roughly (0,0)-Scroll), in window coordinates.


integer reaper.ImGui_GetWindowDockID(ImGui_Context ctx)


number reaper.ImGui_GetWindowDpiScale(ImGui_Context ctx)

Get DPI scale currently associated to the current window's viewport
(1.0 = 96 DPI).


ImGui_DrawList reaper.ImGui_GetWindowDrawList(ImGui_Context ctx)

The draw list associated to the current window, to append your own drawing primitives


number reaper.ImGui_GetWindowHeight(ImGui_Context ctx)

Get current window height (shortcut for (select(2, GetWindowSize())).


number x, number y = reaper.ImGui_GetWindowPos(ImGui_Context ctx)

Get current window position in screen space (useful if you want to do your own
drawing via the DrawList API).


number w, number h = reaper.ImGui_GetWindowSize(ImGui_Context ctx)

Get current window size


ImGui_Viewport reaper.ImGui_GetWindowViewport(ImGui_Context ctx)

Get viewport currently associated to the current window.


number reaper.ImGui_GetWindowWidth(ImGui_Context ctx)

Get current window width (shortcut for (select(1, GetWindowSize())).


integer reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()

Return true even if an active item is blocking access to this item/window.
Useful for Drag and Drop patterns.


integer reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()

Return true even if a popup window is normally blocking access to this item/window.


integer reaper.ImGui_HoveredFlags_AllowWhenDisabled()

IsItemHovered only: Return true even if the item is disabled.


integer reaper.ImGui_HoveredFlags_AllowWhenOverlapped()

IsItemHovered only: Return true even if the position is obstructed or
overlapped by another window.


integer reaper.ImGui_HoveredFlags_AnyWindow()

IsWindowHovered only: Return true if any window is hovered.


integer reaper.ImGui_HoveredFlags_ChildWindows()

IsWindowHovered only: Return true if any children of the window is hovered.


integer reaper.ImGui_HoveredFlags_DelayNormal()

Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)


integer reaper.ImGui_HoveredFlags_DelayShort()

Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)


integer reaper.ImGui_HoveredFlags_DockHierarchy()

IsWindowHovered only: Consider docking hierarchy (treat dockspace host as
parent of docked window) (when used with _ChildWindows or _RootWindow).


integer reaper.ImGui_HoveredFlags_NoNavOverride()

Disable using gamepad/keyboard navigation state when active, always query mouse.


integer reaper.ImGui_HoveredFlags_NoPopupHierarchy()

IsWindowHovered only: Do not consider popup hierarchy (do not treat popup
emitter as parent of popup) (when used with _ChildWindows or _RootWindow).


integer reaper.ImGui_HoveredFlags_NoSharedDelay()

Disable shared delay system where moving from one item to the next keeps
the previous timer for a short time (standard for tooltips with long delays


integer reaper.ImGui_HoveredFlags_None()

Return true if directly over the item/window, not obstructed by another
window, not obstructed by an active popup or modal blocking inputs under them.


integer reaper.ImGui_HoveredFlags_RectOnly()

HoveredFlags_AllowWhenBlockedByPopup |
HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped


integer reaper.ImGui_HoveredFlags_RootAndChildWindows()

HoveredFlags_RootWindow | HoveredFlags_ChildWindows


integer reaper.ImGui_HoveredFlags_RootWindow()

IsWindowHovered only: Test from root window (top most parent of the current hierarchy).


reaper.ImGui_Image(ImGui_Context ctxImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer tint_col_rgbaIn, optional integer border_col_rgbaIn)


boolean reaper.ImGui_ImageButton(ImGui_Context ctx, string str_idImGui_Image img, number size_w, number size_h, optional number uv0_xIn, optional number uv0_yIn, optional number uv1_xIn, optional number uv1_yIn, optional integer bg_col_rgbaIn, optional integer tint_col_rgbaIn)


reaper.ImGui_ImageSet_Add(ImGui_ImageSet set, number scaleImGui_Image img)

'img' cannot be another ImageSet.


number w, number h = reaper.ImGui_Image_GetSize(ImGui_Image img)


reaper.ImGui_Indent(ImGui_Context ctx, optional number indent_wIn)

Move content position toward the right, by 'indent_w', or
StyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent.


boolean retval, number v = reaper.ImGui_InputDouble(ImGui_Context ctx, string label, number v, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2 = reaper.ImGui_InputDouble2(ImGui_Context ctx, string label, number v1, number v2, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3 = reaper.ImGui_InputDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_InputDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, optional string formatIn, optional integer flagsIn)


boolean reaper.ImGui_InputDoubleN(ImGui_Context ctx, string labelreaper_array values, optional number stepIn, optional number step_fastIn, optional string formatIn, optional integer flagsIn)


boolean retval, integer v = reaper.ImGui_InputInt(ImGui_Context ctx, string label, integer v, optional integer stepIn, optional integer step_fastIn, optional integer flagsIn)


boolean retval, integer v1, integer v2 = reaper.ImGui_InputInt2(ImGui_Context ctx, string label, integer v1, integer v2, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_InputInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_InputInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, optional integer flagsIn)


boolean retval, string buf = reaper.ImGui_InputText(ImGui_Context ctx, string label, string buf, optional integer flagsInImGui_Function callbackIn)


integer reaper.ImGui_InputTextFlags_AllowTabInput()

Pressing TAB input a '\t' character into the text field.


integer reaper.ImGui_InputTextFlags_AlwaysOverwrite()

Overwrite mode.


integer reaper.ImGui_InputTextFlags_AutoSelectAll()

Select entire text when first taking mouse focus.


integer reaper.ImGui_InputTextFlags_CallbackAlways()

Callback on each iteration. User code may query cursor position, modify text buffer.


integer reaper.ImGui_InputTextFlags_CallbackCharFilter()

Callback on character inputs to replace or discard them.
Modify 'EventChar' to replace or 'EventChar = 0' to discard.


integer reaper.ImGui_InputTextFlags_CallbackCompletion()

Callback on pressing TAB (for completion handling).


integer reaper.ImGui_InputTextFlags_CallbackEdit()

Callback on any edit (note that InputText() already returns true on edit,
the callback is useful mainly to manipulate the underlying buffer while
focus is active).


integer reaper.ImGui_InputTextFlags_CallbackHistory()

Callback on pressing Up/Down arrows (for history handling).


integer reaper.ImGui_InputTextFlags_CharsDecimal()

Allow 0123456789.+-*/.


integer reaper.ImGui_InputTextFlags_CharsHexadecimal()

Allow 0123456789ABCDEFabcdef.


integer reaper.ImGui_InputTextFlags_CharsNoBlank()

Filter out spaces, tabs.


integer reaper.ImGui_InputTextFlags_CharsScientific()

Allow 0123456789.+-*/eE (Scientific notation input).


integer reaper.ImGui_InputTextFlags_CharsUppercase()

Turn a..z into A..Z.


integer reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()

In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter
(default is opposite: unfocus with Ctrl+Enter, add line with Enter).


integer reaper.ImGui_InputTextFlags_EnterReturnsTrue()

Return 'true' when Enter is pressed (as opposed to every time the value was
modified). Consider looking at the IsItemDeactivatedAfterEdit function.


integer reaper.ImGui_InputTextFlags_EscapeClearsAll()

Escape key clears content if not empty, and deactivate otherwise
(constrast to default behavior of Escape to revert).


integer reaper.ImGui_InputTextFlags_NoHorizontalScroll()

Disable following the cursor horizontally.


integer reaper.ImGui_InputTextFlags_NoUndoRedo()

Disable undo/redo. Note that input text owns the text data while active.


integer reaper.ImGui_InputTextFlags_None()


integer reaper.ImGui_InputTextFlags_Password()

Password mode, display all characters as '*'.


integer reaper.ImGui_InputTextFlags_ReadOnly()

Read-only mode.


boolean retval, string buf = reaper.ImGui_InputTextMultiline(ImGui_Context ctx, string label, string buf, optional number size_wIn, optional number size_hIn, optional integer flagsInImGui_Function callbackIn)


boolean retval, string buf = reaper.ImGui_InputTextWithHint(ImGui_Context ctx, string label, string hint, string buf, optional integer flagsInImGui_Function callbackIn)


boolean reaper.ImGui_InvisibleButton(ImGui_Context ctx, string str_id, number size_w, number size_h, optional integer flagsIn)

Flexible button behavior without the visuals, frequently useful to build
custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).


boolean reaper.ImGui_IsAnyItemActive(ImGui_Context ctx)


boolean reaper.ImGui_IsAnyItemFocused(ImGui_Context ctx)


boolean reaper.ImGui_IsAnyItemHovered(ImGui_Context ctx)


boolean reaper.ImGui_IsAnyMouseDown(ImGui_Context ctx)

Is any mouse button held?


boolean reaper.ImGui_IsItemActivated(ImGui_Context ctx)

Was the last item just made active (item was previously inactive).


boolean reaper.ImGui_IsItemActive(ImGui_Context ctx)

Is the last item active? (e.g. button being held, text field being edited.
This will continuously return true while holding mouse button on an item.
Items that don't interact will always return false.


boolean reaper.ImGui_IsItemClicked(ImGui_Context ctx, optional integer mouse_buttonIn)

Is the last item clicked? (e.g. button/node just clicked on)
== IsMouseClicked(mouse_button) && IsItemHovered().

This is NOT equivalent to the behavior of e.g. Button.
Most widgets have specific reactions based on mouse-up/down state, mouse position etc.


boolean reaper.ImGui_IsItemDeactivated(ImGui_Context ctx)

Was the last item just made inactive (item was previously active).
Useful for Undo/Redo patterns with widgets that require continuous editing.


boolean reaper.ImGui_IsItemDeactivatedAfterEdit(ImGui_Context ctx)

Was the last item just made inactive and made a value change when it was
active? (e.g. Slider/Drag moved).

Useful for Undo/Redo patterns with widgets that require continuous editing. Note
that you may get false positives (some widgets such as Combo/ListBox/Selectable
will return true even when clicking an already selected item).


boolean reaper.ImGui_IsItemEdited(ImGui_Context ctx)

Did the last item modify its underlying value this frame? or was pressed?
This is generally the same as the "bool" return value of many widgets.


boolean reaper.ImGui_IsItemFocused(ImGui_Context ctx)

Is the last item focused for keyboard/gamepad navigation?


boolean reaper.ImGui_IsItemHovered(ImGui_Context ctx, optional integer flagsIn)

Is the last item hovered? (and usable, aka not blocked by a popup, etc.).
See HoveredFlags_* for more options.


boolean reaper.ImGui_IsItemToggledOpen(ImGui_Context ctx)

Was the last item open state toggled? Set by TreeNode.


boolean reaper.ImGui_IsItemVisible(ImGui_Context ctx)

Is the last item visible? (items may be out of sight because of clipping/scrolling)


boolean reaper.ImGui_IsKeyDown(ImGui_Context ctx, integer key)

Is key being held.


boolean reaper.ImGui_IsKeyPressed(ImGui_Context ctx, integer key, optional boolean repeatIn)

Was key pressed (went from !Down to Down)?
If repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.


boolean reaper.ImGui_IsKeyReleased(ImGui_Context ctx, integer key)

Was key released (went from Down to !Down)?


boolean reaper.ImGui_IsMouseClicked(ImGui_Context ctx, integer button, optional boolean repeatIn)

Did mouse button clicked? (went from !Down to Down).
Same as GetMouseClickedCount() == 1.


boolean reaper.ImGui_IsMouseDoubleClicked(ImGui_Context ctx, integer button)

Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.
(Note that a double-click will also report IsMouseClicked() == true)


boolean reaper.ImGui_IsMouseDown(ImGui_Context ctx, integer button)

Is mouse button held?


boolean reaper.ImGui_IsMouseDragging(ImGui_Context ctx, integer button, optional number lock_thresholdIn)

Is mouse dragging? (if lock_threshold < -1.0, uses ConfigVar_MouseDragThreshold)


boolean reaper.ImGui_IsMouseHoveringRect(ImGui_Context ctx, number r_min_x, number r_min_y, number r_max_x, number r_max_y, optional boolean clipIn)

Is mouse hovering given bounding rect (in screen space).
Clipped by current clipping settings, but disregarding of other consideration
of focus/window ordering/popup-block.


boolean reaper.ImGui_IsMousePosValid(ImGui_Context ctx, optional number mouse_pos_xIn, optional number mouse_pos_yIn)


boolean reaper.ImGui_IsMouseReleased(ImGui_Context ctx, integer button)

Did mouse button released? (went from Down to !Down)


boolean reaper.ImGui_IsPopupOpen(ImGui_Context ctx, string str_id, optional integer flagsIn)

Return true if the popup is open at the current BeginPopup level of the
popup stack.

- With PopupFlags_AnyPopupId: return true if any popup is open at the current
BeginPopup() level of the popup stack.
- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any
popup is open.


boolean reaper.ImGui_IsRectVisible(ImGui_Context ctx, number size_w, number size_h)

Test if rectangle (of given size, starting from cursor position) is
visible / not clipped.


boolean reaper.ImGui_IsRectVisibleEx(ImGui_Context ctx, number rect_min_x, number rect_min_y, number rect_max_x, number rect_max_y)

Test if rectangle (in screen space) is visible / not clipped. to perform
coarse clipping on user's side.


boolean reaper.ImGui_IsWindowAppearing(ImGui_Context ctx)

Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.


boolean reaper.ImGui_IsWindowDocked(ImGui_Context ctx)

Is current window docked into another window or a REAPER docker?


boolean reaper.ImGui_IsWindowFocused(ImGui_Context ctx, optional integer flagsIn)

Is current window focused? or its root/child, depending on flags.
See flags for options.


boolean reaper.ImGui_IsWindowHovered(ImGui_Context ctx, optional integer flagsIn)

Is current window hovered (and typically: not blocked by a popup/modal)?
See flags for options.


integer reaper.ImGui_Key_0()


integer reaper.ImGui_Key_1()


integer reaper.ImGui_Key_2()


integer reaper.ImGui_Key_3()


integer reaper.ImGui_Key_4()


integer reaper.ImGui_Key_5()


integer reaper.ImGui_Key_6()


integer reaper.ImGui_Key_7()


integer reaper.ImGui_Key_8()


integer reaper.ImGui_Key_9()


integer reaper.ImGui_Key_A()


integer reaper.ImGui_Key_Apostrophe()

'


integer reaper.ImGui_Key_B()


integer reaper.ImGui_Key_Backslash()

\


integer reaper.ImGui_Key_Backspace()


integer reaper.ImGui_Key_C()


integer reaper.ImGui_Key_CapsLock()


integer reaper.ImGui_Key_Comma()

,


integer reaper.ImGui_Key_D()


integer reaper.ImGui_Key_Delete()


integer reaper.ImGui_Key_DownArrow()


integer reaper.ImGui_Key_E()


integer reaper.ImGui_Key_End()


integer reaper.ImGui_Key_Enter()


integer reaper.ImGui_Key_Equal()

=


integer reaper.ImGui_Key_Escape()


integer reaper.ImGui_Key_F()


integer reaper.ImGui_Key_F1()


integer reaper.ImGui_Key_F10()


integer reaper.ImGui_Key_F11()


integer reaper.ImGui_Key_F12()


integer reaper.ImGui_Key_F2()


integer reaper.ImGui_Key_F3()


integer reaper.ImGui_Key_F4()


integer reaper.ImGui_Key_F5()


integer reaper.ImGui_Key_F6()


integer reaper.ImGui_Key_F7()


integer reaper.ImGui_Key_F8()


integer reaper.ImGui_Key_F9()


integer reaper.ImGui_Key_G()


integer reaper.ImGui_Key_GraveAccent()

`


integer reaper.ImGui_Key_H()


integer reaper.ImGui_Key_Home()


integer reaper.ImGui_Key_I()


integer reaper.ImGui_Key_Insert()


integer reaper.ImGui_Key_J()


integer reaper.ImGui_Key_K()


integer reaper.ImGui_Key_Keypad0()


integer reaper.ImGui_Key_Keypad1()


integer reaper.ImGui_Key_Keypad2()


integer reaper.ImGui_Key_Keypad3()


integer reaper.ImGui_Key_Keypad4()


integer reaper.ImGui_Key_Keypad5()


integer reaper.ImGui_Key_Keypad6()


integer reaper.ImGui_Key_Keypad7()


integer reaper.ImGui_Key_Keypad8()


integer reaper.ImGui_Key_Keypad9()


integer reaper.ImGui_Key_KeypadAdd()


integer reaper.ImGui_Key_KeypadDecimal()


integer reaper.ImGui_Key_KeypadDivide()


integer reaper.ImGui_Key_KeypadEnter()


integer reaper.ImGui_Key_KeypadEqual()


integer reaper.ImGui_Key_KeypadMultiply()


integer reaper.ImGui_Key_KeypadSubtract()


integer reaper.ImGui_Key_L()


integer reaper.ImGui_Key_LeftAlt()


integer reaper.ImGui_Key_LeftArrow()


integer reaper.ImGui_Key_LeftBracket()

[


integer reaper.ImGui_Key_LeftCtrl()


integer reaper.ImGui_Key_LeftShift()


integer reaper.ImGui_Key_LeftSuper()


integer reaper.ImGui_Key_M()


integer reaper.ImGui_Key_Menu()


integer reaper.ImGui_Key_Minus()

-


integer reaper.ImGui_Key_MouseLeft()


integer reaper.ImGui_Key_MouseMiddle()


integer reaper.ImGui_Key_MouseRight()


integer reaper.ImGui_Key_MouseWheelX()


integer reaper.ImGui_Key_MouseWheelY()


integer reaper.ImGui_Key_MouseX1()


integer reaper.ImGui_Key_MouseX2()


integer reaper.ImGui_Key_N()


integer reaper.ImGui_Key_NumLock()


integer reaper.ImGui_Key_O()


integer reaper.ImGui_Key_P()


integer reaper.ImGui_Key_PageDown()


integer reaper.ImGui_Key_PageUp()


integer reaper.ImGui_Key_Pause()


integer reaper.ImGui_Key_Period()

.


integer reaper.ImGui_Key_PrintScreen()


integer reaper.ImGui_Key_Q()


integer reaper.ImGui_Key_R()


integer reaper.ImGui_Key_RightAlt()


integer reaper.ImGui_Key_RightArrow()


integer reaper.ImGui_Key_RightBracket()

]


integer reaper.ImGui_Key_RightCtrl()


integer reaper.ImGui_Key_RightShift()


integer reaper.ImGui_Key_RightSuper()


integer reaper.ImGui_Key_S()


integer reaper.ImGui_Key_ScrollLock()


integer reaper.ImGui_Key_Semicolon()

;


integer reaper.ImGui_Key_Slash()

/


integer reaper.ImGui_Key_Space()


integer reaper.ImGui_Key_T()


integer reaper.ImGui_Key_Tab()


integer reaper.ImGui_Key_U()


integer reaper.ImGui_Key_UpArrow()


integer reaper.ImGui_Key_V()


integer reaper.ImGui_Key_W()


integer reaper.ImGui_Key_X()


integer reaper.ImGui_Key_Y()


integer reaper.ImGui_Key_Z()


reaper.ImGui_LabelText(ImGui_Context ctx, string label, string text)

Display text+label aligned the same way as value+label widgets


boolean retval, integer current_item = reaper.ImGui_ListBox(ImGui_Context ctx, string label, integer current_item, string items, optional integer height_in_itemsIn)

This is an helper over BeginListBox/EndListBox for convenience purpose.

Each item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).


reaper.ImGui_ListClipper_Begin(ImGui_ListClipper clipper, integer items_count, optional number items_heightIn)

- items_count: Use INT_MAX if you don't know how many items you have
(in which case the cursor won't be advanced in the final step)
- items_height: Use -1.0 to be calculated automatically on first step.
Otherwise pass in the distance between your items, typically
GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.


reaper.ImGui_ListClipper_End(ImGui_ListClipper clipper)

Automatically called on the last call of ListClipper_Step that returns false.


reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper clipper, integer item_min, integer item_max)

Call ListClipper_ForceDisplayRangeByIndices before first call to
ListClipper_Step if you need a range of items to be displayed regardless of
visibility.

item_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due
to alignment/padding of certain items it is likely that an extra item may be
included on either end of the display range.


integer display_start, integer display_end = reaper.ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper clipper)


boolean reaper.ImGui_ListClipper_Step(ImGui_ListClipper clipper)

Call until it returns false. The display_start/display_end fields from
ListClipper_GetDisplayRange will be set and you can process/draw those items.


reaper.ImGui_LogFinish(ImGui_Context ctx)

Stop logging (close file, etc.)


reaper.ImGui_LogText(ImGui_Context ctx, string text)

Pass text data straight to log (without being displayed)


reaper.ImGui_LogToClipboard(ImGui_Context ctx, optional integer auto_open_depthIn)

Start logging all text output from the interface to the OS clipboard.
See also SetClipboardText.


reaper.ImGui_LogToFile(ImGui_Context ctx, optional integer auto_open_depthIn, optional string filenameIn)

Start logging all text output from the interface to a file.
The data is saved to $resource_path/imgui_log.txt if filename is nil.


reaper.ImGui_LogToTTY(ImGui_Context ctx, optional integer auto_open_depthIn)

Start logging all text output from the interface to the TTY (stdout).


boolean retval, optional boolean p_selected = reaper.ImGui_MenuItem(ImGui_Context ctx, string label, optional string shortcutIn, optional boolean p_selected, optional boolean enabledIn)

Return true when activated. Shortcuts are displayed for convenience but not
processed by ImGui at the moment. Toggle state is written to 'selected' when
provided.


integer reaper.ImGui_Mod_Alt()


integer reaper.ImGui_Mod_Ctrl()


integer reaper.ImGui_Mod_None()


integer reaper.ImGui_Mod_Shift()


integer reaper.ImGui_Mod_Shortcut()

Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).


integer reaper.ImGui_Mod_Super()


integer reaper.ImGui_MouseButton_Left()


integer reaper.ImGui_MouseButton_Middle()


integer reaper.ImGui_MouseButton_Right()


integer reaper.ImGui_MouseCursor_Arrow()


integer reaper.ImGui_MouseCursor_Hand()

(Unused by Dear ImGui functions. Use for e.g. hyperlinks)


integer reaper.ImGui_MouseCursor_None()


integer reaper.ImGui_MouseCursor_NotAllowed()

When hovering something with disallowed interaction. Usually a crossed circle.


integer reaper.ImGui_MouseCursor_ResizeAll()

(Unused by Dear ImGui functions)


integer reaper.ImGui_MouseCursor_ResizeEW()

When hovering over a vertical border or a column.


integer reaper.ImGui_MouseCursor_ResizeNESW()

When hovering over the bottom-left corner of a window.


integer reaper.ImGui_MouseCursor_ResizeNS()

When hovering over a horizontal border.


integer reaper.ImGui_MouseCursor_ResizeNWSE()

When hovering over the bottom-right corner of a window.


integer reaper.ImGui_MouseCursor_TextInput()

When hovering over InputText, etc.


reaper.ImGui_NewLine(ImGui_Context ctx)

Undo a SameLine() or force a new line when in a horizontal-layout context.


number min, number max = reaper.ImGui_NumericLimits_Double()

Returns DBL_MIN and DBL_MAX for this system.


number min, number max = reaper.ImGui_NumericLimits_Float()

Returns FLT_MIN and FLT_MAX for this system.


integer min, integer max = reaper.ImGui_NumericLimits_Int()

Returns INT_MIN and INT_MAX for this system.


reaper.ImGui_OpenPopup(ImGui_Context ctx, string str_id, optional integer popup_flagsIn)

Set popup state to open (don't call every frame!).
ImGuiPopupFlags are available for opening options.

If not modal: they can be closed by clicking anywhere outside them, or by
pressing ESCAPE.

Use PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's
already one at the same level.


reaper.ImGui_OpenPopupOnItemClick(ImGui_Context ctx, optional string str_idIn, optional integer popup_flagsIn)

Helper to open popup when clicked on last item. return true when just opened.
(Note: actually triggers on the mouse _released_ event to be consistent with
popup behaviors.)


reaper.ImGui_PlotHistogram(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)


reaper.ImGui_PlotLines(ImGui_Context ctx, string labelreaper_array values, optional integer values_offsetIn, optional string overlay_textIn, optional number scale_minIn, optional number scale_maxIn, optional number graph_size_wIn, optional number graph_size_hIn)


number x, number y = reaper.ImGui_PointConvertNative(ImGui_Context ctx, number x, number y, optional boolean to_nativeIn)

Convert a position from the current platform's native coordinate position
system to ReaImGui global coordinates (or vice versa).

This effectively flips the Y coordinate on macOS and applies HiDPI scaling on
Windows and Linux.


reaper.ImGui_PopButtonRepeat(ImGui_Context ctx)

See PushButtonRepeat


reaper.ImGui_PopClipRect(ImGui_Context ctx)

See PushClipRect


reaper.ImGui_PopFont(ImGui_Context ctx)

See PushFont.


reaper.ImGui_PopID(ImGui_Context ctx)

Pop from the ID stack.


reaper.ImGui_PopItemWidth(ImGui_Context ctx)

See PushItemWidth


reaper.ImGui_PopStyleColor(ImGui_Context ctx, optional integer countIn)


reaper.ImGui_PopStyleVar(ImGui_Context ctx, optional integer countIn)

Reset a style variable.


reaper.ImGui_PopTabStop(ImGui_Context ctx)

See PushTabStop


reaper.ImGui_PopTextWrapPos(ImGui_Context ctx)


integer reaper.ImGui_PopupFlags_AnyPopup()

PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel


integer reaper.ImGui_PopupFlags_AnyPopupId()

For IsPopupOpen: ignore the str_id parameter and test for any popup.


integer reaper.ImGui_PopupFlags_AnyPopupLevel()

For IsPopupOpen: search/test at any level of the popup stack
(default test in the current level).


integer reaper.ImGui_PopupFlags_MouseButtonLeft()

For BeginPopupContext*(): open on Left Mouse release.
Guaranteed to always be == 0 (same as MouseButton_Left).


integer reaper.ImGui_PopupFlags_MouseButtonMiddle()

For BeginPopupContext*(): open on Middle Mouse release.
Guaranteed to always be == 2 (same as MouseButton_Middle).


integer reaper.ImGui_PopupFlags_MouseButtonRight()

For BeginPopupContext*(): open on Right Mouse release.
Guaranteed to always be == 1 (same as MouseButton_Right).


integer reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()

For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup
at the same level of the popup stack.


integer reaper.ImGui_PopupFlags_NoOpenOverItems()

For BeginPopupContextWindow: don't return true when hovering items,
only when hovering empty space.


integer reaper.ImGui_PopupFlags_None()


reaper.ImGui_ProgressBar(ImGui_Context ctx, number fraction, optional number size_arg_wIn, optional number size_arg_hIn, optional string overlayIn)


reaper.ImGui_PushButtonRepeat(ImGui_Context ctx, boolean repeat)

In 'repeat' mode, Button*() functions return repeated true in a typematic
manner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).

Note that you can call IsItemActive after any Button to tell if the button is
held in the current frame.


reaper.ImGui_PushClipRect(ImGui_Context ctx, number clip_rect_min_x, number clip_rect_min_y, number clip_rect_max_x, number clip_rect_max_y, boolean intersect_with_current_clip_rect)


reaper.ImGui_PushFont(ImGui_Context ctxImGui_Font font)

Change the current font. Use nil to push the default font.
The font object must have been registered using Attach. See PopFont.


reaper.ImGui_PushID(ImGui_Context ctx, string str_id)

Push string into the ID stack.


reaper.ImGui_PushItemWidth(ImGui_Context ctx, number item_width)

Push width of items for common large "item+label" widgets.

- \>0.0: width in pixels
- <0.0 align xx pixels to the right of window
(so -FLT_MIN always align width to the right side)
- 0.0 = default to ~2/3 of windows width.


reaper.ImGui_PushStyleColor(ImGui_Context ctx, integer idx, integer col_rgba)

Temporarily modify a style color.
Call PopStyleColor to undo after use (before the end of the frame).
See Col_* for available style colors.


reaper.ImGui_PushStyleVar(ImGui_Context ctx, integer var_idx, number val1, optional number val2In)

Temporarily modify a style variable.
Call PopStyleVar to undo after use (before the end of the frame).
See StyleVar_* for possible values of 'var_idx'.


reaper.ImGui_PushTabStop(ImGui_Context ctx, boolean tab_stop)

Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it
for certain widgets


reaper.ImGui_PushTextWrapPos(ImGui_Context ctx, optional number wrap_local_pos_xIn)

Push word-wrapping position for Text*() commands.

- < 0.0: no wrapping
- = 0.0: wrap to end of window (or column)
- \> 0.0: wrap at 'wrap_pos_x' position in window local space.


boolean reaper.ImGui_RadioButton(ImGui_Context ctx, string label, boolean active)

Use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }


boolean retval, integer v = reaper.ImGui_RadioButtonEx(ImGui_Context ctx, string label, integer v, integer v_button)

Shortcut to handle RadioButton's example pattern when value is an integer


reaper.ImGui_ResetMouseDragDelta(ImGui_Context ctx, optional integer buttonIn)


reaper.ImGui_SameLine(ImGui_Context ctx, optional number offset_from_start_xIn, optional number spacingIn)

Call between widgets or groups to layout them horizontally.
X position given in window coordinates.


boolean retval, boolean p_selected = reaper.ImGui_Selectable(ImGui_Context ctx, string label, boolean p_selected, optional integer flagsIn, optional number size_wIn, optional number size_hIn)


integer reaper.ImGui_SelectableFlags_AllowDoubleClick()

Generate press events on double clicks too.


integer reaper.ImGui_SelectableFlags_AllowItemOverlap()

Hit testing to allow subsequent widgets to overlap this one.


integer reaper.ImGui_SelectableFlags_Disabled()

Cannot be selected, display grayed out text.


integer reaper.ImGui_SelectableFlags_DontClosePopups()

Clicking this doesn't close parent popup window.


integer reaper.ImGui_SelectableFlags_None()


integer reaper.ImGui_SelectableFlags_SpanAllColumns()

Selectable frame can span all columns (text will still fit in current column).


reaper.ImGui_Separator(ImGui_Context ctx)

Separator, generally horizontal. inside a menu bar or in horizontal layout
mode, this becomes a vertical separator.


reaper.ImGui_SeparatorText(ImGui_Context ctx, string label)

Text formatted with an horizontal line


reaper.ImGui_SetClipboardText(ImGui_Context ctx, string text)

See also the LogToClipboard function to capture GUI into clipboard,
or easily output text data to the clipboard.


reaper.ImGui_SetColorEditOptions(ImGui_Context ctx, integer flags)

Picker type, etc. User will be able to change many settings, unless you pass
the _NoOptions flag to your calls.


reaper.ImGui_SetConfigVar(ImGui_Context ctx, integer var_idx, number value)


reaper.ImGui_SetCursorPos(ImGui_Context ctx, number local_pos_x, number local_pos_y)

Cursor position in window


reaper.ImGui_SetCursorPosX(ImGui_Context ctx, number local_x)

Cursor X position in window


reaper.ImGui_SetCursorPosY(ImGui_Context ctx, number local_y)

Cursor Y position in window


reaper.ImGui_SetCursorScreenPos(ImGui_Context ctx, number pos_x, number pos_y)

Cursor position in absolute screen coordinates.


boolean reaper.ImGui_SetDragDropPayload(ImGui_Context ctx, string type, string data, optional integer condIn)

The type is a user defined string of maximum 32 characters.
Strings starting with '_' are reserved for dear imgui internal types.
Data is copied and held by imgui.


reaper.ImGui_SetItemAllowOverlap(ImGui_Context ctx)

Allow last item to be overlapped by a subsequent item. sometimes useful with
invisible buttons, selectables, etc. to catch unused area.


reaper.ImGui_SetItemDefaultFocus(ImGui_Context ctx)

Make last item the default focused item of a window.


reaper.ImGui_SetKeyboardFocusHere(ImGui_Context ctx, optional integer offsetIn)

Focus keyboard on the next widget. Use positive 'offset' to access sub
components of a multiple component widget. Use -1 to access previous widget.


reaper.ImGui_SetMouseCursor(ImGui_Context ctx, integer cursor_type)

Set desired mouse cursor shape. See MouseCursor_* for possible values.


reaper.ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context ctx, boolean want_capture_keyboard)

Request capture of keyboard shortcuts in REAPER's global scope for the next frame.


reaper.ImGui_SetNextItemOpen(ImGui_Context ctx, boolean is_open, optional integer condIn)

Set next TreeNode/CollapsingHeader open state.
Can also be done with the TreeNodeFlags_DefaultOpen flag.


reaper.ImGui_SetNextItemWidth(ImGui_Context ctx, number item_width)

Set width of the _next_ common large "item+label" widget.

- \>0.0: width in pixels
- <0.0 align xx pixels to the right of window
(so -FLT_MIN always align width to the right side)


reaper.ImGui_SetNextWindowBgAlpha(ImGui_Context ctx, number alpha)

Set next window background color alpha. Helper to easily override the Alpha
component of Col_WindowBg/Col_ChildBg/Col_PopupBg.
You may also use WindowFlags_NoBackground for a fully transparent window.


reaper.ImGui_SetNextWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)

Set next window collapsed state.


reaper.ImGui_SetNextWindowContentSize(ImGui_Context ctx, number size_w, number size_h)

Set next window content size (~ scrollable client area, which enforce the
range of scrollbars). Not including window decorations (title bar, menu bar,
etc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.


reaper.ImGui_SetNextWindowDockID(ImGui_Context ctx, integer dock_id, optional integer condIn)


reaper.ImGui_SetNextWindowFocus(ImGui_Context ctx)

Set next window to be focused / top-most.


reaper.ImGui_SetNextWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn, optional number pivot_xIn, optional number pivot_yIn)

Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.


reaper.ImGui_SetNextWindowScroll(ImGui_Context ctx, number scroll_x, number scroll_y)

Set next window scrolling value (use < 0.0 to not affect a given axis).


reaper.ImGui_SetNextWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)

Set next window size. set axis to 0.0 to force an auto-fit on this axis.


reaper.ImGui_SetNextWindowSizeConstraints(ImGui_Context ctx, number size_min_w, number size_min_h, number size_max_w, number size_max_hImGui_Function callbackIn)

Set next window size limits. Use -1,-1 on either X/Y axis to preserve the
current size. Use FLT_MAX (second return value of NumericLimits_Float) for no
maximum size. Sizes will be rounded down.


reaper.ImGui_SetScrollFromPosX(ImGui_Context ctx, number local_x, optional number center_x_ratioIn)

Adjust scrolling amount to make given position visible.
Generally GetCursorStartPos() + offset to compute a valid position.


reaper.ImGui_SetScrollFromPosY(ImGui_Context ctx, number local_y, optional number center_y_ratioIn)

Adjust scrolling amount to make given position visible.
Generally GetCursorStartPos() + offset to compute a valid position.


reaper.ImGui_SetScrollHereX(ImGui_Context ctx, optional number center_x_ratioIn)

Adjust scrolling amount to make current cursor position visible.
center_x_ratio=0.0: left, 0.5: center, 1.0: right.
When using to make a "default/current item" visible,
consider using SetItemDefaultFocus instead.


reaper.ImGui_SetScrollHereY(ImGui_Context ctx, optional number center_y_ratioIn)

Adjust scrolling amount to make current cursor position visible.
center_y_ratio=0.0: top, 0.5: center, 1.0: bottom.
When using to make a "default/current item" visible,
consider using SetItemDefaultFocus instead.


reaper.ImGui_SetScrollX(ImGui_Context ctx, number scroll_x)

Set scrolling amount [0 .. GetScrollMaxX()]


reaper.ImGui_SetScrollY(ImGui_Context ctx, number scroll_y)

Set scrolling amount [0 .. GetScrollMaxY()]


reaper.ImGui_SetTabItemClosed(ImGui_Context ctx, string tab_or_docked_window_label)

Notify TabBar or Docking system of a closed tab/window ahead
(useful to reduce visual flicker on reorderable tab bars).
For tab-bar: call after BeginTabBar and before Tab submissions.
Otherwise call with a window name.


reaper.ImGui_SetTooltip(ImGui_Context ctx, string text)

Set a text-only tooltip, typically use with IsItemHovered. override any
previous call to SetTooltip.


reaper.ImGui_SetWindowCollapsed(ImGui_Context ctx, boolean collapsed, optional integer condIn)

(Not recommended) Set current window collapsed state.
Prefer using SetNextWindowCollapsed.


reaper.ImGui_SetWindowCollapsedEx(ImGui_Context ctx, string name, boolean collapsed, optional integer condIn)

Set named window collapsed state.


reaper.ImGui_SetWindowFocus(ImGui_Context ctx)

(Not recommended) Set current window to be focused / top-most.
Prefer using SetNextWindowFocus.


reaper.ImGui_SetWindowFocusEx(ImGui_Context ctx, string name)

Set named window to be focused / top-most. Use an empty name to remove focus.


reaper.ImGui_SetWindowPos(ImGui_Context ctx, number pos_x, number pos_y, optional integer condIn)

(Not recommended) Set current window position - call within Begin/End.
Prefer using SetNextWindowPos, as this may incur tearing and minor side-effects.


reaper.ImGui_SetWindowPosEx(ImGui_Context ctx, string name, number pos_x, number pos_y, optional integer condIn)

Set named window position.


reaper.ImGui_SetWindowSize(ImGui_Context ctx, number size_w, number size_h, optional integer condIn)

(Not recommended) Set current window size - call within Begin/End.
Set size_w and size_h to 0 to force an auto-fit.
Prefer using SetNextWindowSize, as this may incur tearing and minor side-effects.


reaper.ImGui_SetWindowSizeEx(ImGui_Context ctx, string name, number size_w, number size_h, optional integer condIn)

Set named window size. Set axis to 0.0 to force an auto-fit on this axis.


optional boolean p_open = reaper.ImGui_ShowAboutWindow(ImGui_Context ctx, optional boolean p_open)

Create About window.
Display ReaImGui version, Dear ImGui version, credits and build/system information.


optional boolean p_open = reaper.ImGui_ShowDebugLogWindow(ImGui_Context ctx, optional boolean p_open)

Create Debug Log window. display a simplified log of important dear imgui events.


optional boolean p_open = reaper.ImGui_ShowMetricsWindow(ImGui_Context ctx, optional boolean p_open)

Create Metrics/Debugger window.
Display Dear ImGui internals: windows, draw commands, various internal state, etc.


optional boolean p_open = reaper.ImGui_ShowStackToolWindow(ImGui_Context ctx, optional boolean p_open)

Create Stack Tool window. Hover items with mouse to query information about
the source of their unique ID.


boolean retval, number v_rad = reaper.ImGui_SliderAngle(ImGui_Context ctx, string label, number v_rad, optional number v_degrees_minIn, optional number v_degrees_maxIn, optional string formatIn, optional integer flagsIn)


boolean retval, number v = reaper.ImGui_SliderDouble(ImGui_Context ctx, string label, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2 = reaper.ImGui_SliderDouble2(ImGui_Context ctx, string label, number v1, number v2, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3 = reaper.ImGui_SliderDouble3(ImGui_Context ctx, string label, number v1, number v2, number v3, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


boolean retval, number v1, number v2, number v3, number v4 = reaper.ImGui_SliderDouble4(ImGui_Context ctx, string label, number v1, number v2, number v3, number v4, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


boolean reaper.ImGui_SliderDoubleN(ImGui_Context ctx, string labelreaper_array values, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


integer reaper.ImGui_SliderFlags_AlwaysClamp()

Clamp value to min/max bounds when input manually with CTRL+Click.
By default CTRL+Click allows going out of bounds.


integer reaper.ImGui_SliderFlags_Logarithmic()

Make the widget logarithmic (linear otherwise).
Consider using SliderFlags_NoRoundToFormat with this if using a format-string
with small amount of digits.


integer reaper.ImGui_SliderFlags_NoInput()

Disable CTRL+Click or Enter key allowing to input text directly into the widget.


integer reaper.ImGui_SliderFlags_NoRoundToFormat()

Disable rounding underlying value to match precision of the display format
string (e.g. %.3f values are rounded to those 3 digits).


integer reaper.ImGui_SliderFlags_None()


boolean retval, integer v = reaper.ImGui_SliderInt(ImGui_Context ctx, string label, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2 = reaper.ImGui_SliderInt2(ImGui_Context ctx, string label, integer v1, integer v2, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3 = reaper.ImGui_SliderInt3(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)


boolean retval, integer v1, integer v2, integer v3, integer v4 = reaper.ImGui_SliderInt4(ImGui_Context ctx, string label, integer v1, integer v2, integer v3, integer v4, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)


boolean reaper.ImGui_SmallButton(ImGui_Context ctx, string label)

Button with StyleVar_FramePadding=(0,0) to easily embed within text.


integer reaper.ImGui_SortDirection_Ascending()

Ascending = 0->9, A->Z etc.


integer reaper.ImGui_SortDirection_Descending()

Descending = 9->0, Z->A etc.


integer reaper.ImGui_SortDirection_None()


reaper.ImGui_Spacing(ImGui_Context ctx)

Add vertical spacing.


integer reaper.ImGui_StyleVar_Alpha()

Global alpha applies to everything in Dear ImGui.


integer reaper.ImGui_StyleVar_ButtonTextAlign()

Alignment of button text when button is larger than text.
Defaults to (0.5, 0.5) (centered).


integer reaper.ImGui_StyleVar_CellPadding()

Padding within a table cell.


integer reaper.ImGui_StyleVar_ChildBorderSize()

Thickness of border around child windows. Generally set to 0.0 or 1.0.
(Other values are not well tested and more CPU/GPU costly).


integer reaper.ImGui_StyleVar_ChildRounding()

Radius of child window corners rounding. Set to 0.0 to have rectangular windows.


integer reaper.ImGui_StyleVar_DisabledAlpha()

Additional alpha multiplier applied by BeginDisabled.
Multiply over current value of Alpha.


integer reaper.ImGui_StyleVar_FrameBorderSize()

Thickness of border around frames. Generally set to 0.0 or 1.0.
(Other values are not well tested and more CPU/GPU costly).


integer reaper.ImGui_StyleVar_FramePadding()

Padding within a framed rectangle (used by most widgets).


integer reaper.ImGui_StyleVar_FrameRounding()

Radius of frame corners rounding.
Set to 0.0 to have rectangular frame (used by most widgets).


integer reaper.ImGui_StyleVar_GrabMinSize()

Minimum width/height of a grab box for slider/scrollbar.


integer reaper.ImGui_StyleVar_GrabRounding()

Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.


integer reaper.ImGui_StyleVar_IndentSpacing()

Horizontal indentation when e.g. entering a tree node.
Generally == (GetFontSize + StyleVar_FramePadding.x*2).


integer reaper.ImGui_StyleVar_ItemInnerSpacing()

Horizontal and vertical spacing between within elements of a composed widget
(e.g. a slider and its label).


integer reaper.ImGui_StyleVar_ItemSpacing()

Horizontal and vertical spacing between widgets/lines.


integer reaper.ImGui_StyleVar_PopupBorderSize()

Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.
(Other values are not well tested and more CPU/GPU costly).


integer reaper.ImGui_StyleVar_PopupRounding()

Radius of popup window corners rounding.
(Note that tooltip windows use StyleVar_WindowRounding.)


integer reaper.ImGui_StyleVar_ScrollbarRounding()

Radius of grab corners for scrollbar.


integer reaper.ImGui_StyleVar_ScrollbarSize()

Width of the vertical scrollbar, Height of the horizontal scrollbar.


integer reaper.ImGui_StyleVar_SelectableTextAlign()

Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).
It's generally important to keep this left-aligned if you want to lay
multiple items on a same line.


integer reaper.ImGui_StyleVar_SeparatorTextAlign()

Alignment of text within the separator.
Defaults to (0.0, 0.5) (left aligned, center).


integer reaper.ImGui_StyleVar_SeparatorTextBorderSize()

Thickness of border in SeparatorText()


integer reaper.ImGui_StyleVar_SeparatorTextPadding()

Horizontal offset of text from each edge of the separator + spacing on other
axis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.


integer reaper.ImGui_StyleVar_TabRounding()

Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.


integer reaper.ImGui_StyleVar_WindowBorderSize()

Thickness of border around windows. Generally set to 0.0 or 1.0.
(Other values are not well tested and more CPU/GPU costly).


integer reaper.ImGui_StyleVar_WindowMinSize()

Minimum window size. This is a global setting.
If you want to constrain individual windows, use SetNextWindowSizeConstraints.


integer reaper.ImGui_StyleVar_WindowPadding()

Padding within a window.


integer reaper.ImGui_StyleVar_WindowRounding()

Radius of window corners rounding. Set to 0.0 to have rectangular windows.
Large values tend to lead to variety of artifacts and are not recommended.


integer reaper.ImGui_StyleVar_WindowTitleAlign()

Alignment for title bar text.
Defaults to (0.0,0.5) for left-aligned,vertically centered.


integer reaper.ImGui_TabBarFlags_AutoSelectNewTabs()

Automatically select new tabs when they appear.


integer reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()

Resize tabs when they don't fit.


integer reaper.ImGui_TabBarFlags_FittingPolicyScroll()

Add scroll buttons when tabs don't fit.


integer reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()

Disable behavior of closing tabs (that are submitted with p_open != nil)
with middle mouse button. You can still repro this behavior on user's side
with if(IsItemHovered() && IsMouseClicked(2)) p_open = false.


integer reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()

Disable scrolling buttons (apply when fitting policy is
TabBarFlags_FittingPolicyScroll).


integer reaper.ImGui_TabBarFlags_NoTooltip()

Disable tooltips when hovering a tab.


integer reaper.ImGui_TabBarFlags_None()


integer reaper.ImGui_TabBarFlags_Reorderable()

Allow manually dragging tabs to re-order them + New tabs are appended at
the end of list.


integer reaper.ImGui_TabBarFlags_TabListPopupButton()

Disable buttons to open the tab list popup.


boolean reaper.ImGui_TabItemButton(ImGui_Context ctx, string label, optional integer flagsIn)

Create a Tab behaving like a button. Return true when clicked.
Cannot be selected in the tab bar.


integer reaper.ImGui_TabItemFlags_Leading()

Enforce the tab position to the left of the tab bar (after the tab list popup button).


integer reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()

Disable behavior of closing tabs (that are submitted with p_open != nil) with
middle mouse button. You can still repro this behavior on user's side with
if(IsItemHovered() && IsMouseClicked(2)) p_open = false.


integer reaper.ImGui_TabItemFlags_NoPushId()

Don't call PushID(tab->ID)/PopID() on BeginTabItem/EndTabItem.


integer reaper.ImGui_TabItemFlags_NoReorder()

Disable reordering this tab or having another tab cross over this tab.


integer reaper.ImGui_TabItemFlags_NoTooltip()

Disable tooltip for the given tab.


integer reaper.ImGui_TabItemFlags_None()


integer reaper.ImGui_TabItemFlags_SetSelected()

Trigger flag to programmatically make the tab selected when calling BeginTabItem.


integer reaper.ImGui_TabItemFlags_Trailing()

Enforce the tab position to the right of the tab bar (before the scrolling buttons).


integer reaper.ImGui_TabItemFlags_UnsavedDocument()

Append '*' to title without affecting the ID, as a convenience to avoid using
the ### operator. Also: tab is selected on closure and closure is deferred by
one frame to allow code to undo it without flicker.


integer reaper.ImGui_TableBgTarget_CellBg()

Set cell background color (top-most color).


integer reaper.ImGui_TableBgTarget_None()


integer reaper.ImGui_TableBgTarget_RowBg0()

Set row background color 0 (generally used for background,
automatically set when TableFlags_RowBg is used).


integer reaper.ImGui_TableBgTarget_RowBg1()

Set row background color 1 (generally used for selection marking).


integer reaper.ImGui_TableColumnFlags_DefaultHide()

Default as a hidden/disabled column.


integer reaper.ImGui_TableColumnFlags_DefaultSort()

Default as a sorting column.


integer reaper.ImGui_TableColumnFlags_Disabled()

Overriding/master disable flag: hide column, won't show in context menu
(unlike calling TableSetColumnEnabled which manipulates the user accessible state).


integer reaper.ImGui_TableColumnFlags_IndentDisable()

Ignore current Indent value when entering cell (default for columns > 0).
Indentation changes _within_ the cell will still be honored.


integer reaper.ImGui_TableColumnFlags_IndentEnable()

Use current Indent value when entering cell (default for column 0).


integer reaper.ImGui_TableColumnFlags_IsEnabled()

Status: is enabled == not hidden by user/api (referred to as "Hide" in
_DefaultHide and _NoHide) flags.


integer reaper.ImGui_TableColumnFlags_IsHovered()

Status: is hovered by mouse.


integer reaper.ImGui_TableColumnFlags_IsSorted()

Status: is currently part of the sort specs.


integer reaper.ImGui_TableColumnFlags_IsVisible()

Status: is visible == is enabled AND not clipped by scrolling.


integer reaper.ImGui_TableColumnFlags_NoClip()

Disable clipping for this column
(all NoClip columns will render in a same draw command).


integer reaper.ImGui_TableColumnFlags_NoHeaderLabel()

TableHeadersRow will not submit label for this column.
Convenient for some small columns. Name will still appear in context menu.


integer reaper.ImGui_TableColumnFlags_NoHeaderWidth()

Disable header text width contribution to automatic column width.


integer reaper.ImGui_TableColumnFlags_NoHide()

Disable ability to hide/disable this column.


integer reaper.ImGui_TableColumnFlags_NoReorder()

Disable manual reordering this column, this will also prevent other columns
from crossing over this column.


integer reaper.ImGui_TableColumnFlags_NoResize()

Disable manual resizing.


integer reaper.ImGui_TableColumnFlags_NoSort()

Disable ability to sort on this field
(even if TableFlags_Sortable is set on the table).


integer reaper.ImGui_TableColumnFlags_NoSortAscending()

Disable ability to sort in the ascending direction.


integer reaper.ImGui_TableColumnFlags_NoSortDescending()

Disable ability to sort in the descending direction.


integer reaper.ImGui_TableColumnFlags_None()


integer reaper.ImGui_TableColumnFlags_PreferSortAscending()

Make the initial sort direction Ascending when first sorting on this column (default).


integer reaper.ImGui_TableColumnFlags_PreferSortDescending()

Make the initial sort direction Descending when first sorting on this column.


integer reaper.ImGui_TableColumnFlags_WidthFixed()

Column will not stretch. Preferable with horizontal scrolling enabled
(default if table sizing policy is _SizingFixedFit and table is resizable).


integer reaper.ImGui_TableColumnFlags_WidthStretch()

Column will stretch. Preferable with horizontal scrolling disabled
(default if table sizing policy is _SizingStretchSame or _SizingStretchProp).


integer reaper.ImGui_TableFlags_Borders()

Draw all borders.


integer reaper.ImGui_TableFlags_BordersH()

Draw horizontal borders.


integer reaper.ImGui_TableFlags_BordersInner()

Draw inner borders.


integer reaper.ImGui_TableFlags_BordersInnerH()

Draw horizontal borders between rows.


integer reaper.ImGui_TableFlags_BordersInnerV()

Draw vertical borders between columns.


integer reaper.ImGui_TableFlags_BordersOuter()

Draw outer borders.


integer reaper.ImGui_TableFlags_BordersOuterH()

Draw horizontal borders at the top and bottom.


integer reaper.ImGui_TableFlags_BordersOuterV()

Draw vertical borders on the left and right sides.


integer reaper.ImGui_TableFlags_BordersV()

Draw vertical borders.


integer reaper.ImGui_TableFlags_ContextMenuInBody()

Right-click on columns body/contents will display table context menu.
By default it is available in TableHeadersRow.


integer reaper.ImGui_TableFlags_Hideable()

Enable hiding/disabling columns in context menu.


integer reaper.ImGui_TableFlags_NoClip()

Disable clipping rectangle for every individual columns
(reduce draw command count, items will be able to overflow into other columns).
Generally incompatible with TableSetupScrollFreeze.


integer reaper.ImGui_TableFlags_NoHostExtendX()

Make outer width auto-fit to columns, overriding outer_size.x value. Only
available when ScrollX/ScrollY are disabled and Stretch columns are not used.


integer reaper.ImGui_TableFlags_NoHostExtendY()

Make outer height stop exactly at outer_size.y (prevent auto-extending table
past the limit). Only available when ScrollX/ScrollY are disabled.
Data below the limit will be clipped and not visible.


integer reaper.ImGui_TableFlags_NoKeepColumnsVisible()

Disable keeping column always minimally visible when ScrollX is off and table
gets too small. Not recommended if columns are resizable.


integer reaper.ImGui_TableFlags_NoPadInnerX()

Disable inner padding between columns (double inner padding if
TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).


integer reaper.ImGui_TableFlags_NoPadOuterX()

Default if TableFlags_BordersOuterV is off. Disable outermost padding.


integer reaper.ImGui_TableFlags_NoSavedSettings()

Disable persisting columns order, width and sort settings in the .ini file.


integer reaper.ImGui_TableFlags_None()


integer reaper.ImGui_TableFlags_PadOuterX()

Default if TableFlags_BordersOuterV is on. Enable outermost padding.
Generally desirable if you have headers.


integer reaper.ImGui_TableFlags_PreciseWidths()

Disable distributing remainder width to stretched columns (width allocation
on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this
flag: 33,33,33).
With larger number of columns, resizing will appear to be less smooth.


integer reaper.ImGui_TableFlags_Reorderable()

Enable reordering columns in header row
(need calling TableSetupColumn + TableHeadersRow to display headers).


integer reaper.ImGui_TableFlags_Resizable()

Enable resizing columns.


integer reaper.ImGui_TableFlags_RowBg()

Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of
calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).


integer reaper.ImGui_TableFlags_ScrollX()

Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to
specify the container size. Changes default sizing policy.
Because this creates a child window, ScrollY is currently generally
recommended when using ScrollX.


integer reaper.ImGui_TableFlags_ScrollY()

Enable vertical scrolling.
Require 'outer_size' parameter of BeginTable to specify the container size.


integer reaper.ImGui_TableFlags_SizingFixedFit()

Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),
matching contents width.


integer reaper.ImGui_TableFlags_SizingFixedSame()

Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),
matching the maximum contents width of all columns.
Implicitly enable TableFlags_NoKeepColumnsVisible.


integer reaper.ImGui_TableFlags_SizingStretchProp()

Columns default to _WidthStretch with default weights proportional to each
columns contents widths.


integer reaper.ImGui_TableFlags_SizingStretchSame()

Columns default to _WidthStretch with default weights all equal,
unless overriden by TableSetupColumn.


integer reaper.ImGui_TableFlags_SortMulti()

Hold shift when clicking headers to sort on multiple column.
TableGetGetSortSpecs may return specs where (SpecsCount > 1).


integer reaper.ImGui_TableFlags_SortTristate()

Allow no sorting, disable default sorting.
TableGetColumnSortSpecs may return specs where (SpecsCount == 0).


integer reaper.ImGui_TableFlags_Sortable()

Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.
Also see TableFlags_SortMulti and TableFlags_SortTristate.


integer reaper.ImGui_TableGetColumnCount(ImGui_Context ctx)

Return number of columns (value passed to BeginTable).


integer reaper.ImGui_TableGetColumnFlags(ImGui_Context ctx, optional integer column_nIn)

Return column flags so you can query their Enabled/Visible/Sorted/Hovered
status flags. Pass -1 to use current column.


integer reaper.ImGui_TableGetColumnIndex(ImGui_Context ctx)

Return current column index.


string reaper.ImGui_TableGetColumnName(ImGui_Context ctx, optional integer column_nIn)

Return "" if column didn't have a name declared by TableSetupColumn.
Pass -1 to use current column.


boolean retval, integer column_user_id, integer column_index, integer sort_order, integer sort_direction = reaper.ImGui_TableGetColumnSortSpecs(ImGui_Context ctx, integer id)

Sorting specification for one column of a table.
Call while incrementing 'id' from 0 until false is returned.

- ColumnUserID: User id of the column (if specified by a TableSetupColumn call)
- ColumnIndex: Index of the column
- SortOrder: Index within parent SortSpecs (always stored in order starting
from 0, tables sorted on a single criteria will always have a 0 here)
- SortDirection: SortDirection_Ascending or SortDirection_Descending
(you can use this or SortSign, whichever is more convenient for your sort
function)

See TableNeedSort.


integer reaper.ImGui_TableGetRowIndex(ImGui_Context ctx)

Return current row index.


reaper.ImGui_TableHeader(ImGui_Context ctx, string label)

Submit one header cell manually (rarely used). See TableSetupColumn.


reaper.ImGui_TableHeadersRow(ImGui_Context ctx)

Submit all headers cells based on data provided to TableSetupColumn +
submit context menu.


boolean retval, boolean has_specs = reaper.ImGui_TableNeedSort(ImGui_Context ctx)

Return true once when sorting specs have changed since last call,
or the first time. 'has_specs' is false when not sorting.

See TableGetColumnSortSpecs.


boolean reaper.ImGui_TableNextColumn(ImGui_Context ctx)

Append into the next column (or first column of next row if currently in
last column). Return true when column is visible.


reaper.ImGui_TableNextRow(ImGui_Context ctx, optional integer row_flagsIn, optional number min_row_heightIn)

Append into the first cell of a new row.


integer reaper.ImGui_TableRowFlags_Headers()

Identify header row (set default background color + width of its contents
accounted different for auto column width).


integer reaper.ImGui_TableRowFlags_None()

For TableNextRow.


reaper.ImGui_TableSetBgColor(ImGui_Context ctx, integer target, integer color_rgba, optional integer column_nIn)

Change the color of a cell, row, or column.
See TableBgTarget_* flags for details.


reaper.ImGui_TableSetColumnEnabled(ImGui_Context ctx, integer column_n, boolean v)

Change user-accessible enabled/disabled state of a column, set to false to
hide the column. Note that end-user can use the context menu to change this
themselves (right-click in headers, or right-click in columns body with
TableFlags_ContextMenuInBody).

- Require table to have the TableFlags_Hideable flag because we are manipulating
user accessible state.
- Request will be applied during next layout, which happens on the first call to
TableNextRow after Begin_Table.
- For the getter you can test
(TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0.


boolean reaper.ImGui_TableSetColumnIndex(ImGui_Context ctx, integer column_n)

Append into the specified column. Return true when column is visible.


reaper.ImGui_TableSetupColumn(ImGui_Context ctx, string label, optional integer flagsIn, optional number init_width_or_weightIn, optional integer user_idIn)

Use to specify label, resizing policy, default width/weight, id,
various other flags etc.


reaper.ImGui_TableSetupScrollFreeze(ImGui_Context ctx, integer cols, integer rows)

Lock columns/rows so they stay visible when scrolled.


reaper.ImGui_Text(ImGui_Context ctx, string text)


reaper.ImGui_TextColored(ImGui_Context ctx, integer col_rgba, string text)

Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();


reaper.ImGui_TextDisabled(ImGui_Context ctx, string text)


reaper.ImGui_TextFilter_Clear(ImGui_TextFilter filter)


boolean reaper.ImGui_TextFilter_Draw(ImGui_TextFilter filterImGui_Context ctx, optional string labelIn, optional number widthIn)

Helper calling InputText+TextFilter_Set


string reaper.ImGui_TextFilter_Get(ImGui_TextFilter filter)


boolean reaper.ImGui_TextFilter_IsActive(ImGui_TextFilter filter)


boolean reaper.ImGui_TextFilter_PassFilter(ImGui_TextFilter filter, string text)


reaper.ImGui_TextFilter_Set(ImGui_TextFilter filter, string filter_text)


reaper.ImGui_TextWrapped(ImGui_Context ctx, string text)

Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.
Note that this won't work on an auto-resizing window if there's no other
widgets to extend the window width, yoy may need to set a size using
SetNextWindowSize.


boolean reaper.ImGui_TreeNode(ImGui_Context ctx, string label, optional integer flagsIn)

TreeNode functions return true when the node is open, in which case you need
to also call TreePop when you are finished displaying the tree node contents.


boolean reaper.ImGui_TreeNodeEx(ImGui_Context ctx, string str_id, string label, optional integer flagsIn)

Helper variation to easily decorelate the id from the displayed string.
Read the [FAQ](https://dearimgui.org/faq) about why and how to use ID.
To align arbitrary text at the same level as a TreeNode you can use Bullet.


integer reaper.ImGui_TreeNodeFlags_AllowItemOverlap()

Hit testing to allow subsequent widgets to overlap this one.


integer reaper.ImGui_TreeNodeFlags_Bullet()

Display a bullet instead of arrow.


integer reaper.ImGui_TreeNodeFlags_CollapsingHeader()

TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog


integer reaper.ImGui_TreeNodeFlags_DefaultOpen()

Default node to be open.


integer reaper.ImGui_TreeNodeFlags_FramePadding()

Use FramePadding (even for an unframed text node) to vertically align text
baseline to regular widget height.
Equivalent to calling AlignTextToFramePadding.


integer reaper.ImGui_TreeNodeFlags_Framed()

Draw frame with background (e.g. for CollapsingHeader).


integer reaper.ImGui_TreeNodeFlags_Leaf()

No collapsing, no arrow (use as a convenience for leaf nodes).


integer reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()

Don't automatically and temporarily open node when Logging is active
(by default logging will automatically open tree nodes).


integer reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()

Don't do a TreePush when open (e.g. for CollapsingHeader)
= no extra indent nor pushing on ID stack.


integer reaper.ImGui_TreeNodeFlags_None()


integer reaper.ImGui_TreeNodeFlags_OpenOnArrow()

Only open when clicking on the arrow part.
If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or
double-click all box to open.


integer reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()

Need double-click to open node.


integer reaper.ImGui_TreeNodeFlags_Selected()

Draw as selected.


integer reaper.ImGui_TreeNodeFlags_SpanAvailWidth()

Extend hit box to the right-most edge, even if not framed.
This is not the default in order to allow adding other items on the same line.
In the future we may refactor the hit system to be front-to-back,
allowing natural overlaps and then this can become the default.


integer reaper.ImGui_TreeNodeFlags_SpanFullWidth()

Extend hit box to the left-most and right-most edges (bypass the indented area).


reaper.ImGui_TreePop(ImGui_Context ctx)

Unindent()+PopID()


reaper.ImGui_TreePush(ImGui_Context ctx, string str_id)

Indent()+PushID(). Already called by TreeNode when returning true,
but you can call TreePush/TreePop yourself if desired.


reaper.ImGui_Unindent(ImGui_Context ctx, optional number indent_wIn)

Move content position back to the left, by 'indent_w', or
StyleVar_IndentSpacing if 'indent_w' <= 0


boolean retval, number v = reaper.ImGui_VSliderDouble(ImGui_Context ctx, string label, number size_w, number size_h, number v, number v_min, number v_max, optional string formatIn, optional integer flagsIn)


boolean retval, integer v = reaper.ImGui_VSliderInt(ImGui_Context ctx, string label, number size_w, number size_h, integer v, integer v_min, integer v_max, optional string formatIn, optional integer flagsIn)


boolean reaper.ImGui_ValidatePtr(identifier pointer, string type)

Return whether the pointer of the specified type is valid.

Supported types are:

- ImGui_Context*
- ImGui_DrawList*
- ImGui_DrawListSplitter*
- ImGui_Font*
- ImGui_Function*
- ImGui_Image*
- ImGui_ImageSet*
- ImGui_ListClipper*
- ImGui_TextFilter*
- ImGui_Viewport*


number x, number y = reaper.ImGui_Viewport_GetCenter(ImGui_Viewport viewport)

Center of the viewport.


number x, number y = reaper.ImGui_Viewport_GetPos(ImGui_Viewport viewport)

Main Area: Position of the viewport


number w, number h = reaper.ImGui_Viewport_GetSize(ImGui_Viewport viewport)

Main Area: Size of the viewport.


number x, number y = reaper.ImGui_Viewport_GetWorkCenter(ImGui_Viewport viewport)

Center of the viewport's work area.


number x, number y = reaper.ImGui_Viewport_GetWorkPos(ImGui_Viewport viewport)

>= Viewport_GetPos


number w, number h = reaper.ImGui_Viewport_GetWorkSize(ImGui_Viewport viewport)

<= Viewport_GetSize


integer reaper.ImGui_WindowFlags_AlwaysAutoResize()

Resize every window to its content every frame.


integer reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()

Always show horizontal scrollbar (even if ContentSize.x < Size.x).


integer reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()

Ensure child windows without border uses StyleVar_WindowPadding
(ignored by default for non-bordered child windows, because more convenient).


integer reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()

Always show vertical scrollbar (even if ContentSize.y < Size.y).


integer reaper.ImGui_WindowFlags_HorizontalScrollbar()

Allow horizontal scrollbar to appear (off by default).
You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to
specify width. Read code in the demo's "Horizontal Scrolling" section.


integer reaper.ImGui_WindowFlags_MenuBar()

Has a menu-bar.


integer reaper.ImGui_WindowFlags_NoBackground()

Disable drawing background color (WindowBg, etc.) and outside border.
Similar as using SetNextWindowBgAlpha(0.0).


integer reaper.ImGui_WindowFlags_NoCollapse()

Disable user collapsing window by double-clicking on it.
Also referred to as Window Menu Button (e.g. within a docking node).


integer reaper.ImGui_WindowFlags_NoDecoration()

WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |
WindowFlags_NoCollapse


integer reaper.ImGui_WindowFlags_NoDocking()

Disable docking of this window.


integer reaper.ImGui_WindowFlags_NoFocusOnAppearing()

Disable taking focus when transitioning from hidden to visible state.


integer reaper.ImGui_WindowFlags_NoInputs()

WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus


integer reaper.ImGui_WindowFlags_NoMouseInputs()

Disable catching mouse, hovering test with pass through.


integer reaper.ImGui_WindowFlags_NoMove()

Disable user moving the window.


integer reaper.ImGui_WindowFlags_NoNav()

WindowFlags_NoNavInputs | WindowFlags_NoNavFocus


integer reaper.ImGui_WindowFlags_NoNavFocus()

No focusing toward this window with gamepad/keyboard navigation
(e.g. skipped by CTRL+TAB).


integer reaper.ImGui_WindowFlags_NoNavInputs()

No gamepad/keyboard navigation within the window.


integer reaper.ImGui_WindowFlags_NoResize()

Disable user resizing with the lower-right grip.


integer reaper.ImGui_WindowFlags_NoSavedSettings()

Never load/save settings in .ini file.


integer reaper.ImGui_WindowFlags_NoScrollWithMouse()

Disable user vertically scrolling with mouse wheel.
On child window, mouse wheel will be forwarded to the parent unless
NoScrollbar is also set.


integer reaper.ImGui_WindowFlags_NoScrollbar()

Disable scrollbars (window can still scroll with mouse or programmatically).


integer reaper.ImGui_WindowFlags_NoTitleBar()

Disable title-bar.


integer reaper.ImGui_WindowFlags_None()

Default flag.


integer reaper.ImGui_WindowFlags_TopMost()

Show the window above all non-topmost windows.


integer reaper.ImGui_WindowFlags_UnsavedDocument()

Display a dot next to the title. When used in a tab/docking context,
tab is selected when clicking the X + closure is not assumed
(will wait for user to stop submitting the tab).
Otherwise closure is assumed when pressing the X,
so if you keep submitting the tab may reappear at end of tab bar.


integer reaper.JS_Actions_CountShortcuts(integer section, integer cmdID)

Section:
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.


boolean reaper.JS_Actions_DeleteShortcut(integer section, integer cmdID, integer shortcutidx)

Section:
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.


boolean reaper.JS_Actions_DoShortcutDialog(integer section, integer cmdID, integer shortcutidx)

Section:
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.

If the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.


boolean retval, string desc = reaper.JS_Actions_GetShortcutDesc(integer section, integer cmdID, integer shortcutidx)

Section:
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.


integer byte = reaper.JS_Byte(identifier pointer, integer offset)

Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.


integer reaper.JS_Composite(identifier windowHWND, integer dstx, integer dsty, integer dstw, integer dsth, identifier sysBitmap, integer srcx, integer srcy, integer srcw, integer srch, unsupported autoUpdate)

Composites a LICE bitmap with a REAPER window. Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).

* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.

* autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)

* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.

* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second. (Also refer to the JS_Composite_Delay function.)

* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved. However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area.

* This function should not be applied directly to top-level windows, but rather to child windows.

* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.

* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.

Returns:
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.


integer retval, number prevMinTime, number prevMaxTime, integer prevBitmaps = reaper.JS_Composite_Delay(identifier windowHWND, number minTime, number maxTime, integer numBitmapsWhenMax)

On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window. The optimal refresh rate may depend on the number of composited bitmaps.

minTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window. The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.

If both minTime and maxTime are 0, all delay settings for the window are cleared.

Returns:
* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).
* If delay times have not previously been set for this window, prev time values are 0.


integer retval, string list = reaper.JS_Composite_ListBitmaps(identifier windowHWND)

Returns all bitmaps composited to the given window.

The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.

retval is the number of linked bitmaps found, or negative if an error occured.


reaper.JS_Composite_Unlink(identifier windowHWND, identifier bitmap, unsupported autoUpdate)

Unlinks the window and bitmap.

* autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.

If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.


integer retval, string folder = reaper.JS_Dialog_BrowseForFolder(string caption, string initialFolder)

retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.


integer retval, string fileNames = reaper.JS_Dialog_BrowseForOpenFiles(string windowTitle, string initialFolder, string initialFile, string extensionList, boolean allowMultiple)

If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.
* On macOS, the first substring may be empty, and each file name will then contain its entire path.
* This function only allows selection of existing files, and does not allow creation of new files.

extensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:
* The first substring in each pair describes the filter in user-readable form (for example, "Lua script files (*.lua)") and will be displayed in the dialog box.
* The second substring specifies the filter that the operating system must use to search for the files (for example, "*.txt"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, "*.lua;*.eel").

An example of an extensionList string:
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".

On macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as "All files\0*.*\0\0"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default "All files (*.*)" filter.

retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.

Displaying \0-separated strings:
* REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.


integer retval, string fileName = reaper.JS_Dialog_BrowseForSaveFile(string windowTitle, string initialFolder, string initialFile, string extensionList)

retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.

extensionList is as described for JS_Dialog_BrowseForOpenFiles.


number double = reaper.JS_Double(identifier pointer, integer offset)

Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.


integer retval, number size, string accessedTime, string modifiedTime, string cTime, integer deviceID, integer deviceSpecialID, integer inode, integer mode, integer numLinks, integer ownerUserID, integer ownerGroupID = reaper.JS_File_Stat(string filePath)

Returns information about a file.

cTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.

retval is 0 if successful, negative if not.


reaper.JS_GDI_Blit(identifier destHDC, integer dstx, integer dsty, identifier sourceHDC, integer srcx, integer srxy, integer width, integer height, optional string mode)

Blits between two device contexts, which may include LICE "system bitmaps".

mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.

WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.


identifier reaper.JS_GDI_CreateFillBrush(integer color)


identifier reaper.JS_GDI_CreateFont(integer height, integer weight, integer angle, boolean italic, boolean underline, boolean strike, string fontName)

Parameters:
* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.
* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.
* fontName: If empty string "", uses first font that matches the other specified attributes.

Note: Text color must be set separately.


identifier reaper.JS_GDI_CreatePen(integer width, integer color)


reaper.JS_GDI_DeleteObject(identifier GDIObject)


integer reaper.JS_GDI_DrawText(identifier deviceHDC, string text, integer len, integer left, integer top, integer right, integer bottom, string align))

Parameters:
* align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT", "BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or "ELLIPSIS"


reaper.JS_GDI_FillEllipse(identifier deviceHDC, integer left, integer top, integer right, integer bottom)


reaper.JS_GDI_FillPolygon(identifier deviceHDC, string packedX, string packedY, integer numPoints)

packedX and packedY are strings of points, each packed as "<i4".


reaper.JS_GDI_FillRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom)


reaper.JS_GDI_FillRoundRect(identifier deviceHDC, integer left, integer top, integer right, integer bottom, integer xrnd, integer yrnd)


identifier reaper.JS_GDI_GetClientDC(identifier windowHWND)

Returns the device context for the client area of the specified window.


identifier reaper.JS_GDI_GetScreenDC()

Returns a device context for the entire screen.

WARNING: Only available on Windows, not Linux or macOS.


integer reaper.JS_GDI_GetSysColor(string GUIElement)


integer reaper.JS_GDI_GetTextColor(identifier deviceHDC)


identifier reaper.JS_GDI_GetWindowDC(identifier windowHWND)

Returns the device context for the entire window, including title bar and frame.


reaper.JS_GDI_Line(identifier deviceHDC, integer x1, integer y1, integer x2, integer y2)


reaper.JS_GDI_Polyline(identifier deviceHDC, string packedX, string packedY, integer numPoints)

packedX and packedY are strings of points, each packed as "<i4".


integer reaper.JS_GDI_ReleaseDC(identifier deviceHDC, identifier windowHWND)

To release a window HDC, both arguments must be supplied: the HWND as well as the HDC. To release a screen DC, only the HDC needs to be supplied.

For compatibility with previous versions, the HWND and HDC can be supplied in any order.

NOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.


identifier reaper.JS_GDI_SelectObject(identifier deviceHDC, identifier GDIObject)

Activates a font, pen, or fill brush for subsequent drawing in the specified device context.


reaper.JS_GDI_SetPixel(identifier deviceHDC, integer x, integer y, integer color)


reaper.JS_GDI_SetTextBkColor(identifier deviceHDC, integer color)


reaper.JS_GDI_SetTextBkMode(identifier deviceHDC, integer mode)


reaper.JS_GDI_SetTextColor(identifier deviceHDC, integer color)


reaper.JS_GDI_StretchBlit(identifier destHDC, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceHDC, integer srcx, integer srxy, integer srcw, integer srch, optional string mode)

Blits between two device contexts, which may include LICE "system bitmaps".

modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.

WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.


integer reaper.JS_Header_GetItemCount(identifier headerHWND)


integer int = reaper.JS_Int(identifier pointer, integer offset)

Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.


reaper.JS_LICE_AlterBitmapHSV(identifier bitmap, number hue, number saturation, number value)

Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)


reaper.JS_LICE_AlterRectHSV(identifier bitmap, integer x, integer y, integer w, integer h, number hue, number saturation, number value)

Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)


reaper.JS_LICE_Arc(identifier bitmap, number cx, number cy, number r, number minAngle, number maxAngle, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


integer reaper.JS_LICE_ArrayAllBitmaps(identifier reaperarray)


reaper.JS_LICE_Bezier(identifier bitmap, number xstart, number ystart, number xctl1, number yctl1, number xctl2, number yctl2, number xend, number yend, number tol, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_Blit(identifier destBitmap, integer dstx, integer dsty, identifier sourceBitmap, integer srcx, integer srcy, integer width, integer height, number alpha, string mode)

Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

In addition to the standard LICE modes, LICE_Blit also offers:
* "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)
* "BLUR"
* "ALPHAMUL", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with "COPY,ALPHA".)


reaper.JS_LICE_Circle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_Clear(identifier bitmap, integer color)


identifier reaper.JS_LICE_CreateBitmap(boolean isSysBitmap, integer width, integer height)


identifier reaper.JS_LICE_CreateFont()


reaper.JS_LICE_DestroyBitmap(identifier bitmap)

Deletes the bitmap, and also unlinks bitmap from any composited window.


reaper.JS_LICE_DestroyFont(identifier LICEFont)


reaper.JS_LICE_DrawChar(identifier bitmap, integer x, integer y, integer c, integer color, number alpha, integer mode))


integer reaper.JS_LICE_DrawText(identifier bitmap, identifier LICEFont, string text, integer textLen, integer x1, integer y1, integer x2, integer y2)


reaper.JS_LICE_FillCircle(identifier bitmap, number cx, number cy, number r, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_FillPolygon(identifier bitmap, string packedX, string packedY, integer numPoints, integer color, number alpha, string mode)

packedX and packedY are two strings of coordinates, each packed as "<i4".

LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_FillRect(identifier bitmap, integer x, integer y, integer w, integer h, integer color, number alpha, string mode)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_FillTriangle(identifier bitmap, integer x1, integer y1, integer x2, integer y2, integer x3, integer y3, integer color, number alpha, string mode)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


identifier reaper.JS_LICE_GetDC(identifier bitmap)


integer reaper.JS_LICE_GetHeight(identifier bitmap)


number color = reaper.JS_LICE_GetPixel(identifier bitmap, integer x, integer y)

Returns the color of the specified pixel.


integer reaper.JS_LICE_GetWidth(identifier bitmap)


reaper.JS_LICE_GradRect(identifier bitmap, integer dstx, integer dsty, integer dstw, integer dsth, number ir, number ig, number ib, number ia, number drdx, number dgdx, number dbdx, number dadx, number drdy, number dgdy, number dbdy, number dady, string mode)


boolean reaper.JS_LICE_IsFlipped(identifier bitmap)


reaper.JS_LICE_Line(identifier bitmap, number x1, number y1, number x2, number y2, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


integer retval, string list = reaper.JS_LICE_ListAllBitmaps()


identifier reaper.JS_LICE_LoadJPG(string filename)

Returns a system LICE bitmap containing the JPEG.


identifier reaper.JS_LICE_LoadJPGFromMemory(string buffer, integer bufsize)

Returns a system LICE bitmap containing the JPEG.


identifier reaper.JS_LICE_LoadPNG(string filename)

Returns a system LICE bitmap containing the PNG.


identifier reaper.JS_LICE_LoadPNGFromMemory(string buffer, integer bufsize)

Returns a system LICE bitmap containing the PNG.


integer width, integer Height = reaper.JS_LICE_MeasureText(string text)


boolean reaper.JS_LICE_ProcessRect(identifier bitmap, integer x, integer y, integer w, integer h, string mode, number operand)

Applies bitwise operations to each pixel in the target rectangle.

operand: a color in 0xAARRGGBB format.

modes:
* "XOR", "OR" or "AND".
* "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)
* "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)

NOTE:
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").


reaper.JS_LICE_PutPixel(identifier bitmap, integer x, integer y, number color, number alpha, string mode)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_Resize(identifier bitmap, integer width, integer height)


reaper.JS_LICE_RotatedBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier sourceBitmap, number srcx, number srcy, number srcw, number srch, number angle, number rotxcent, number rotycent, boolean cliptosourcerect, number alpha, string mode)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.


reaper.JS_LICE_RoundRect(identifier bitmap, number x, number y, number w, number h, integer cornerradius, integer color, number alpha, string mode, boolean antialias)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".

LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).


reaper.JS_LICE_ScaledBlit(identifier destBitmap, integer dstx, integer dsty, integer dstw, integer dsth, identifier srcBitmap, number srcx, number srcy, number srcw, number srch, number alpha, string mode)

LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.


reaper.JS_LICE_SetAlphaFromColorMask(identifier bitmap, integer colorRGB)

Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque. (All pixels' RGB values remain unchanged.)


reaper.JS_LICE_SetFontBkColor(identifier LICEFont, integer color)

Sets the color of the font background.


reaper.JS_LICE_SetFontColor(identifier LICEFont, integer color)


reaper.JS_LICE_SetFontFXColor(identifier LICEFont, integer color)

Sets the color of font FX such as shadow.


reaper.JS_LICE_SetFontFromGDI(identifier LICEFont, identifier GDIFont, string moreFormats)

Converts a GDI font into a LICE font.

The font can be modified by the following flags, in a comma-separated list:
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".


boolean reaper.JS_LICE_WriteJPG(string filename, identifier bitmap, integer quality, unsupported forceBaseline)

Parameters:

* quality is an integer in the range 1..100.
* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, "cubist" settings.


boolean reaper.JS_LICE_WritePNG(string filename, identifier bitmap, boolean wantAlpha)


reaper.JS_ListView_EnsureVisible(identifier listviewHWND, integer index, boolean partialOK)


integer reaper.JS_ListView_EnumSelItems(identifier listviewHWND, integer index)

Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.


integer retval, string text = reaper.JS_ListView_GetFocusedItem(identifier listviewHWND)

Returns the index and text of the focused item, if any.


identifier reaper.JS_ListView_GetHeader(identifier listviewHWND)


string text, integer state = reaper.JS_ListView_GetItem(identifier listviewHWND, integer index, integer subItem)

Returns the text and state of specified item.


integer reaper.JS_ListView_GetItemCount(identifier listviewHWND)


boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_ListView_GetItemRect(identifier listviewHWND, integer index)

Returns client coordinates of the item.


integer reaper.JS_ListView_GetItemState(identifier listviewHWND, integer index)

State is a bitmask:
1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.

Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.


string text = reaper.JS_ListView_GetItemText(identifier listviewHWND, integer index, integer subItem)


integer reaper.JS_ListView_GetSelectedCount(identifier listviewHWND)


integer reaper.JS_ListView_GetTopIndex(identifier listviewHWND)


integer index, integer subItem, integer flags = reaper.JS_ListView_HitTest(identifier listviewHWND, integer clientX, integer clientY)


integer retval, string items = reaper.JS_ListView_ListAllSelItems(identifier listviewHWND)

Returns the indices of all selected items as a comma-separated list.

* retval: Number of selected items found; negative or zero if an error occured.


reaper.JS_ListView_SetItemState(identifier listviewHWND, integer index, integer state, integer mask)

The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.

1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.

Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.


reaper.JS_ListView_SetItemText(identifier listviewHWND, integer index, integer subItem, string text)

Currently, this fuction only accepts ASCII text.


string translation = reaper.JS_Localize(string USEnglish, string LangPackSection)

Returns the translation of the given US English text, according to the currently loaded Language Pack.

Parameters:
* LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".
* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.

Example: reaper.JS_Localize("Actions", "common", "", 20)


integer reaper.JS_MIDIEditor_ArrayAll(identifier reaperarray)

Finds all open MIDI windows (whether docked or not).

* retval: The number of MIDI editor windows found; negative if an error occurred.

* The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.


integer retval, string list = reaper.JS_MIDIEditor_ListAll()

Finds all open MIDI windows (whether docked or not).

* retval: The number of MIDI editor windows found; negative if an error occurred.

* list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.


identifier reaper.JS_Mem_Alloc(integer sizeBytes)

Allocates memory for general use by functions that require memory buffers.


boolean reaper.JS_Mem_Free(identifier mallocPointer)

Frees memory that was previously allocated by JS_Mem_Alloc.


boolean reaper.JS_Mem_FromString(identifier mallocPointer, integer offset, string packedString, integer stringLength)

Copies a packed string into a memory buffer.


identifier reaper.JS_Mouse_GetCursor()

On Windows, retrieves a handle to the current mouse cursor.
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.


integer reaper.JS_Mouse_GetState(integer flags)

Retrieves the states of mouse buttons and modifiers keys.

Parameters:
* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.


identifier reaper.JS_Mouse_LoadCursor(integer cursorNumber)

Loads a cursor by number.

cursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).

If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.


identifier reaper.JS_Mouse_LoadCursorFromFile(string pathAndFileName, unsupported forceNewLoad)

Loads a cursor from a .cur file.

forceNewLoad is an optional boolean parameter:
* If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.
* If true, the file will be re-loaded and a new handle will be returned.
* WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.

If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.


reaper.JS_Mouse_SetCursor(identifier cursorHandle)

Sets the mouse cursor. (Only lasts while script is running, and for a single "defer" cycle.)


boolean reaper.JS_Mouse_SetPosition(integer x, integer y)

Moves the mouse cursor to the specified screen coordinates.

NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.


number version = reaper.JS_ReaScriptAPI_Version()

Returns the version of the js_ReaScriptAPI extension.


boolean retval, string buf = reaper.JS_String(identifier pointer, integer offset, integer lengthChars)

Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.


string state = reaper.JS_VKeys_GetDown(number cutoffTime)

Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.

Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.


string state = reaper.JS_VKeys_GetState(number cutoffTime)

Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.

cutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.)
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().
If cutoffTime is negative, it is relative to the current time.

Notes:
* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.
* Auto-repeated KEYDOWN messages are ignored.


string state = reaper.JS_VKeys_GetUp(number cutoffTime)

Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.

Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.


integer reaper.JS_VKeys_Intercept(integer keyCode, integer intercept)

Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh: Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.

keyCode: The virtual key code of the key, or -1 to change the state of all keys.

intercept: A script can increase the intercept state by passing +1, or lower the state by passing -1. Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.

Returns: If keyCode refers to a single key, the intercept state of that key is returned. If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.


integer reaper.JS_WindowMessage_Intercept(identifier windowHWND, string message, boolean passThrough)

Begins intercepting a window message type to specified window.

Parameters:
* message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example "WM_SETCURSOR" or "0x0020".
* passThrough: Whether message should be blocked (false) or passed through (true) to the window.
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.

Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -2: message string could not be parsed.
* -3: Failure getting original window process / window not valid.
* -6: Could not obtain the window client HDC.

Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.
* Mouse events are typically received by the child window under the mouse, not the parent window.
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.


integer reaper.JS_WindowMessage_InterceptList(identifier windowHWND, string messages)

Begins intercepting window messages to specified window.

Parameters:
* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a "block" or "passthrough" modifier to specify whether the message should be blocked or passed through to the window. For example "WM_SETCURSOR:block, 0x0201:passthrough".
For more information on message codes, refer to the Win32 C++ API documentation.
All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.

Returns:
* 1: Success.
* 0: The message type is already being intercepted by another script.
* -1: windowHWND is not a valid window.
* -2: message string could not be parsed.
* -3: Failure getting original window process.
* -6: COuld not obtain the window client HDC.

Notes:
* Intercepted messages can be polled using JS_WindowMessage_Peek.
* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.
* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.


boolean retval, string list = reaper.JS_WindowMessage_ListIntercepts(identifier windowHWND)

Returns a string with a list of all message types currently being intercepted for the specified window.


integer reaper.JS_WindowMessage_PassThrough(identifier windowHWND, string message, boolean passThrough)

Changes the passthrough setting of a message type that is already being intercepted.

Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.


boolean retval, boolean passedThrough, number time, integer wParamLow, integer wParamHigh, integer lParamLow, integer lParamHigh = reaper.JS_WindowMessage_Peek(identifier windowHWND, string message)

Polls the state of an intercepted message.

Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)

Returns:
* A retval of false indicates that the message type is not being intercepted in the specified window.
* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.
* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.
* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.
* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.


boolean reaper.JS_WindowMessage_Post(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)

If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.

If the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.

Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)

Notes:
* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.


integer reaper.JS_WindowMessage_Release(identifier windowHWND, string messages)

Release intercepts of specified message types.

Parameters:
* messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.


reaper.JS_WindowMessage_ReleaseAll()

Release script intercepts of window messages for all windows.


reaper.JS_WindowMessage_ReleaseWindow(identifier windowHWND)

Release script intercepts of window messages for specified window.


integer reaper.JS_WindowMessage_Send(identifier windowHWND, string message, number wParam, integer wParamHighWord, number lParam, integer lParamHighWord)

Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.

Parameters:
* message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".
(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)
* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.
(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)

Notes:
* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.
* Messages should only be sent to windows that were created from the main thread.
* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.


number address = reaper.JS_Window_AddressFromHandle(identifier handle)


integer reaper.JS_Window_ArrayAllChild(identifier parentHWND, identifier reaperarray)

Finds all child windows of the specified parent.

Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.


integer reaper.JS_Window_ArrayAllTop(identifier reaperarray)

Finds all top-level windows.

Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.


integer reaper.JS_Window_ArrayFind(string title, boolean exact, identifier reaperarray)

Finds all windows, whether top-level or child, whose titles match the specified string.

Returns:
* retval: The number of windows found; negative if an error occurred.
* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.

Parameters:
* exact: Match entire title exactly, or match substring of title.


reaper.JS_Window_AttachResizeGrip(identifier windowHWND)


reaper.JS_Window_AttachTopmostPin(identifier windowHWND)

Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.

WARNING: This function does not yet work on Linux.


integer x, integer y = reaper.JS_Window_ClientToScreen(identifier windowHWND, integer x, integer y)

Converts the client-area coordinates of a specified point to screen coordinates.

NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.


identifier retval, optional string style = reaper.JS_Window_Create(string title, string className, integer x, integer y, integer w, integer h, optional string style, identifier ownerHWND)

Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).

style: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.

On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.

className: On Windows, only standard ANSI characters are supported.

ownerHWND: Optional parameter, only available on WindowsOS. Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.

NOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.


reaper.JS_Window_Destroy(identifier windowHWND)

Destroys the specified window.


reaper.JS_Window_Enable(identifier windowHWND, boolean enable)

Enables or disables mouse and keyboard input to the specified window or control.


integer reaper.JS_Window_EnableMetal(identifier windowHWND)

On macOS, returns the Metal graphics setting:
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).
1 = Metal enabled.
0 = N/A (Windows and Linux).
-1 = non-metal async layered mode.
-2 = non-metal non-async layered mode.

WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.


identifier reaper.JS_Window_Find(string title, boolean exact)

Returns a HWND to a window whose title matches the specified string.
* Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.
* In addition, the function can optionally match substrings of the title.
* Matching is not case sensitive.

Parameters:
* exact: Match entire title, or match substring of title.


identifier reaper.JS_Window_FindChild(identifier parentHWND, string title, boolean exact)

Returns a HWND to a child window whose title matches the specified string.

Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.


identifier reaper.JS_Window_FindChildByID(identifier parentHWND, integer ID)

Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.

(The ID of a window may be retrieved by JS_Window_GetLongPtr.)


identifier reaper.JS_Window_FindEx(identifier parentHWND, identifier childHWND, string className, string title)

Returns a handle to a child window whose class and title match the specified strings.

Parameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.
* title: An empty string, "", will match all windows. (Search is not case sensitive.)


identifier reaper.JS_Window_FindTop(string title, boolean exact)

Returns a HWND to a top-level window whose title matches the specified string.

Parameters:
* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.


identifier reaper.JS_Window_FromPoint(integer x, integer y)

Retrieves a HWND to the window that contains the specified point.

NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.


string class = reaper.JS_Window_GetClassName(identifier windowHWND)

WARNING: May not be fully implemented on macOS and Linux.


boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetClientRect(identifier windowHWND)

Retrieves the screen coordinates of the client area rectangle of the specified window.

NOTES:
* Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.
* The pixel at (right, bottom) lies immediately outside the rectangle.
* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.


boolean retval, integer width, integer height = reaper.JS_Window_GetClientSize(identifier windowHWND)


identifier reaper.JS_Window_GetFocus()

Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.


identifier reaper.JS_Window_GetForeground()

Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).


number retval = reaper.JS_Window_GetLong(identifier windowHWND, string info)

Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer.

In the case of "DLGPROC" and "WNDPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.

If the function fails, the return value is 0.


identifier reaper.JS_Window_GetLongPtr(identifier windowHWND, string info)

Returns information about the specified window.

info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".

For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.

The values returned by "DLGPROC" and "WNDPROC" are typically used as-is, as pointers, whereas the others should first be converted to integers.

If the function fails, a null pointer is returned.


identifier reaper.JS_Window_GetParent(identifier windowHWND)

Retrieves a HWND to the specified window's parent or owner.
Returns NULL if the window is unowned or if the function otherwise fails.


boolean retval, integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetRect(identifier windowHWND)

Retrieves the screen coordinates of the bounding rectangle of the specified window.

NOTES:
* On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* The pixel at (right, bottom) lies immediately outside the rectangle.


identifier reaper.JS_Window_GetRelated(identifier windowHWND, string relation)

Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".
(Refer to documentation for Win32 C++ function GetWindow.)


boolean retval, integer position, integer pageSize, integer min, integer max, integer trackPos = reaper.JS_Window_GetScrollInfo(identifier windowHWND, string scrollbar)

Retrieves the scroll information of a window.

Parameters:
* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.

Returns:
* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.


string title = reaper.JS_Window_GetTitle(identifier windowHWND)

Returns the title (if any) of the specified window.


integer left, integer top, integer right, integer bottom = reaper.JS_Window_GetViewportFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)

Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.

If the monitor is not the primary display, some of the rectangle's coordinates may be negative.

wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.


identifier reaper.JS_Window_HandleFromAddress(number address)

Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.


boolean reaper.JS_Window_InvalidateRect(identifier windowHWND, integer left, integer top, integer right, integer bottom, boolean eraseBackground)

Similar to the Win32 function InvalidateRect.


boolean reaper.JS_Window_IsChild(identifier parentHWND, identifier childHWND)

Determines whether a window is a child window or descendant window of a specified parent window.


boolean reaper.JS_Window_IsVisible(identifier windowHWND)

Determines the visibility state of the window.


boolean reaper.JS_Window_IsWindow(identifier windowHWND)

Determines whether the specified window handle identifies an existing window.

On macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).

NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").


integer retval, string list = reaper.JS_Window_ListAllChild(identifier parentHWND)

Finds all child windows of the specified parent.

Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values.
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.


integer retval, string list = reaper.JS_Window_ListAllTop()

Finds all top-level windows.

Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.


integer retval, string list = reaper.JS_Window_ListFind(string title, boolean exact)

Finds all windows (whether top-level or child) whose titles match the specified string.

Returns:
* retval: The number of windows found; negative if an error occurred.
* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.

Parameters:
* exact: Match entire title exactly, or match substring of title.


integer left, integer top, integer right, integer bottom = reaper.JS_Window_MonitorFromRect(integer x1, integer y1, integer x2, integer y2, boolean wantWork)

Deprecated - use GetViewportFromRect instead.


reaper.JS_Window_Move(identifier windowHWND, integer left, integer top)

Changes the position of the specified window, keeping its size constant.

NOTES:
* For top-level windows, position is relative to the primary display.
* On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.
* On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.
* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.
* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.


boolean reaper.JS_Window_OnCommand(identifier windowHWND, integer commandID)

Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.

This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.

In the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.


reaper.JS_Window_Resize(identifier windowHWND, integer width, integer height)

Changes the dimensions of the specified window, keeping the top left corner position constant.
* If resizing script GUIs, call gfx.update() after resizing.
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.


integer x, integer y = reaper.JS_Window_ScreenToClient(identifier windowHWND, integer x, integer y)

Converts the screen coordinates of a specified point on the screen to client-area coordinates.

NOTES:
* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.
* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.
* On all platforms, client coordinates are relative to the upper left corner of the client area.


reaper.JS_Window_SetFocus(identifier windowHWND)

Sets the keyboard focus to the specified window.


reaper.JS_Window_SetForeground(identifier windowHWND)

Brings the specified window into the foreground, activates the window, and directs keyboard input to it.


number retval = reaper.JS_Window_SetLong(identifier windowHWND, string info, number value)

Similar to the Win32 function SetWindowLongPtr.

info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".


boolean reaper.JS_Window_SetOpacity(identifier windowHWND, string mode, number value)

Sets the window opacity.

Parameters:
mode: either "ALPHA" or "COLOR".
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included.
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too). WARNING:
COLOR mode is only available in Windows, not Linux or macOS.

Transparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.


identifier reaper.JS_Window_SetParent(identifier childHWND, identifier parentHWND)

If successful, returns a handle to the previous parent window.

Only on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.


boolean retval, optional string ZOrder, optional string flags = reaper.JS_Window_SetPosition(identifier windowHWND, integer left, integer top, integer width, integer height, optional string ZOrder, optional string flags)

Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.

ZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND converted to a string, for example by the Lua function tostring.
* flags: Any combination of the standard flags, of which "NOMOVE", "NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and "NOCOPYBITS" should be valid cross-platform.


boolean reaper.JS_Window_SetScrollPos(identifier windowHWND, string scrollbar, integer position)

Parameters:
* scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.

NOTE: API functions can scroll REAPER's windows, but cannot zoom them. Instead, use actions such as "View: Zoom to one loop iteration".


boolean retval, string style = reaper.JS_Window_SetStyle(identifier windowHWND, string style)

Sets and applies a window style.

style may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.

On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.


boolean reaper.JS_Window_SetTitle(identifier windowHWND, string title)

Changes the title of the specified window. Returns true if successful.


boolean reaper.JS_Window_SetZOrder(identifier windowHWND, string ZOrder, identifier insertAfterHWND)

Sets the window Z order.
* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.
* Not all the Z orders have been implemented in Linux yet.

Parameters:
* ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND converted to a string, for example by the Lua function tostring.

* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is "INSERTAFTER", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).


reaper.JS_Window_Show(identifier windowHWND, string state)

Sets the specified window's show state.

Parameters:
* state: One of the following options: "SHOW", "SHOWNA" (or "SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL", "SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only the first four options are fully implemented.


reaper.JS_Window_Update(identifier windowHWND)

Similar to the Win32 function UpdateWindow.


integer reaper.JS_Zip_Close(string zipFile, identifier zipHandle)

Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.


integer reaper.JS_Zip_CountEntries(identifier zipHandle)


integer reaper.JS_Zip_DeleteEntries(identifier zipHandle, string entryNames, integer entryNamesStrLen)

Deletes the specified entries from an existing Zip file.

entryNames is zero-separated and double-zero-terminated.

Returns the number of deleted entries on success, negative number (< 0) on error.


integer reaper.JS_Zip_Entry_Close(identifier zipHandle)

Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.

Returns 0 on success, negative number (< 0) on error.


integer reaper.JS_Zip_Entry_CompressFile(identifier zipHandle, string inputFile)

Compresses the specified file into the zip archive's open entry.

Returns 0 on success, negative number (< 0) on error.


integer reaper.JS_Zip_Entry_CompressMemory(identifier zipHandle, string buf, integer buf_size)

Compresses the specified memory buffer into the zip archive's open entry.

Returns 0 on success, negative number (< 0) on error.


integer reaper.JS_Zip_Entry_ExtractToFile(identifier zipHandle, string outputFile)

Extracts the zip archive's open entry.

Returns 0 on success, negative number (< 0) on error.


integer retval, string contents = reaper.JS_Zip_Entry_ExtractToMemory(identifier zipHandle)

Extracts and returns the zip archive's open entry.

Returns the number of bytes extracted on success, negative number (< 0) on error.


integer retval, string name, integer index, integer isFolder, number size, number crc32 = reaper.JS_Zip_Entry_Info(identifier zipHandle)

Returns information about the zip archive's open entry.


integer reaper.JS_Zip_Entry_OpenByIndex(identifier zipHandle, integer index)

Opens a new entry by index in the zip archive.

This function is only valid if zip archive was opened in 'r' (readonly) mode.

Returns 0 on success, negative number on error.


integer reaper.JS_Zip_Entry_OpenByName(identifier zipHandle, string entryName)

Opens an entry by name in the zip archive.

For zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.

Returns 0 on success, negative number (< 0) on error.


string errorStr = reaper.JS_Zip_ErrorString(integer errorNum)

Returns a descriptive string for the given error code.


integer reaper.JS_Zip_Extract(string zipFile, string outputFolder)

Extracts an existing Zip file to the specified folder.

Returns the number of extracted files on success, negative number (< 0) on error.


integer retval, string list = reaper.JS_Zip_ListAllEntries(identifier zipHandle)

Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.

On error, returns a negative number (< 0).


identifier retval, integer retval = reaper.JS_Zip_Open(string zipFile, string mode, integer compressionLevel)

Opens a zip archive using the given mode, which can be either "READ" or "WRITE" (or simply 'r' or 'w').

* READ: Opens an existing archive for reading/extracting.
* WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.

compressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.

If successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.

NOTES:
* The Zip API functions support Unicode file names and entry names.
* The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names.


reaper.Llm_Do(optional integer paramIn)

Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.


string buf = reaper.Llm_Get(string parmname, string buf, MediaTrack trIn)

Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','.
GRAPH : Mixer routings as network graph in format "node;neighborhood\n" where node is track, and neighborhood is group of tracks in format "track;tr#1;tr#2...\n". Or as "parent;children\n" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. "7;1;-1;\n" would mean "8th track is connected to 2nd track and Master track."
PDCLATENCY : Latency in samples.
PDCLIMIT : Limit in samples.
REALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: "begin:disabled fx,...;next:fx,...;end:fx,...;\n." E.g. "3:1,2;0;-1:0\n" would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.
SAFE : 'Safed' plugins as "track#:fx#\n" pairs.
VECTOR : Same as REALLM without FX information. Faster.


reaper.Llm_Set(string parmname, string bufIn)

Set ReaLlm parameters.
PDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. "1.5".
MONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. "true".
PARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name,param_index,val1,val2'.



boolean reaper.NF_AnalyzeMediaItemPeakAndRMS(MediaItem item, number windowSize, identifier reaper.array_peaks, identifier reaper.array_peakpositions, identifier reaper.array_RMSs, identifier reaper.array_RMSpositions)

This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format.


boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax = reaper.NF_AnalyzeTakeLoudness(MediaItem_Take take, boolean analyzeTruePeak)

Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.


boolean retval, number lufsIntegrated, number range, number truePeak, number truePeakPos, number shortTermMax, number momentaryMax, number shortTermMaxPos, number momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(MediaItem_Take take, boolean analyzeTruePeak)

Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.).


boolean retval, number lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take take)

Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow


number reaper.NF_GetMediaItemAverageRMS(MediaItem item)

Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.


number reaper.NF_GetMediaItemMaxPeak(MediaItem item)

Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.


number retval, number maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem item)

See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).


number reaper.NF_GetMediaItemPeakRMS_NonWindowed(MediaItem item)

Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX.
Returns -150.0 if MIDI take or empty item.


number reaper.NF_GetMediaItemPeakRMS_Windowed(MediaItem item)

Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX.
Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.


string reaper.NF_GetSWSMarkerRegionSub(integer markerRegionIdx)

Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here.


string reaper.NF_GetSWSTrackNotes(MediaTrack track)


number target, number windowSize = reaper.NF_GetSWS_RMSoptions()

Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions.


boolean reaper.NF_SetSWSMarkerRegionSub(string markerRegionSub, integer markerRegionIdx)

Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here.


reaper.NF_SetSWSTrackNotes(MediaTrack track, string str)


boolean reaper.NF_SetSWS_RMSoptions(number targetLevel, number windowSize)

Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)


boolean retval, string name = reaper.NF_TakeFX_GetFXModuleName(MediaItem item, integer fx)

See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).


reaper.NF_UpdateSWSMarkerRegionSubWindow()

Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)


integer reaper.NF_Win32_GetSystemMetrics(integer nIndex)

Equivalent to win32 API GetSystemMetrics().


boolean reaper.ReaPack_AboutInstalledPackage(PackageEntry entry)

Show the about dialog of the given package entry.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.


boolean reaper.ReaPack_AboutRepository(string repoName)

Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.


boolean retval, string error = reaper.ReaPack_AddSetRepository(string name, string url, boolean enable, integer autoInstall)

Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.

autoInstall: usually set to 2 (obey user setting).


reaper.ReaPack_BrowsePackages(string filter)

Opens the package browser with the given filter string.


integer retval, string error = reaper.ReaPack_CompareVersions(string ver1, string ver2)

Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.


boolean retval, string path, integer sections, integer type = reaper.ReaPack_EnumOwnedFiles(PackageEntry entry, integer index)

Enumerate the files owned by the given package. Returns false when there is no more data.

sections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor
type: see ReaPack_GetEntryInfo.


boolean reaper.ReaPack_FreeEntry(PackageEntry entry)

Free resources allocated for the given package entry.


boolean retval, string repo, string cat, string pkg, string desc, integer type, string ver, string author, integer flags, integer fileCount = reaper.ReaPack_GetEntryInfo(PackageEntry entry)

Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.

type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface


PackageEntry retval, string error = reaper.ReaPack_GetOwner(string fn)

Returns the package entry owning the given file.
Delete the returned object from memory after use with ReaPack_FreeEntry.


boolean retval, string url, boolean enabled, integer autoInstall = reaper.ReaPack_GetRepositoryInfo(string name)

Get the infos of the given repository.

autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting


reaper.ReaPack_ProcessQueue(boolean refreshUI)

Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).


boolean reaper.SNM_AddReceive(MediaTrack src, MediaTrack dest, integer type)

[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).
Note: obeys default sends preferences, supports frozen tracks, etc..


boolean reaper.SNM_AddTCPFXParm(MediaTrack tr, integer fxId, integer prmId)

[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)


WDL_FastString reaper.SNM_CreateFastString(string str)

[S&M] Instantiates a new "fast string". You must delete this string, see SNM_DeleteFastString.


reaper.SNM_DeleteFastString(WDL_FastString str)

[S&M] Deletes a "fast string" instance.


number reaper.SNM_GetDoubleConfigVar(string varname, number errvalue)

[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).


string reaper.SNM_GetFastString(WDL_FastString str)

[S&M] Gets the "fast string" content.


integer reaper.SNM_GetFastStringLength(WDL_FastString str)

[S&M] Gets the "fast string" length.


integer reaper.SNM_GetIntConfigVar(string varname, integer errvalue)

[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).


boolean retval, integer high, integer low = reaper.SNM_GetLongConfigVar(string varname)

[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).


MediaItem_Take reaper.SNM_GetMediaItemTakeByGUID(ReaProject project, string guid)

[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID


boolean reaper.SNM_GetProjectMarkerName(ReaProject proj, integer num, boolean isrgnWDL_FastString name)

[S&M] Gets a marker/region name. Returns true if marker/region found.


boolean reaper.SNM_GetSetObjectState(identifier objWDL_FastString state, boolean setnewvalue, boolean wantminimalstate)

[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.
When getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.


boolean reaper.SNM_GetSetSourceState(MediaItem item, integer takeidxWDL_FastString state, boolean setnewvalue)

[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.
Note: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.


boolean reaper.SNM_GetSetSourceState2(MediaItem_Take takeWDL_FastString state, boolean setnewvalue)

[S&M] Gets or sets a take source state. Returns false if failed.
Note: this function cannot deal with empty takes, see SNM_GetSetSourceState.


boolean reaper.SNM_GetSourceType(MediaItem_Take takeWDL_FastString type)

[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)


boolean reaper.SNM_MoveOrRemoveTrackFX(MediaTrack tr, integer fxId, integer what)

[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.


boolean retval, string tagval = reaper.SNM_ReadMediaFileTag(string fn, string tag)

[S&M] Reads a media file tag. Supported tags: "artist", "album", "genre", "comment", "title", "track" (track number) or "year". Returns false if tag was not found. See SNM_TagMediaFile.


boolean reaper.SNM_RemoveReceive(MediaTrack tr, integer rcvidx)

[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.


boolean reaper.SNM_RemoveReceivesFrom(MediaTrack tr, MediaTrack srctr)

[S&M] Removes all receives from srctr. Returns false if nothing updated.


integer reaper.SNM_SelectResourceBookmark(string name)

[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).


boolean reaper.SNM_SetDoubleConfigVar(string varname, number newvalue)

[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).


WDL_FastString reaper.SNM_SetFastString(WDL_FastString str, string newstr)

[S&M] Sets the "fast string" content. Returns str for facility.


boolean reaper.SNM_SetIntConfigVar(string varname, integer newvalue)

[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).


boolean reaper.SNM_SetLongConfigVar(string varname, integer newHighValue, integer newLowValue)

[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).


boolean reaper.SNM_SetProjectMarker(ReaProject proj, integer num, boolean isrgn, number pos, number rgnend, string name, integer color)

[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names "".


boolean reaper.SNM_TagMediaFile(string fn, string tag, string tagval)

[S&M] Tags a media file thanks to TagLib. Supported tags: "artist", "album", "genre", "comment", "title", "track" (track number) or "year". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.


reaper.SNM_TieResourceSlotActions(integer bookmarkId)

[S&M] Attach Resources slot actions to a given bookmark.


reaper.SN_FocusMIDIEditor()

Focuses the active/open MIDI editor.


string reaper.ULT_GetMediaItemNote(MediaItem item)

[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes.


reaper.ULT_SetMediaItemNote(MediaItem item, string note)

[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes.


AudioWriter reaper.Xen_AudioWriter_Create(string filename, integer numchans, integer samplerate)

Creates writer for 32 bit floating point WAV


reaper.Xen_AudioWriter_Destroy(AudioWriter writer)

Destroys writer


integer reaper.Xen_AudioWriter_Write(AudioWriter writer, integer numframes, identifier data, integer offset)

Write interleaved audio data to disk


integer reaper.Xen_GetMediaSourceSamples(PCM_source src, identifier destbuf, integer destbufoffset, integer numframes, integer numchans, number samplerate, number sourceposition)

Get interleaved audio data from media source


integer reaper.Xen_StartSourcePreview(PCM_source source, number gain, boolean loop, optional integer outputchanindexIn)

Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.
If the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.


integer reaper.Xen_StopSourcePreview(integer preview_id)

Stop audio preview. id -1 stops all.




ReaScript/Lua Built-In Function list

Lua: reaper.atexit(function)

Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.


Lua: reaper.defer(function)

Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.


Lua: reaper.get_action_context()

is_new_value,filename,sectionID,cmdID,mode,resolution,val,contextstr = reaper.get_action_context()
Returns contextual information about the script, typically MIDI/OSC input values.
val will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes).
resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.
sectionID, and cmdID will be set to -1 if the script is not part of the action list.
mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.
contextstr may be empty or one of:

midi:XX[:YY] (one or two bytes hex)
[wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags
key:flags:keycode
osc:/msg[:f=FloatValue|:s=StringValue]
KBD_OnMainActionEx
(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)



Lua: gfx VARIABLES

The following global variables are special and will be used by the graphics system:

gfx.r - current red component (0..1) used by drawing operations.
gfx.g - current green component (0..1) used by drawing operations.
gfx.b - current blue component (0..1) used by drawing operations.
gfx.a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).
gfx.a - alpha for drawing (1=normal).
gfx.mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit().
gfx.w - width of the UI framebuffer.
gfx.h - height of the UI framebuffer.
gfx.x - current graphics position X. Some drawing functions use as start position and update.
gfx.y - current graphics position Y. Some drawing functions use as start position and update.
gfx.clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black).
gfx.dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).
gfx.texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.
gfx.ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx.w/gfx.h/etc will be doubled, but on other systems gfx.w/gfx.h will remain the same and gfx.ext_retina is a scaling hint for drawing.
gfx.mouse_x - current X coordinate of the mouse relative to the graphics window.
gfx.mouse_y - current Y coordinate of the mouse relative to the graphics window.
gfx.mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
gfx.mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.
gfx.mouse_cap - a bitfield of mouse and keyboard modifier state. Note that a script must call gfx.getchar() at least once in order to get modifier state when the mouse is not captured by the window. Bitfield bits:
1: left mouse button
2: right mouse button
4: Command key
8: Shift key
16: Option key
32: Control key
64: middle mouse button



Lua: gfx.arc(x,y,r,ang1,ang2[,antialias])

Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.


Lua: gfx.blit(source[, scale, rotation, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])

Copies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).
If destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.
scale (1.0 is unscaled) will be used only if destw/desth are not specified.
rotation is an angle in radians
srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)
destx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).


Lua: gfx.blitext(source,coordinatelist,rotation)

Deprecated, use gfx.blit instead.


Lua: gfx.blurto(x,y)

Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.


Lua: gfx.circle(x,y,r[,fill,antialias])

Draws a circle, optionally filling/antialiasing.


Lua: gfx.clienttoscreen(x,y)

Converts the coordinates x,y to screen coordinates, returns those values.


Lua: gfx.deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])

Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.


Lua: gfx.dock(v[,wx,wy,ww,wh])

Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size


Lua: gfx.drawchar(char)

Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.


Lua: gfx.drawnumber(n,ndigits)

Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.


Lua: gfx.drawstr("str"[,flags,right,bottom])

Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.

If flags, right ,bottom passed in:
flags&1: center horizontally
flags&2: right justify
flags&4: center vertically
flags&8: bottom justify
flags&256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)


Lua: gfx.getchar([char, unichar])

If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed. Note that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.

Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'.

Modified and special keys can also be returned, including:

Ctrl/Cmd+A..Ctrl+Z as 1..26
Ctrl/Cmd+Alt+A..Z as 257..282
Alt+A..Z as 'A'+256..'Z'+256
27 for ESC
13 for Enter
' ' for space
65536 for query of special flags, returns: &1 (supported), &2=window has focus, &4=window is visible
If unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'<<24 + value



Lua: gfx.getdropfile(idx)

Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.


Lua: gfx.getfont()

Returns current font index, and the actual font face used by this font (if available).


Lua: gfx.getimgdim(handle)

Retreives the dimensions of an image specified by handle, returns w, h pair.


Lua: gfx.getpixel()

Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)


Lua: gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])

Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.


Lua: gfx.init("name"[,width,height,dockstate,xpos,ypos])

Initializes the graphics window with title name. Suggested width and height can be specified. If window is already open, a non-empty name will re-title window, or an empty title will resize window.

Once the graphics window is open, gfx.update() should be called periodically.


Lua: gfx.line(x,y,x2,y2[,aa])

Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.


Lua: gfx.lineto(x,y[,aa])

Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.


Lua: gfx.loadimg(image,"filename")

Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file.


Lua: gfx.measurechar(char)

Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character.


Lua: gfx.measurestr("str")

Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.


Lua: gfx.muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])

Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.


Lua: gfx.printf("format"[, ...])

Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()


Lua: gfx.quit()

Closes the graphics window.


Lua: gfx.rect(x,y,w,h[,filled])

Fills a rectangle at x,y, w,h pixels in dimension, filled by default.


Lua: gfx.rectto(x,y)

Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y.


Lua: gfx.roundrect(x,y,w,h,radius[,antialias])

Draws a rectangle with rounded corners.


Lua: gfx.screentoclient(x,y)

Converts the screen coordinates x,y to client coordinates, returns those values.


Lua: gfx.set(r[,g,b,a,mode,dest,a2])

Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified


Lua: gfx.setcursor(resource_id,custom_cursor_name)

Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.


Lua: gfx.setfont(idx[,"fontface", sz, flags])

Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as "Arial", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height.


Lua: gfx.setimgdim(image,w,h)

Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.


Lua: gfx.setpixel(r,g,b)

Writes a pixel of r,g,b to gfx.x,gfx.y.


Lua: gfx.showmenu("str")

Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.
Fields can start with special characters:

# : grayed out
! : checked
> : this menu item shows a submenu
< : last item in the current submenu

An empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.
Example:

gfx.showmenu("first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu")


Lua: gfx.transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)

Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.


Lua: gfx.triangle(x1,y1,x2,y2,x3,y3[x4,y4...])

Draws a filled triangle, or any convex polygon.


Lua: gfx.update()

Updates the graphics display, if opened


Lua: reaper.gmem_attach(sharedMemoryName)

Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name.


Lua: reaper.gmem_read(index)

Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).


Lua: reaper.gmem_write(index,value)

Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).


Lua: reaper.new_array([table|array][size])

Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.


Lua: reaper.runloop(function)

Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().
Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.


Lua: {reaper.array}.clear([value, offset, size])

Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.


Lua: {reaper.array}.convolve([src, srcoffs, size, destoffs])

Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)


Lua: {reaper.array}.copy([src, srcoffs, size, destoffs])

Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.


Lua: {reaper.array}.fft(size[, permute, offset])

Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.


Lua: {reaper.array}.fft_real(size[, permute, offset])

Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.


Lua: {reaper.array}.get_alloc()

Returns the maximum (allocated) size of the array.


Lua: {reaper.array}.ifft(size[, permute, offset])

Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.


Lua: {reaper.array}.ifft_real(size[, permute, offset])

Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.


Lua: {reaper.array}.multiply([src, srcoffs, size, destoffs])

Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.


Lua: {reaper.array}.resize(size)

Resizes an array object to size. size must be [0..max_size].


Lua: {reaper.array}.table([offset, size])

Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.

View: [all] [C/C++] [EEL2] [Lua] [Python]